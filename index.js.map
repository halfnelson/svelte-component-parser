{"version":3,"file":"index.js","sources":["node_modules/acorn/dist/acorn.mjs","node_modules/acorn-dynamic-import/lib/index.js","svelte/src/parse/acorn.ts","svelte/src/parse/read/expression.ts","svelte/src/parse/read/script.ts","node_modules/css-tree/lib/tokenizer/error.js","node_modules/css-tree/lib/tokenizer/const.js","node_modules/css-tree/lib/tokenizer/utils.js","node_modules/css-tree/lib/tokenizer/Tokenizer.js","node_modules/css-tree/lib/tokenizer/index.js","node_modules/css-tree/lib/utils/list.js","node_modules/css-tree/lib/parser/sequence.js","node_modules/css-tree/lib/parser/create.js","node_modules/css-tree/lib/syntax/scope/default.js","node_modules/css-tree/lib/syntax/scope/atruleExpression.js","node_modules/css-tree/lib/syntax/scope/selector.js","node_modules/css-tree/lib/syntax/function/element.js","node_modules/css-tree/lib/syntax/function/expression.js","node_modules/css-tree/lib/syntax/function/var.js","node_modules/css-tree/lib/syntax/scope/value.js","node_modules/css-tree/lib/syntax/scope/index.js","node_modules/css-tree/lib/syntax/atrule/font-face.js","node_modules/css-tree/lib/syntax/atrule/import.js","node_modules/css-tree/lib/syntax/atrule/media.js","node_modules/css-tree/lib/syntax/atrule/page.js","node_modules/css-tree/lib/syntax/atrule/supports.js","node_modules/css-tree/lib/syntax/atrule/index.js","node_modules/css-tree/lib/syntax/pseudo/dir.js","node_modules/css-tree/lib/syntax/pseudo/has.js","node_modules/css-tree/lib/syntax/pseudo/lang.js","node_modules/css-tree/lib/syntax/pseudo/common/selectorList.js","node_modules/css-tree/lib/syntax/pseudo/matches.js","node_modules/css-tree/lib/syntax/pseudo/not.js","node_modules/css-tree/lib/syntax/pseudo/common/nthWithOfClause.js","node_modules/css-tree/lib/syntax/pseudo/nth-child.js","node_modules/css-tree/lib/syntax/pseudo/nth-last-child.js","node_modules/css-tree/lib/syntax/pseudo/common/nth.js","node_modules/css-tree/lib/syntax/pseudo/nth-last-of-type.js","node_modules/css-tree/lib/syntax/pseudo/nth-of-type.js","node_modules/css-tree/lib/syntax/pseudo/slotted.js","node_modules/css-tree/lib/syntax/pseudo/index.js","node_modules/css-tree/lib/syntax/node/AnPlusB.js","node_modules/css-tree/lib/syntax/node/Atrule.js","node_modules/css-tree/lib/syntax/node/AtruleExpression.js","node_modules/css-tree/lib/syntax/node/AttributeSelector.js","node_modules/css-tree/lib/syntax/node/Block.js","node_modules/css-tree/lib/syntax/node/Brackets.js","node_modules/css-tree/lib/syntax/node/CDC.js","node_modules/css-tree/lib/syntax/node/CDO.js","node_modules/css-tree/lib/syntax/node/ClassSelector.js","node_modules/css-tree/lib/syntax/node/Combinator.js","node_modules/css-tree/lib/syntax/node/Comment.js","node_modules/css-tree/lib/syntax/node/Declaration.js","node_modules/css-tree/lib/syntax/node/DeclarationList.js","node_modules/css-tree/lib/syntax/node/Dimension.js","node_modules/css-tree/lib/syntax/node/Function.js","node_modules/css-tree/lib/syntax/node/HexColor.js","node_modules/css-tree/lib/syntax/node/Identifier.js","node_modules/css-tree/lib/syntax/node/IdSelector.js","node_modules/css-tree/lib/syntax/node/MediaFeature.js","node_modules/css-tree/lib/syntax/node/MediaQuery.js","node_modules/css-tree/lib/syntax/node/MediaQueryList.js","node_modules/css-tree/lib/syntax/node/Nth.js","node_modules/css-tree/lib/syntax/node/Number.js","node_modules/css-tree/lib/syntax/node/Operator.js","node_modules/css-tree/lib/syntax/node/Parentheses.js","node_modules/css-tree/lib/syntax/node/Percentage.js","node_modules/css-tree/lib/syntax/node/PseudoClassSelector.js","node_modules/css-tree/lib/syntax/node/PseudoElementSelector.js","node_modules/css-tree/lib/syntax/node/Ratio.js","node_modules/css-tree/lib/syntax/node/Raw.js","node_modules/css-tree/lib/syntax/node/Rule.js","node_modules/css-tree/lib/syntax/node/Selector.js","node_modules/css-tree/lib/syntax/node/SelectorList.js","node_modules/css-tree/lib/syntax/node/String.js","node_modules/css-tree/lib/syntax/node/StyleSheet.js","node_modules/css-tree/lib/syntax/node/TypeSelector.js","node_modules/css-tree/lib/syntax/node/UnicodeRange.js","node_modules/css-tree/lib/syntax/node/Url.js","node_modules/css-tree/lib/syntax/node/Value.js","node_modules/css-tree/lib/syntax/node/WhiteSpace.js","node_modules/css-tree/lib/syntax/node/index.js","node_modules/css-tree/lib/syntax/config/parser.js","node_modules/css-tree/lib/parser/index.js","node_modules/estree-walker/src/estree-walker.js","svelte/src/parse/read/style.ts","svelte/src/parse/utils/entities.ts","svelte/src/parse/utils/html.ts","svelte/src/utils/isVoidElementName.ts","svelte/src/utils/fuzzymatch.ts","svelte/src/parse/state/tag.ts","svelte/src/parse/read/context.ts","svelte/src/utils/trim.ts","svelte/src/parse/state/mustache.ts","svelte/src/utils/reservedNames.ts","svelte/src/utils/fullCharCodeAt.ts","node_modules/locate-character/dist/locate-character.es.js","svelte/src/utils/getCodeFrame.ts","svelte/src/utils/error.ts","svelte/src/parse/index.ts"],"sourcesContent":["// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\n\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7b9\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,190,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,26,230,43,117,63,32,0,257,0,11,39,8,0,22,0,12,39,3,3,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,68,12,0,67,12,65,1,31,6129,15,754,9486,286,82,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,280,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) { return false }\n    pos += set[i + 1];\n    if (pos >= code) { return true }\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) { return code === 36 }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes)\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) { return code === 36 }\n  if (code < 58) { return true }\n  if (code < 65) { return false }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n}\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar TokenType = function TokenType(label, conf) {\n  if ( conf === void 0 ) conf = {};\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nfunction binop(name, prec) {\n  return new TokenType(name, {beforeExpr: true, binop: prec})\n}\nvar beforeExpr = {beforeExpr: true};\nvar startsExpr = {startsExpr: true};\n\n// Map keyword names to token types.\n\nvar keywords$1 = {};\n\n// Succinct definitions of keyword token types\nfunction kw(name, options) {\n  if ( options === void 0 ) options = {};\n\n  options.keyword = name;\n  return keywords$1[name] = new TokenType(name, options)\n}\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  invalidTemplate: new TokenType(\"invalidTemplate\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n  assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n  incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n  prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=/===/!==\", 6),\n  relational: binop(\"</>/<=/>=\", 7),\n  bitShift: binop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {beforeExpr: true}),\n\n  // Keyword token types.\n  _break: kw(\"break\"),\n  _case: kw(\"case\", beforeExpr),\n  _catch: kw(\"catch\"),\n  _continue: kw(\"continue\"),\n  _debugger: kw(\"debugger\"),\n  _default: kw(\"default\", beforeExpr),\n  _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n  _else: kw(\"else\", beforeExpr),\n  _finally: kw(\"finally\"),\n  _for: kw(\"for\", {isLoop: true}),\n  _function: kw(\"function\", startsExpr),\n  _if: kw(\"if\"),\n  _return: kw(\"return\", beforeExpr),\n  _switch: kw(\"switch\"),\n  _throw: kw(\"throw\", beforeExpr),\n  _try: kw(\"try\"),\n  _var: kw(\"var\"),\n  _const: kw(\"const\"),\n  _while: kw(\"while\", {isLoop: true}),\n  _with: kw(\"with\"),\n  _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n  _this: kw(\"this\", startsExpr),\n  _super: kw(\"super\", startsExpr),\n  _class: kw(\"class\", startsExpr),\n  _extends: kw(\"extends\", beforeExpr),\n  _export: kw(\"export\"),\n  _import: kw(\"import\"),\n  _null: kw(\"null\", startsExpr),\n  _true: kw(\"true\", startsExpr),\n  _false: kw(\"false\", startsExpr),\n  _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n  _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n  _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n};\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code, ecma2019String) {\n  return code === 10 || code === 13 || (!ecma2019String && (code === 0x2028 || code === 0x2029))\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nvar ref = Object.prototype;\nvar hasOwnProperty = ref.hasOwnProperty;\nvar toString = ref.toString;\n\n// Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return hasOwnProperty.call(obj, propName)\n}\n\nvar isArray = Array.isArray || (function (obj) { return (\n  toString.call(obj) === \"[object Array]\"\n); });\n\nfunction wordsRegexp(words) {\n  return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")\n}\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  this.line = line;\n  this.column = col;\n};\n\nPosition.prototype.offset = function offset (n) {\n  return new Position(this.line, this.column + n)\n};\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) { this.source = p.sourceFile; }\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur;\n    var match = lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur)\n    }\n  }\n}\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n  // either 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 10\n  // (2019). This influences support for strict mode, the set of\n  // reserved words, and support for new syntax features. The default\n  // is 9.\n  ecmaVersion: 9,\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `\"script\"` or `\"module\"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // the position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, await identifiers are allowed to appear at the top-level scope,\n  // but they are still not allowed in non-async functions.\n  allowAwaitOutsideFunction: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false\n};\n\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var opt in defaultOptions)\n    { options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n  if (options.ecmaVersion >= 2015)\n    { options.ecmaVersion -= 2009; }\n\n  if (options.allowReserved == null)\n    { options.allowReserved = options.ecmaVersion < 5; }\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken;\n    options.onToken = function (token) { return tokens.push(token); };\n  }\n  if (isArray(options.onComment))\n    { options.onComment = pushComment(options, options.onComment); }\n\n  return options\n}\n\nfunction pushComment(options, array) {\n  return function(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"Block\" : \"Line\",\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations)\n      { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n    if (options.ranges)\n      { comment.range = [start, end]; }\n    array.push(comment);\n  }\n}\n\n// Each scope gets a bitset that may contain these flags\nvar SCOPE_TOP = 1;\nvar SCOPE_FUNCTION = 2;\nvar SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION;\nvar SCOPE_ASYNC = 4;\nvar SCOPE_GENERATOR = 8;\nvar SCOPE_ARROW = 16;\nvar SCOPE_SIMPLE_CATCH = 32;\nvar SCOPE_SUPER = 64;\nvar SCOPE_DIRECT_SUPER = 128;\n\nfunction functionFlags(async, generator) {\n  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)\n}\n\n// Used in checkLVal and declareName to determine the type of a binding\nvar BIND_NONE = 0;\nvar BIND_VAR = 1;\nvar BIND_LEXICAL = 2;\nvar BIND_FUNCTION = 3;\nvar BIND_SIMPLE_CATCH = 4;\nvar BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\n\nvar Parser = function Parser(options, input, startPos) {\n  this.options = options = getOptions(options);\n  this.sourceFile = options.sourceFile;\n  this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5]);\n  var reserved = \"\";\n  if (!options.allowReserved) {\n    for (var v = options.ecmaVersion;; v--)\n      { if (reserved = reservedWords[v]) { break } }\n    if (options.sourceType === \"module\") { reserved += \" await\"; }\n  }\n  this.reservedWords = wordsRegexp(reserved);\n  var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n  this.reservedWordsStrict = wordsRegexp(reservedStrict);\n  this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n  this.input = String(input);\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  this.containsEsc = false;\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = types.eof;\n  // For tokens that include more information than their type, the value\n  this.value = null;\n  // Its start and end offset\n  this.start = this.end = this.pos;\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = this.curPosition();\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext();\n  this.exprAllowed = true;\n\n  // Figure out if it's a module code.\n  this.inModule = options.sourceType === \"module\";\n  this.strict = this.inModule || this.strictDirective(this.pos);\n\n  // Used to signify the start of a potential arrow function\n  this.potentialArrowAt = -1;\n\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n  // Labels in scope.\n  this.labels = [];\n  // Thus-far undefined exports.\n  this.undefinedExports = {};\n\n  // If enabled, skip leading hashbang line.\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n    { this.skipLineComment(2); }\n\n  // Scope tracking for duplicate variable names (see scope.js)\n  this.scopeStack = [];\n  this.enterScope(SCOPE_TOP);\n\n  // For RegExp validation\n  this.regexpState = null;\n};\n\nvar prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true } };\n\nParser.prototype.parse = function parse () {\n  var node = this.options.program || this.startNode();\n  this.nextToken();\n  return this.parseTopLevel(node)\n};\n\nprototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };\nprototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 };\nprototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 };\nprototypeAccessors.allowSuper.get = function () { return (this.currentThisScope().flags & SCOPE_SUPER) > 0 };\nprototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };\nprototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };\n\n// Switch to a getter for 7.0.0.\nParser.prototype.inNonArrowFunction = function inNonArrowFunction () { return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0 };\n\nParser.extend = function extend () {\n    var plugins = [], len = arguments.length;\n    while ( len-- ) plugins[ len ] = arguments[ len ];\n\n  var cls = this;\n  for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\n  return cls\n};\n\nParser.parse = function parse (input, options) {\n  return new this(options, input).parse()\n};\n\nParser.parseExpressionAt = function parseExpressionAt (input, pos, options) {\n  var parser = new this(options, input, pos);\n  parser.nextToken();\n  return parser.parseExpression()\n};\n\nParser.tokenizer = function tokenizer (input, options) {\n  return new this(options, input)\n};\n\nObject.defineProperties( Parser.prototype, prototypeAccessors );\n\nvar pp = Parser.prototype;\n\n// ## Parser utilities\n\nvar literal = /^(?:'((?:\\\\.|[^'])*?)'|\"((?:\\\\.|[^\"])*?)\")/;\npp.strictDirective = function(start) {\n  var this$1 = this;\n\n  for (;;) {\n    // Try to find string literal.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this$1.input)[0].length;\n    var match = literal.exec(this$1.input.slice(start));\n    if (!match) { return false }\n    if ((match[1] || match[2]) === \"use strict\") { return true }\n    start += match[0].length;\n\n    // Skip semicolon, if any.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this$1.input)[0].length;\n    if (this$1.input[start] === \";\")\n      { start++; }\n  }\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function(type) {\n  if (this.type === type) {\n    this.next();\n    return true\n  } else {\n    return false\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function(name) {\n  return this.type === types.name && this.value === name && !this.containsEsc\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function(name) {\n  if (!this.isContextual(name)) { return false }\n  this.next();\n  return true\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function(name) {\n  if (!this.eatContextual(name)) { this.unexpected(); }\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function() {\n  return this.type === types.eof ||\n    this.type === types.braceR ||\n    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\npp.insertSemicolon = function() {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon)\n      { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n    return true\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function() {\n  if (!this.eat(types.semi) && !this.insertSemicolon()) { this.unexpected(); }\n};\n\npp.afterTrailingComma = function(tokType, notNext) {\n  if (this.type === tokType) {\n    if (this.options.onTrailingComma)\n      { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n    if (!notNext)\n      { this.next(); }\n    return true\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function(type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp.unexpected = function(pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\nfunction DestructuringErrors() {\n  this.shorthandAssign =\n  this.trailingComma =\n  this.parenthesizedAssign =\n  this.parenthesizedBind =\n  this.doubleProto =\n    -1;\n}\n\npp.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n  if (!refDestructuringErrors) { return }\n  if (refDestructuringErrors.trailingComma > -1)\n    { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n  if (parens > -1) { this.raiseRecoverable(parens, \"Parenthesized pattern\"); }\n};\n\npp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n  if (!refDestructuringErrors) { return false }\n  var shorthandAssign = refDestructuringErrors.shorthandAssign;\n  var doubleProto = refDestructuringErrors.doubleProto;\n  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n  if (shorthandAssign >= 0)\n    { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n  if (doubleProto >= 0)\n    { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n};\n\npp.checkYieldAwaitInDefaultParams = function() {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n    { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n  if (this.awaitPos)\n    { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n};\n\npp.isSimpleAssignTarget = function(expr) {\n  if (expr.type === \"ParenthesizedExpression\")\n    { return this.isSimpleAssignTarget(expr.expression) }\n  return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n};\n\nvar pp$1 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$1.parseTopLevel = function(node) {\n  var this$1 = this;\n\n  var exports = {};\n  if (!node.body) { node.body = []; }\n  while (this.type !== types.eof) {\n    var stmt = this$1.parseStatement(null, true, exports);\n    node.body.push(stmt);\n  }\n  if (this.inModule)\n    { for (var i = 0, list = Object.keys(this$1.undefinedExports); i < list.length; i += 1)\n      {\n        var name = list[i];\n\n        this$1.raiseRecoverable(this$1.undefinedExports[name].start, (\"Export '\" + name + \"' is not defined\"));\n      } }\n  this.adaptDirectivePrologue(node.body);\n  this.next();\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n  return this.finishNode(node, \"Program\")\n};\n\nvar loopLabel = {kind: \"loop\"};\nvar switchLabel = {kind: \"switch\"};\n\npp$1.isLet = function(context) {\n  if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n  // For ambiguous cases, determine if a LexicalDeclaration (or only a\n  // Statement) is allowed here. If context is not empty then only a Statement\n  // is allowed. However, `let [` is an explicit negative lookahead for\n  // ExpressionStatement, so special-case it first.\n  if (nextCh === 91) { return true } // '['\n  if (context) { return false }\n\n  if (nextCh === 123) { return true } // '{'\n  if (isIdentifierStart(nextCh, true)) {\n    var pos = next + 1;\n    while (isIdentifierChar(this.input.charCodeAt(pos), true)) { ++pos; }\n    var ident = this.input.slice(next, pos);\n    if (!keywordRelationalOperator.test(ident)) { return true }\n  }\n  return false\n};\n\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$1.isAsyncFunction = function() {\n  if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n    { return false }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length;\n  return !lineBreak.test(this.input.slice(this.pos, next)) &&\n    this.input.slice(next, next + 8) === \"function\" &&\n    (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$1.parseStatement = function(context, topLevel, exports) {\n  var starttype = this.type, node = this.startNode(), kind;\n\n  if (this.isLet(context)) {\n    starttype = types._var;\n    kind = \"let\";\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n  case types._debugger: return this.parseDebuggerStatement(node)\n  case types._do: return this.parseDoStatement(node)\n  case types._for: return this.parseForStatement(node)\n  case types._function:\n    // Function as sole body of either an if statement or a labeled statement\n    // works, but not when it is part of a labeled statement that is the sole\n    // body of an if statement.\n    if ((context && (this.strict || context !== \"if\" && context !== \"label\")) && this.options.ecmaVersion >= 6) { this.unexpected(); }\n    return this.parseFunctionStatement(node, false, !context)\n  case types._class:\n    if (context) { this.unexpected(); }\n    return this.parseClass(node, true)\n  case types._if: return this.parseIfStatement(node)\n  case types._return: return this.parseReturnStatement(node)\n  case types._switch: return this.parseSwitchStatement(node)\n  case types._throw: return this.parseThrowStatement(node)\n  case types._try: return this.parseTryStatement(node)\n  case types._const: case types._var:\n    kind = kind || this.value;\n    if (context && kind !== \"var\") { this.unexpected(); }\n    return this.parseVarStatement(node, kind)\n  case types._while: return this.parseWhileStatement(node)\n  case types._with: return this.parseWithStatement(node)\n  case types.braceL: return this.parseBlock(true, node)\n  case types.semi: return this.parseEmptyStatement(node)\n  case types._export:\n  case types._import:\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n      if (!this.inModule)\n        { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n    }\n    return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n  default:\n    if (this.isAsyncFunction()) {\n      if (context) { this.unexpected(); }\n      this.next();\n      return this.parseFunctionStatement(node, true, !context)\n    }\n\n    var maybeName = this.value, expr = this.parseExpression();\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon))\n      { return this.parseLabeledStatement(node, maybeName, expr, context) }\n    else { return this.parseExpressionStatement(node, expr) }\n  }\n};\n\npp$1.parseBreakContinueStatement = function(node, keyword) {\n  var this$1 = this;\n\n  var isBreak = keyword === \"break\";\n  this.next();\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.label = null; }\n  else if (this.type !== types.name) { this.unexpected(); }\n  else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  var i = 0;\n  for (; i < this.labels.length; ++i) {\n    var lab = this$1.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n      if (node.label && isBreak) { break }\n    }\n  }\n  if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n};\n\npp$1.parseDebuggerStatement = function(node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\")\n};\n\npp$1.parseDoStatement = function(node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"do\");\n  this.labels.pop();\n  this.expect(types._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6)\n    { this.eat(types.semi); }\n  else\n    { this.semicolon(); }\n  return this.finishNode(node, \"DoWhileStatement\")\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$1.parseForStatement = function(node) {\n  this.next();\n  var awaitAt = (this.options.ecmaVersion >= 9 && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction)) && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n  this.labels.push(loopLabel);\n  this.enterScope(0);\n  this.expect(types.parenL);\n  if (this.type === types.semi) {\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, null)\n  }\n  var isLet = this.isLet();\n  if (this.type === types._var || this.type === types._const || isLet) {\n    var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(init$1, true, kind);\n    this.finishNode(init$1, \"VariableDeclaration\");\n    if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1 &&\n        !(kind !== \"var\" && init$1.declarations[0].init)) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      return this.parseForIn(node, init$1)\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init$1)\n  }\n  var refDestructuringErrors = new DestructuringErrors;\n  var init = this.parseExpression(true, refDestructuringErrors);\n  if (this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n    if (this.options.ecmaVersion >= 9) {\n      if (this.type === types._in) {\n        if (awaitAt > -1) { this.unexpected(awaitAt); }\n      } else { node.await = awaitAt > -1; }\n    }\n    this.toAssignable(init, false, refDestructuringErrors);\n    this.checkLVal(init);\n    return this.parseForIn(node, init)\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  if (awaitAt > -1) { this.unexpected(awaitAt); }\n  return this.parseFor(node, init)\n};\n\npp$1.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n  this.next();\n  return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)\n};\n\npp$1.parseIfStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  // allow function declarations in branches, but only in non-strict mode\n  node.consequent = this.parseStatement(\"if\");\n  node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n  return this.finishNode(node, \"IfStatement\")\n};\n\npp$1.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    { this.raise(this.start, \"'return' outside of function\"); }\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.argument = null; }\n  else { node.argument = this.parseExpression(); this.semicolon(); }\n  return this.finishNode(node, \"ReturnStatement\")\n};\n\npp$1.parseSwitchStatement = function(node) {\n  var this$1 = this;\n\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types.braceL);\n  this.labels.push(switchLabel);\n  this.enterScope(0);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur;\n  for (var sawDefault = false; this.type !== types.braceR;) {\n    if (this$1.type === types._case || this$1.type === types._default) {\n      var isCase = this$1.type === types._case;\n      if (cur) { this$1.finishNode(cur, \"SwitchCase\"); }\n      node.cases.push(cur = this$1.startNode());\n      cur.consequent = [];\n      this$1.next();\n      if (isCase) {\n        cur.test = this$1.parseExpression();\n      } else {\n        if (sawDefault) { this$1.raiseRecoverable(this$1.lastTokStart, \"Multiple default clauses\"); }\n        sawDefault = true;\n        cur.test = null;\n      }\n      this$1.expect(types.colon);\n    } else {\n      if (!cur) { this$1.unexpected(); }\n      cur.consequent.push(this$1.parseStatement(null));\n    }\n  }\n  this.exitScope();\n  if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\")\n};\n\npp$1.parseThrowStatement = function(node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n    { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\")\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp$1.parseTryStatement = function(node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === types._catch) {\n    var clause = this.startNode();\n    this.next();\n    if (this.eat(types.parenL)) {\n      clause.param = this.parseBindingAtom();\n      var simple = clause.param.type === \"Identifier\";\n      this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n      this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n      this.expect(types.parenR);\n    } else {\n      if (this.options.ecmaVersion < 10) { this.unexpected(); }\n      clause.param = null;\n      this.enterScope(0);\n    }\n    clause.body = this.parseBlock(false);\n    this.exitScope();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer)\n    { this.raise(node.start, \"Missing catch or finally clause\"); }\n  return this.finishNode(node, \"TryStatement\")\n};\n\npp$1.parseVarStatement = function(node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\")\n};\n\npp$1.parseWhileStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"while\");\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\")\n};\n\npp$1.parseWithStatement = function(node) {\n  if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(\"with\");\n  return this.finishNode(node, \"WithStatement\")\n};\n\npp$1.parseEmptyStatement = function(node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\")\n};\n\npp$1.parseLabeledStatement = function(node, maybeName, expr, context) {\n  var this$1 = this;\n\n  for (var i$1 = 0, list = this$1.labels; i$1 < list.length; i$1 += 1)\n    {\n    var label = list[i$1];\n\n    if (label.name === maybeName)\n      { this$1.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  } }\n  var kind = this.type.isLoop ? \"loop\" : this.type === types._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label$1 = this$1.labels[i];\n    if (label$1.statementStart === node.start) {\n      // Update information about previous labels on this node\n      label$1.statementStart = this$1.start;\n      label$1.kind = kind;\n    } else { break }\n  }\n  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n  node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\")\n};\n\npp$1.parseExpressionStatement = function(node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\")\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$1.parseBlock = function(createNewLexicalScope, node) {\n  var this$1 = this;\n  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n  if ( node === void 0 ) node = this.startNode();\n\n  node.body = [];\n  this.expect(types.braceL);\n  if (createNewLexicalScope) { this.enterScope(0); }\n  while (!this.eat(types.braceR)) {\n    var stmt = this$1.parseStatement(null);\n    node.body.push(stmt);\n  }\n  if (createNewLexicalScope) { this.exitScope(); }\n  return this.finishNode(node, \"BlockStatement\")\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$1.parseFor = function(node, init) {\n  node.init = init;\n  this.expect(types.semi);\n  node.test = this.type === types.semi ? null : this.parseExpression();\n  this.expect(types.semi);\n  node.update = this.type === types.parenR ? null : this.parseExpression();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\")\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$1.parseForIn = function(node, init) {\n  var type = this.type === types._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n  if (type === \"ForInStatement\") {\n    if (init.type === \"AssignmentPattern\" ||\n      (init.type === \"VariableDeclaration\" && init.declarations[0].init != null &&\n       (this.strict || init.declarations[0].id.type !== \"Identifier\")))\n      { this.raise(init.start, \"Invalid assignment in for-in loop head\"); }\n  }\n  node.left = init;\n  node.right = type === \"ForInStatement\" ? this.parseExpression() : this.parseMaybeAssign();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, type)\n};\n\n// Parse a list of variable declarations.\n\npp$1.parseVar = function(node, isFor, kind) {\n  var this$1 = this;\n\n  node.declarations = [];\n  node.kind = kind;\n  for (;;) {\n    var decl = this$1.startNode();\n    this$1.parseVarId(decl, kind);\n    if (this$1.eat(types.eq)) {\n      decl.init = this$1.parseMaybeAssign(isFor);\n    } else if (kind === \"const\" && !(this$1.type === types._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual(\"of\")))) {\n      this$1.unexpected();\n    } else if (decl.id.type !== \"Identifier\" && !(isFor && (this$1.type === types._in || this$1.isContextual(\"of\")))) {\n      this$1.raise(this$1.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"));\n    if (!this$1.eat(types.comma)) { break }\n  }\n  return node\n};\n\npp$1.parseVarId = function(decl, kind) {\n  if ((kind === \"const\" || kind === \"let\") && this.isContextual(\"let\")) {\n    this.raiseRecoverable(this.start, \"let is disallowed as a lexically bound name\");\n  }\n  decl.id = this.parseBindingAtom();\n  this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n};\n\nvar FUNC_STATEMENT = 1;\nvar FUNC_HANGING_STATEMENT = 2;\nvar FUNC_NULLABLE_ID = 4;\n\n// Parse a function declaration or literal (depending on the\n// `statement & FUNC_STATEMENT`).\n\n// Remove `allowExpressionBody` for 7.0.0, as it is only called with false\npp$1.parseFunction = function(node, statement, allowExpressionBody, isAsync) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n    if (this.type === types.star && (statement & FUNC_HANGING_STATEMENT))\n      { this.unexpected(); }\n    node.generator = this.eat(types.star);\n  }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  if (statement & FUNC_STATEMENT) {\n    node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types.name ? null : this.parseIdent();\n    if (node.id && !(statement & FUNC_HANGING_STATEMENT))\n      // If it is a regular function declaration in sloppy mode, then it is\n      // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n      // mode depends on properties of the current scope (see\n      // treatFunctionsAsVar).\n      { this.checkLVal(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }\n  }\n\n  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(node.async, node.generator));\n\n  if (!(statement & FUNC_STATEMENT))\n    { node.id = this.type === types.name ? this.parseIdent() : null; }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody, false);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, (statement & FUNC_STATEMENT) ? \"FunctionDeclaration\" : \"FunctionExpression\")\n};\n\npp$1.parseFunctionParams = function(node) {\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseClass = function(node, isStatement) {\n  var this$1 = this;\n\n  this.next();\n\n  // ecma-262 14.6 Class Definitions\n  // A class definition is always strict mode code.\n  var oldStrict = this.strict;\n  this.strict = true;\n\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    var element = this$1.parseClassElement(node.superClass !== null);\n    if (element) {\n      classBody.body.push(element);\n      if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n        if (hadConstructor) { this$1.raise(element.start, \"Duplicate constructor in the same class\"); }\n        hadConstructor = true;\n      }\n    }\n  }\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  this.strict = oldStrict;\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n};\n\npp$1.parseClassElement = function(constructorAllowsSuper) {\n  var this$1 = this;\n\n  if (this.eat(types.semi)) { return null }\n\n  var method = this.startNode();\n  var tryContextual = function (k, noLineBreak) {\n    if ( noLineBreak === void 0 ) noLineBreak = false;\n\n    var start = this$1.start, startLoc = this$1.startLoc;\n    if (!this$1.eatContextual(k)) { return false }\n    if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) { return true }\n    if (method.key) { this$1.unexpected(); }\n    method.computed = false;\n    method.key = this$1.startNodeAt(start, startLoc);\n    method.key.name = k;\n    this$1.finishNode(method.key, \"Identifier\");\n    return false\n  };\n\n  method.kind = \"method\";\n  method.static = tryContextual(\"static\");\n  var isGenerator = this.eat(types.star);\n  var isAsync = false;\n  if (!isGenerator) {\n    if (this.options.ecmaVersion >= 8 && tryContextual(\"async\", true)) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    } else if (tryContextual(\"get\")) {\n      method.kind = \"get\";\n    } else if (tryContextual(\"set\")) {\n      method.kind = \"set\";\n    }\n  }\n  if (!method.key) { this.parsePropertyName(method); }\n  var key = method.key;\n  var allowsDirectSuper = false;\n  if (!method.computed && !method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n      key.type === \"Literal\" && key.value === \"constructor\")) {\n    if (method.kind !== \"method\") { this.raise(key.start, \"Constructor can't have get/set modifier\"); }\n    if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n    if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n    method.kind = \"constructor\";\n    allowsDirectSuper = constructorAllowsSuper;\n  } else if (method.static && key.type === \"Identifier\" && key.name === \"prototype\") {\n    this.raise(key.start, \"Classes may not have a static property named prototype\");\n  }\n  this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);\n  if (method.kind === \"get\" && method.value.params.length !== 0)\n    { this.raiseRecoverable(method.value.start, \"getter should have no params\"); }\n  if (method.kind === \"set\" && method.value.params.length !== 1)\n    { this.raiseRecoverable(method.value.start, \"setter should have exactly one param\"); }\n  if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n    { this.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\"); }\n  return method\n};\n\npp$1.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n  method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n  return this.finishNode(method, \"MethodDefinition\")\n};\n\npp$1.parseClassId = function(node, isStatement) {\n  if (this.type === types.name) {\n    node.id = this.parseIdent();\n    if (isStatement)\n      { this.checkLVal(node.id, BIND_LEXICAL, false); }\n  } else {\n    if (isStatement === true)\n      { this.unexpected(); }\n    node.id = null;\n  }\n};\n\npp$1.parseClassSuper = function(node) {\n  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp$1.parseExport = function(node, exports) {\n  var this$1 = this;\n\n  this.next();\n  // export * from '...'\n  if (this.eat(types.star)) {\n    this.expectContextual(\"from\");\n    if (this.type !== types.string) { this.unexpected(); }\n    node.source = this.parseExprAtom();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(types._default)) { // export default ...\n    this.checkExport(exports, \"default\", this.lastTokStart);\n    var isAsync;\n    if (this.type === types._function || (isAsync = this.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n      if (isAsync) { this.next(); }\n      node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);\n    } else if (this.type === types._class) {\n      var cNode = this.startNode();\n      node.declaration = this.parseClass(cNode, \"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(null);\n    if (node.declaration.type === \"VariableDeclaration\")\n      { this.checkVariableExport(exports, node.declaration.declarations); }\n    else\n      { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }\n    node.specifiers = [];\n    node.source = null;\n  } else { // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers(exports);\n    if (this.eatContextual(\"from\")) {\n      if (this.type !== types.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n    } else {\n      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n        // check for keywords used as local names\n        var spec = list[i];\n\n        this$1.checkUnreserved(spec.local);\n        // check if export is defined\n        this$1.checkLocalExport(spec.local);\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n};\n\npp$1.checkExport = function(exports, name, pos) {\n  if (!exports) { return }\n  if (has(exports, name))\n    { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n  exports[name] = true;\n};\n\npp$1.checkPatternExport = function(exports, pat) {\n  var this$1 = this;\n\n  var type = pat.type;\n  if (type === \"Identifier\")\n    { this.checkExport(exports, pat.name, pat.start); }\n  else if (type === \"ObjectPattern\")\n    { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n      {\n        var prop = list[i];\n\n        this$1.checkPatternExport(exports, prop);\n      } }\n  else if (type === \"ArrayPattern\")\n    { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n      var elt = list$1[i$1];\n\n        if (elt) { this$1.checkPatternExport(exports, elt); }\n    } }\n  else if (type === \"Property\")\n    { this.checkPatternExport(exports, pat.value); }\n  else if (type === \"AssignmentPattern\")\n    { this.checkPatternExport(exports, pat.left); }\n  else if (type === \"RestElement\")\n    { this.checkPatternExport(exports, pat.argument); }\n  else if (type === \"ParenthesizedExpression\")\n    { this.checkPatternExport(exports, pat.expression); }\n};\n\npp$1.checkVariableExport = function(exports, decls) {\n  var this$1 = this;\n\n  if (!exports) { return }\n  for (var i = 0, list = decls; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    this$1.checkPatternExport(exports, decl.id);\n  }\n};\n\npp$1.shouldParseExportStatement = function() {\n  return this.type.keyword === \"var\" ||\n    this.type.keyword === \"const\" ||\n    this.type.keyword === \"class\" ||\n    this.type.keyword === \"function\" ||\n    this.isLet() ||\n    this.isAsyncFunction()\n};\n\n// Parses a comma-separated list of module exports.\n\npp$1.parseExportSpecifiers = function(exports) {\n  var this$1 = this;\n\n  var nodes = [], first = true;\n  // export { x, y as z } [from '...']\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node = this$1.startNode();\n    node.local = this$1.parseIdent(true);\n    node.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent(true) : node.local;\n    this$1.checkExport(exports, node.exported.name, node.exported.start);\n    nodes.push(this$1.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes\n};\n\n// Parses import declaration.\n\npp$1.parseImport = function(node) {\n  this.next();\n  // import '...'\n  if (this.type === types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\")\n};\n\n// Parses a comma-separated list of module imports.\n\npp$1.parseImportSpecifiers = function() {\n  var this$1 = this;\n\n  var nodes = [], first = true;\n  if (this.type === types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(types.comma)) { return nodes }\n  }\n  if (this.type === types.star) {\n    var node$1 = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node$1.local = this.parseIdent();\n    this.checkLVal(node$1.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n    return nodes\n  }\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node$2 = this$1.startNode();\n    node$2.imported = this$1.parseIdent(true);\n    if (this$1.eatContextual(\"as\")) {\n      node$2.local = this$1.parseIdent();\n    } else {\n      this$1.checkUnreserved(node$2.imported);\n      node$2.local = node$2.imported;\n    }\n    this$1.checkLVal(node$2.local, BIND_LEXICAL);\n    nodes.push(this$1.finishNode(node$2, \"ImportSpecifier\"));\n  }\n  return nodes\n};\n\n// Set `ExpressionStatement#directive` property for directive prologues.\npp$1.adaptDirectivePrologue = function(statements) {\n  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n    statements[i].directive = statements[i].expression.raw.slice(1, -1);\n  }\n};\npp$1.isDirectiveCandidate = function(statement) {\n  return (\n    statement.type === \"ExpressionStatement\" &&\n    statement.expression.type === \"Literal\" &&\n    typeof statement.expression.value === \"string\" &&\n    // Reject parenthesized strings.\n    (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n  )\n};\n\nvar pp$2 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {\n  var this$1 = this;\n\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n    case \"Identifier\":\n      if (this.inAsync && node.name === \"await\")\n        { this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\"); }\n      break\n\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n    case \"RestElement\":\n      break\n\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      for (var i = 0, list = node.properties; i < list.length; i += 1) {\n        var prop = list[i];\n\n      this$1.toAssignable(prop, isBinding);\n        // Early error:\n        //   AssignmentRestProperty[Yield, Await] :\n        //     `...` DestructuringAssignmentTarget[Yield, Await]\n        //\n        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n        if (\n          prop.type === \"RestElement\" &&\n          (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n        ) {\n          this$1.raise(prop.argument.start, \"Unexpected token\");\n        }\n      }\n      break\n\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n      this.toAssignable(node.value, isBinding);\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      this.toAssignableList(node.elements, isBinding);\n      break\n\n    case \"SpreadElement\":\n      node.type = \"RestElement\";\n      this.toAssignable(node.argument, isBinding);\n      if (node.argument.type === \"AssignmentPattern\")\n        { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n      break\n\n    case \"AssignmentExpression\":\n      if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n      node.type = \"AssignmentPattern\";\n      delete node.operator;\n      this.toAssignable(node.left, isBinding);\n      // falls through to AssignmentPattern\n\n    case \"AssignmentPattern\":\n      break\n\n    case \"ParenthesizedExpression\":\n      this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n      break\n\n    case \"MemberExpression\":\n      if (!isBinding) { break }\n\n    default:\n      this.raise(node.start, \"Assigning to rvalue\");\n    }\n  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n  return node\n};\n\n// Convert list of expression atoms to binding list.\n\npp$2.toAssignableList = function(exprList, isBinding) {\n  var this$1 = this;\n\n  var end = exprList.length;\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) { this$1.toAssignable(elt, isBinding); }\n  }\n  if (end) {\n    var last = exprList[end - 1];\n    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n      { this.unexpected(last.argument.start); }\n  }\n  return exprList\n};\n\n// Parses spread element.\n\npp$2.parseSpread = function(refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\")\n};\n\npp$2.parseRestBinding = function() {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (this.options.ecmaVersion === 6 && this.type !== types.name)\n    { this.unexpected(); }\n\n  node.argument = this.parseBindingAtom();\n\n  return this.finishNode(node, \"RestElement\")\n};\n\n// Parses lvalue (assignable) atom.\n\npp$2.parseBindingAtom = function() {\n  if (this.options.ecmaVersion >= 6) {\n    switch (this.type) {\n    case types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(types.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case types.braceL:\n      return this.parseObj(true)\n    }\n  }\n  return this.parseIdent()\n};\n\npp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n  var this$1 = this;\n\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (first) { first = false; }\n    else { this$1.expect(types.comma); }\n    if (allowEmpty && this$1.type === types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {\n      break\n    } else if (this$1.type === types.ellipsis) {\n      var rest = this$1.parseRestBinding();\n      this$1.parseBindingListItem(rest);\n      elts.push(rest);\n      if (this$1.type === types.comma) { this$1.raise(this$1.start, \"Comma is not permitted after the rest element\"); }\n      this$1.expect(close);\n      break\n    } else {\n      var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc);\n      this$1.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts\n};\n\npp$2.parseBindingListItem = function(param) {\n  return param\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) { return left }\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\")\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n// bindingType can be either:\n// 'var' indicating that the lval creates a 'var' binding\n// 'let' indicating that the lval creates a lexical ('let' or 'const') binding\n// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references\n\npp$2.checkLVal = function(expr, bindingType, checkClashes) {\n  var this$1 = this;\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  switch (expr.type) {\n  case \"Identifier\":\n    if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n      { this.raiseRecoverable(expr.start, (bindingType ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n    if (checkClashes) {\n      if (has(checkClashes, expr.name))\n        { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n      checkClashes[expr.name] = true;\n    }\n    if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }\n    break\n\n  case \"MemberExpression\":\n    if (bindingType) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n    break\n\n  case \"ObjectPattern\":\n    for (var i = 0, list = expr.properties; i < list.length; i += 1)\n      {\n    var prop = list[i];\n\n    this$1.checkLVal(prop, bindingType, checkClashes);\n  }\n    break\n\n  case \"Property\":\n    // AssignmentProperty has type === \"Property\"\n    this.checkLVal(expr.value, bindingType, checkClashes);\n    break\n\n  case \"ArrayPattern\":\n    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n      var elem = list$1[i$1];\n\n    if (elem) { this$1.checkLVal(elem, bindingType, checkClashes); }\n    }\n    break\n\n  case \"AssignmentPattern\":\n    this.checkLVal(expr.left, bindingType, checkClashes);\n    break\n\n  case \"RestElement\":\n    this.checkLVal(expr.argument, bindingType, checkClashes);\n    break\n\n  case \"ParenthesizedExpression\":\n    this.checkLVal(expr.expression, bindingType, checkClashes);\n    break\n\n  default:\n    this.raise(expr.start, (bindingType ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nvar pp$3 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n    { return }\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n    { return }\n  var key = prop.key;\n  var name;\n  switch (key.type) {\n  case \"Identifier\": name = key.name; break\n  case \"Literal\": name = String(key.value); break\n  default: return\n  }\n  var kind = prop.kind;\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) {\n        if (refDestructuringErrors && refDestructuringErrors.doubleProto < 0) { refDestructuringErrors.doubleProto = key.start; }\n        // Backwards-compat kludge. Can be removed in version 6.0\n        else { this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\"); }\n      }\n      propHash.proto = true;\n    }\n    return\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var redefinition;\n    if (kind === \"init\") {\n      redefinition = this.strict && other.init || other.get || other.set;\n    } else {\n      redefinition = other.init || other[kind];\n    }\n    if (redefinition)\n      { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$3.parseExpression = function(noIn, refDestructuringErrors) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n  if (this.type === types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(types.comma)) { node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors)); }\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.isContextual(\"yield\")) {\n    if (this.inGenerator) { return this.parseYield(noIn) }\n    // The tokenizer will assume an expression is allowed after\n    // `yield`, but this isn't that kind of yield\n    else { this.exprAllowed = false; }\n  }\n\n  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldShorthandAssign = -1;\n  if (refDestructuringErrors) {\n    oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n    oldTrailingComma = refDestructuringErrors.trailingComma;\n    oldShorthandAssign = refDestructuringErrors.shorthandAssign;\n    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.shorthandAssign = -1;\n  } else {\n    refDestructuringErrors = new DestructuringErrors;\n    ownDestructuringErrors = true;\n  }\n\n  var startPos = this.start, startLoc = this.startLoc;\n  if (this.type === types.parenL || this.type === types.name)\n    { this.potentialArrowAt = this.start; }\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n  if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n  if (this.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;\n    if (!ownDestructuringErrors) { DestructuringErrors.call(refDestructuringErrors); }\n    refDestructuringErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n    this.checkLVal(left);\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\")\n  } else {\n    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n  }\n  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n  if (oldShorthandAssign > -1) { refDestructuringErrors.shorthandAssign = oldShorthandAssign; }\n  return left\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  if (this.eat(types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n};\n\n// Start the precedence parser.\n\npp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n  if (prec != null && (!noIn || this.type !== types._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === types.logicalOR || this.type === types.logicalAND;\n      var op = this.value;\n      this.next();\n      var startPos = this.start, startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n    }\n  }\n  return left\n};\n\npp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc, expr;\n  if (this.isContextual(\"await\") && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction))) {\n    expr = this.parseAwait();\n    sawUnary = true;\n  } else if (this.type.prefix) {\n    var node = this.startNode(), update = this.type === types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) { this.checkLVal(node.argument); }\n    else if (this.strict && node.operator === \"delete\" &&\n             node.argument.type === \"Identifier\")\n      { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n    else { sawUnary = true; }\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this$1.startNodeAt(startPos, startLoc);\n      node$1.operator = this$1.value;\n      node$1.prefix = false;\n      node$1.argument = expr;\n      this$1.checkLVal(expr);\n      this$1.next();\n      expr = this$1.finishNode(node$1, \"UpdateExpression\");\n    }\n  }\n\n  if (!sawUnary && this.eat(types.starstar))\n    { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false) }\n  else\n    { return expr }\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$3.parseExprSubscripts = function(refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\";\n  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) { return expr }\n  var result = this.parseSubscripts(expr, startPos, startLoc);\n  if (refDestructuringErrors && result.type === \"MemberExpression\") {\n    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n  }\n  return result\n};\n\npp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n  var this$1 = this;\n\n  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n      this.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === \"async\";\n  while (true) {\n    var element = this$1.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow);\n    if (element === base || element.type === \"ArrowFunctionExpression\") { return element }\n    base = element;\n  }\n};\n\npp$3.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow) {\n  var computed = this.eat(types.bracketL);\n  if (computed || this.eat(types.dot)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.property = computed ? this.parseExpression() : this.parseIdent(true);\n    node.computed = !!computed;\n    if (computed) { this.expect(types.bracketR); }\n    base = this.finishNode(node, \"MemberExpression\");\n  } else if (!noCalls && this.eat(types.parenL)) {\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\n    if (maybeAsyncArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      if (this.awaitIdentPos > 0)\n        { this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\"); }\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      this.awaitIdentPos = oldAwaitIdentPos;\n      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true)\n    }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n    var node$1 = this.startNodeAt(startPos, startLoc);\n    node$1.callee = base;\n    node$1.arguments = exprList;\n    base = this.finishNode(node$1, \"CallExpression\");\n  } else if (this.type === types.backQuote) {\n    var node$2 = this.startNodeAt(startPos, startLoc);\n    node$2.tag = base;\n    node$2.quasi = this.parseTemplate({isTagged: true});\n    base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n  }\n  return base\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$3.parseExprAtom = function(refDestructuringErrors) {\n  // If a division operator appears in an expression position, the\n  // tokenizer got confused, and we force it to read a regexp instead.\n  if (this.type === types.slash) { this.readRegexp(); }\n\n  var node, canBeArrow = this.potentialArrowAt === this.start;\n  switch (this.type) {\n  case types._super:\n    if (!this.allowSuper)\n      { this.raise(this.start, \"'super' keyword outside a method\"); }\n    node = this.startNode();\n    this.next();\n    if (this.type === types.parenL && !this.allowDirectSuper)\n      { this.raise(node.start, \"super() call outside constructor of a subclass\"); }\n    // The `super` keyword can appear at below:\n    // SuperProperty:\n    //     super [ Expression ]\n    //     super . IdentifierName\n    // SuperCall:\n    //     super Arguments\n    if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL)\n      { this.unexpected(); }\n    return this.finishNode(node, \"Super\")\n\n  case types._this:\n    node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"ThisExpression\")\n\n  case types.name:\n    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n    var id = this.parseIdent(false);\n    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function))\n      { return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true) }\n    if (canBeArrow && !this.canInsertSemicolon()) {\n      if (this.eat(types.arrow))\n        { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) }\n      if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types.name && !containsEsc) {\n        id = this.parseIdent(false);\n        if (this.canInsertSemicolon() || !this.eat(types.arrow))\n          { this.unexpected(); }\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)\n      }\n    }\n    return id\n\n  case types.regexp:\n    var value = this.value;\n    node = this.parseLiteral(value.value);\n    node.regex = {pattern: value.pattern, flags: value.flags};\n    return node\n\n  case types.num: case types.string:\n    return this.parseLiteral(this.value)\n\n  case types._null: case types._true: case types._false:\n    node = this.startNode();\n    node.value = this.type === types._null ? null : this.type === types._true;\n    node.raw = this.type.keyword;\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case types.parenL:\n    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);\n    if (refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n        { refDestructuringErrors.parenthesizedAssign = start; }\n      if (refDestructuringErrors.parenthesizedBind < 0)\n        { refDestructuringErrors.parenthesizedBind = start; }\n    }\n    return expr\n\n  case types.bracketL:\n    node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case types.braceL:\n    return this.parseObj(false, refDestructuringErrors)\n\n  case types._function:\n    node = this.startNode();\n    this.next();\n    return this.parseFunction(node, 0)\n\n  case types._class:\n    return this.parseClass(this.startNode(), false)\n\n  case types._new:\n    return this.parseNew()\n\n  case types.backQuote:\n    return this.parseTemplate()\n\n  default:\n    this.unexpected();\n  }\n};\n\npp$3.parseLiteral = function(value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  this.next();\n  return this.finishNode(node, \"Literal\")\n};\n\npp$3.parseParenExpression = function() {\n  this.expect(types.parenL);\n  var val = this.parseExpression();\n  this.expect(types.parenR);\n  return val\n};\n\npp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    var innerStartPos = this.start, innerStartLoc = this.startLoc;\n    var exprList = [], first = true, lastIsComma = false;\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    // Do not save awaitIdentPos to allow checking awaits nested in parameters\n    while (this.type !== types.parenR) {\n      first ? first = false : this$1.expect(types.comma);\n      if (allowTrailingComma && this$1.afterTrailingComma(types.parenR, true)) {\n        lastIsComma = true;\n        break\n      } else if (this$1.type === types.ellipsis) {\n        spreadStart = this$1.start;\n        exprList.push(this$1.parseParenItem(this$1.parseRestBinding()));\n        if (this$1.type === types.comma) { this$1.raise(this$1.start, \"Comma is not permitted after the rest element\"); }\n        break\n      } else {\n        exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem));\n      }\n    }\n    var innerEndPos = this.start, innerEndLoc = this.startLoc;\n    this.expect(types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      return this.parseParenArrowList(startPos, startLoc, exprList)\n    }\n\n    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n    if (spreadStart) { this.unexpected(spreadStart); }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\")\n  } else {\n    return val\n  }\n};\n\npp$3.parseParenItem = function(item) {\n  return item\n};\n\npp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty$1 = [];\n\npp$3.parseNew = function() {\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {\n    node.meta = meta;\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\" || containsEsc)\n      { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\"); }\n    if (!this.inNonArrowFunction())\n      { this.raiseRecoverable(node.start, \"new.target can only be used in functions\"); }\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var startPos = this.start, startLoc = this.startLoc;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  if (this.eat(types.parenL)) { node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false); }\n  else { node.arguments = empty$1; }\n  return this.finishNode(node, \"NewExpression\")\n};\n\n// Parse template expression.\n\npp$3.parseTemplateElement = function(ref) {\n  var isTagged = ref.isTagged;\n\n  var elem = this.startNode();\n  if (this.type === types.invalidTemplate) {\n    if (!isTagged) {\n      this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n    }\n    elem.value = {\n      raw: this.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.value\n    };\n  }\n  this.next();\n  elem.tail = this.type === types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\")\n};\n\npp$3.parseTemplate = function(ref) {\n  var this$1 = this;\n  if ( ref === void 0 ) ref = {};\n  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement({isTagged: isTagged});\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    if (this$1.type === types.eof) { this$1.raise(this$1.pos, \"Unterminated template literal\"); }\n    this$1.expect(types.dollarBraceL);\n    node.expressions.push(this$1.parseExpression());\n    this$1.expect(types.braceR);\n    node.quasis.push(curElt = this$1.parseTemplateElement({isTagged: isTagged}));\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\")\n};\n\npp$3.isAsyncProp = function(prop) {\n  return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n    (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&\n    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\n// Parse an object literal or binding pattern.\n\npp$3.parseObj = function(isPattern, refDestructuringErrors) {\n  var this$1 = this;\n\n  var node = this.startNode(), first = true, propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var prop = this$1.parseProperty(isPattern, refDestructuringErrors);\n    if (!isPattern) { this$1.checkPropClash(prop, propHash, refDestructuringErrors); }\n    node.properties.push(prop);\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n};\n\npp$3.parseProperty = function(isPattern, refDestructuringErrors) {\n  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n  if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {\n    if (isPattern) {\n      prop.argument = this.parseIdent(false);\n      if (this.type === types.comma) {\n        this.raise(this.start, \"Comma is not permitted after the rest element\");\n      }\n      return this.finishNode(prop, \"RestElement\")\n    }\n    // To disallow parenthesized identifier via `this.toAssignable()`.\n    if (this.type === types.parenL && refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0) {\n        refDestructuringErrors.parenthesizedAssign = this.start;\n      }\n      if (refDestructuringErrors.parenthesizedBind < 0) {\n        refDestructuringErrors.parenthesizedBind = this.start;\n      }\n    }\n    // Parse argument.\n    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    // To disallow trailing comma via `this.toAssignable()`.\n    if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n      refDestructuringErrors.trailingComma = this.start;\n    }\n    // Finish\n    return this.finishNode(prop, \"SpreadElement\")\n  }\n  if (this.options.ecmaVersion >= 6) {\n    prop.method = false;\n    prop.shorthand = false;\n    if (isPattern || refDestructuringErrors) {\n      startPos = this.start;\n      startLoc = this.startLoc;\n    }\n    if (!isPattern)\n      { isGenerator = this.eat(types.star); }\n  }\n  var containsEsc = this.containsEsc;\n  this.parsePropertyName(prop);\n  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n    isAsync = true;\n    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    this.parsePropertyName(prop, refDestructuringErrors);\n  } else {\n    isAsync = false;\n  }\n  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n  return this.finishNode(prop, \"Property\")\n};\n\npp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n  if ((isGenerator || isAsync) && this.type === types.colon)\n    { this.unexpected(); }\n\n  if (this.eat(types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {\n    if (isPattern) { this.unexpected(); }\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator, isAsync);\n  } else if (!isPattern && !containsEsc &&\n             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n             (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n             (this.type !== types.comma && this.type !== types.braceR)) {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\")\n        { this.raiseRecoverable(start, \"getter should have no params\"); }\n      else\n        { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n    }\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    this.checkUnreserved(prop.key);\n    if (prop.key.name === \"await\" && !this.awaitIdentPos)\n      { this.awaitIdentPos = startPos; }\n    prop.kind = \"init\";\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else if (this.type === types.eq && refDestructuringErrors) {\n      if (refDestructuringErrors.shorthandAssign < 0)\n        { refDestructuringErrors.shorthandAssign = this.start; }\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else {\n      prop.value = prop.key;\n    }\n    prop.shorthand = true;\n  } else { this.unexpected(); }\n};\n\npp$3.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n      return prop.key\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(true)\n};\n\n// Initialize empty function node.\n\npp$3.initFunction = function(node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }\n  if (this.options.ecmaVersion >= 8) { node.async = false; }\n};\n\n// Parse object or class method.\n\npp$3.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n  var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6)\n    { node.generator = isGenerator; }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n  this.parseFunctionBody(node, false, true);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"FunctionExpression\")\n};\n\n// Parse arrow function expression with given parameters.\n\npp$3.parseArrowExpression = function(node, params, isAsync) {\n  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true, false);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n};\n\n// Parse function body and check parameters.\n\npp$3.parseFunctionBody = function(node, isArrowFunction, isMethod) {\n  var isExpression = isArrowFunction && this.type !== types.braceL;\n  var oldStrict = this.strict, useStrict = false;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n    this.checkParams(node, false);\n  } else {\n    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n    if (!oldStrict || nonSimple) {\n      useStrict = this.strictDirective(this.end);\n      // If this is a strict mode function, verify that argument names\n      // are not repeated, and it does not try to bind the words `eval`\n      // or `arguments`.\n      if (useStrict && nonSimple)\n        { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n    }\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldLabels = this.labels;\n    this.labels = [];\n    if (useStrict) { this.strict = true; }\n\n    // Add the params to varDeclaredNames to ensure that an error is thrown\n    // if a let/const declaration in the function clashes with one of the params.\n    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n    node.body = this.parseBlock(false);\n    node.expression = false;\n    this.adaptDirectivePrologue(node.body.body);\n    this.labels = oldLabels;\n  }\n  this.exitScope();\n\n  // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n  if (this.strict && node.id) { this.checkLVal(node.id, BIND_OUTSIDE); }\n  this.strict = oldStrict;\n};\n\npp$3.isSimpleParamList = function(params) {\n  for (var i = 0, list = params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    if (param.type !== \"Identifier\") { return false\n  } }\n  return true\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp$3.checkParams = function(node, allowDuplicates) {\n  var this$1 = this;\n\n  var nameHash = {};\n  for (var i = 0, list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    this$1.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var this$1 = this;\n\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (allowTrailingComma && this$1.afterTrailingComma(close)) { break }\n    } else { first = false; }\n\n    var elt = (void 0);\n    if (allowEmpty && this$1.type === types.comma)\n      { elt = null; }\n    else if (this$1.type === types.ellipsis) {\n      elt = this$1.parseSpread(refDestructuringErrors);\n      if (refDestructuringErrors && this$1.type === types.comma && refDestructuringErrors.trailingComma < 0)\n        { refDestructuringErrors.trailingComma = this$1.start; }\n    } else {\n      elt = this$1.parseMaybeAssign(false, refDestructuringErrors);\n    }\n    elts.push(elt);\n  }\n  return elts\n};\n\npp$3.checkUnreserved = function(ref) {\n  var start = ref.start;\n  var end = ref.end;\n  var name = ref.name;\n\n  if (this.inGenerator && name === \"yield\")\n    { this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\"); }\n  if (this.inAsync && name === \"await\")\n    { this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\"); }\n  if (this.keywords.test(name))\n    { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n  if (this.options.ecmaVersion < 6 &&\n    this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\n  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n  if (re.test(name)) {\n    if (!this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\"); }\n    this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n  }\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$3.parseIdent = function(liberal, isBinding) {\n  var node = this.startNode();\n  if (liberal && this.options.allowReserved === \"never\") { liberal = false; }\n  if (this.type === types.name) {\n    node.name = this.value;\n  } else if (this.type.keyword) {\n    node.name = this.type.keyword;\n\n    // To fix https://github.com/acornjs/acorn/issues/575\n    // `class` and `function` keywords push new context into this.context.\n    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n    if ((node.name === \"class\" || node.name === \"function\") &&\n        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n      this.context.pop();\n    }\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  this.finishNode(node, \"Identifier\");\n  if (!liberal) {\n    this.checkUnreserved(node);\n    if (node.name === \"await\" && !this.awaitIdentPos)\n      { this.awaitIdentPos = node.start; }\n  }\n  return node\n};\n\n// Parses yield expression inside generator.\n\npp$3.parseYield = function(noIn) {\n  if (!this.yieldPos) { this.yieldPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  if (this.type === types.semi || this.canInsertSemicolon() || (this.type !== types.star && !this.type.startsExpr)) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types.star);\n    node.argument = this.parseMaybeAssign(noIn);\n  }\n  return this.finishNode(node, \"YieldExpression\")\n};\n\npp$3.parseAwait = function() {\n  if (!this.awaitPos) { this.awaitPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary(null, true);\n  return this.finishNode(node, \"AwaitExpression\")\n};\n\nvar pp$4 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function(pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n  throw err\n};\n\npp$4.raiseRecoverable = pp$4.raise;\n\npp$4.curPosition = function() {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart)\n  }\n};\n\nvar pp$5 = Parser.prototype;\n\nvar Scope = function Scope(flags) {\n  this.flags = flags;\n  // A list of var-declared names in the current lexical scope\n  this.var = [];\n  // A list of lexically-declared names in the current lexical scope\n  this.lexical = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  this.functions = [];\n};\n\n// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\npp$5.enterScope = function(flags) {\n  this.scopeStack.push(new Scope(flags));\n};\n\npp$5.exitScope = function() {\n  this.scopeStack.pop();\n};\n\n// The spec says:\n// > At the top level of a function, or script, function declarations are\n// > treated like var declarations rather than like lexical declarations.\npp$5.treatFunctionsAsVarInScope = function(scope) {\n  return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)\n};\n\npp$5.declareName = function(name, bindingType, pos) {\n  var this$1 = this;\n\n  var redeclared = false;\n  if (bindingType === BIND_LEXICAL) {\n    var scope = this.currentScope();\n    redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    scope.lexical.push(name);\n    if (this.inModule && (scope.flags & SCOPE_TOP))\n      { delete this.undefinedExports[name]; }\n  } else if (bindingType === BIND_SIMPLE_CATCH) {\n    var scope$1 = this.currentScope();\n    scope$1.lexical.push(name);\n  } else if (bindingType === BIND_FUNCTION) {\n    var scope$2 = this.currentScope();\n    if (this.treatFunctionsAsVar)\n      { redeclared = scope$2.lexical.indexOf(name) > -1; }\n    else\n      { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }\n    scope$2.functions.push(name);\n  } else {\n    for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n      var scope$3 = this$1.scopeStack[i];\n      if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||\n          !this$1.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n        redeclared = true;\n        break\n      }\n      scope$3.var.push(name);\n      if (this$1.inModule && (scope$3.flags & SCOPE_TOP))\n        { delete this$1.undefinedExports[name]; }\n      if (scope$3.flags & SCOPE_VAR) { break }\n    }\n  }\n  if (redeclared) { this.raiseRecoverable(pos, (\"Identifier '\" + name + \"' has already been declared\")); }\n};\n\npp$5.checkLocalExport = function(id) {\n  // scope.functions must be empty as Module code is always strict.\n  if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1) {\n    this.undefinedExports[id.name] = id;\n  }\n};\n\npp$5.currentScope = function() {\n  return this.scopeStack[this.scopeStack.length - 1]\n};\n\npp$5.currentVarScope = function() {\n  var this$1 = this;\n\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this$1.scopeStack[i];\n    if (scope.flags & SCOPE_VAR) { return scope }\n  }\n};\n\n// Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\npp$5.currentThisScope = function() {\n  var this$1 = this;\n\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this$1.scopeStack[i];\n    if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }\n  }\n};\n\nvar Node = function Node(parser, pos, loc) {\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations)\n    { this.loc = new SourceLocation(parser, loc); }\n  if (parser.options.directSourceFile)\n    { this.sourceFile = parser.options.directSourceFile; }\n  if (parser.options.ranges)\n    { this.range = [pos, 0]; }\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$6 = Parser.prototype;\n\npp$6.startNode = function() {\n  return new Node(this, this.start, this.startLoc)\n};\n\npp$6.startNodeAt = function(pos, loc) {\n  return new Node(this, pos, loc)\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations)\n    { node.loc.end = loc; }\n  if (this.options.ranges)\n    { node.range[1] = pos; }\n  return node\n}\n\npp$6.finishNode = function(node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n};\n\n// Finish node at given position\n\npp$6.finishNodeAt = function(node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc)\n};\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n  this.generator = !!generator;\n};\n\nvar types$1 = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", false),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n  f_stat: new TokContext(\"function\", false),\n  f_expr: new TokContext(\"function\", true),\n  f_expr_gen: new TokContext(\"function\", true, false, null, true),\n  f_gen: new TokContext(\"function\", false, false, null, true)\n};\n\nvar pp$7 = Parser.prototype;\n\npp$7.initialContext = function() {\n  return [types$1.b_stat]\n};\n\npp$7.braceIsBlock = function(prevType) {\n  var parent = this.curContext();\n  if (parent === types$1.f_expr || parent === types$1.f_stat)\n    { return true }\n  if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))\n    { return !parent.isExpr }\n\n  // The check for `tt.name && exprAllowed` detects whether we are\n  // after a `yield` or `of` construct. See the `updateContext` for\n  // `tt.name`.\n  if (prevType === types._return || prevType === types.name && this.exprAllowed)\n    { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow)\n    { return true }\n  if (prevType === types.braceL)\n    { return parent === types$1.b_stat }\n  if (prevType === types._var || prevType === types._const || prevType === types.name)\n    { return false }\n  return !this.exprAllowed\n};\n\npp$7.inGeneratorContext = function() {\n  var this$1 = this;\n\n  for (var i = this.context.length - 1; i >= 1; i--) {\n    var context = this$1.context[i];\n    if (context.token === \"function\")\n      { return context.generator }\n  }\n  return false\n};\n\npp$7.updateContext = function(prevType) {\n  var update, type = this.type;\n  if (type.keyword && prevType === types.dot)\n    { this.exprAllowed = false; }\n  else if (update = type.updateContext)\n    { update.call(this, prevType); }\n  else\n    { this.exprAllowed = type.beforeExpr; }\n};\n\n// Token-specific context update code\n\ntypes.parenR.updateContext = types.braceR.updateContext = function() {\n  if (this.context.length === 1) {\n    this.exprAllowed = true;\n    return\n  }\n  var out = this.context.pop();\n  if (out === types$1.b_stat && this.curContext().token === \"function\") {\n    out = this.context.pop();\n  }\n  this.exprAllowed = !out.isExpr;\n};\n\ntypes.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);\n  this.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function() {\n  this.context.push(types$1.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function(prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);\n  this.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntypes._function.updateContext = types._class.updateContext = function(prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else &&\n      !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&\n      !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))\n    { this.context.push(types$1.f_expr); }\n  else\n    { this.context.push(types$1.f_stat); }\n  this.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function() {\n  if (this.curContext() === types$1.q_tmpl)\n    { this.context.pop(); }\n  else\n    { this.context.push(types$1.q_tmpl); }\n  this.exprAllowed = false;\n};\n\ntypes.star.updateContext = function(prevType) {\n  if (prevType === types._function) {\n    var index = this.context.length - 1;\n    if (this.context[index] === types$1.f_expr)\n      { this.context[index] = types$1.f_expr_gen; }\n    else\n      { this.context[index] = types$1.f_gen; }\n  }\n  this.exprAllowed = true;\n};\n\ntypes.name.updateContext = function(prevType) {\n  var allowed = false;\n  if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {\n    if (this.value === \"of\" && !this.exprAllowed ||\n        this.value === \"yield\" && this.inGeneratorContext())\n      { allowed = true; }\n  }\n  this.exprAllowed = allowed;\n};\n\n// This file contains Unicode properties extracted from the ECMAScript\n// specification. The lists are extracted like so:\n// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n\n// #table-binary-unicode-properties\nvar ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\nvar unicodeBinaryProperties = {\n  9: ecma9BinaryProperties,\n  10: ecma9BinaryProperties + \" Extended_Pictographic\"\n};\n\n// #table-unicode-general-category-values\nvar unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n\n// #table-unicode-script-values\nvar ecma9ScriptValues = \"Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\nvar unicodeScriptValues = {\n  9: ecma9ScriptValues,\n  10: ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\"\n};\n\nvar data = {};\nfunction buildUnicodeData(ecmaVersion) {\n  var d = data[ecmaVersion] = {\n    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n    nonBinary: {\n      General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n    }\n  };\n  d.nonBinary.Script_Extensions = d.nonBinary.Script;\n\n  d.nonBinary.gc = d.nonBinary.General_Category;\n  d.nonBinary.sc = d.nonBinary.Script;\n  d.nonBinary.scx = d.nonBinary.Script_Extensions;\n}\nbuildUnicodeData(9);\nbuildUnicodeData(10);\n\nvar pp$9 = Parser.prototype;\n\nvar RegExpValidationState = function RegExpValidationState(parser) {\n  this.parser = parser;\n  this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\");\n  this.unicodeProperties = data[parser.options.ecmaVersion >= 10 ? 10 : parser.options.ecmaVersion];\n  this.source = \"\";\n  this.flags = \"\";\n  this.start = 0;\n  this.switchU = false;\n  this.switchN = false;\n  this.pos = 0;\n  this.lastIntValue = 0;\n  this.lastStringValue = \"\";\n  this.lastAssertionIsQuantifiable = false;\n  this.numCapturingParens = 0;\n  this.maxBackReference = 0;\n  this.groupNames = [];\n  this.backReferenceNames = [];\n};\n\nRegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n  var unicode = flags.indexOf(\"u\") !== -1;\n  this.start = start | 0;\n  this.source = pattern + \"\";\n  this.flags = flags;\n  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n};\n\nRegExpValidationState.prototype.raise = function raise (message) {\n  this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n};\n\n// If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\nRegExpValidationState.prototype.at = function at (i) {\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return -1\n  }\n  var c = s.charCodeAt(i);\n  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return c\n  }\n  return (c << 10) + s.charCodeAt(i + 1) - 0x35FDC00\n};\n\nRegExpValidationState.prototype.nextIndex = function nextIndex (i) {\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return l\n  }\n  var c = s.charCodeAt(i);\n  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return i + 1\n  }\n  return i + 2\n};\n\nRegExpValidationState.prototype.current = function current () {\n  return this.at(this.pos)\n};\n\nRegExpValidationState.prototype.lookahead = function lookahead () {\n  return this.at(this.nextIndex(this.pos))\n};\n\nRegExpValidationState.prototype.advance = function advance () {\n  this.pos = this.nextIndex(this.pos);\n};\n\nRegExpValidationState.prototype.eat = function eat (ch) {\n  if (this.current() === ch) {\n    this.advance();\n    return true\n  }\n  return false\n};\n\nfunction codePointToString$1(ch) {\n  if (ch <= 0xFFFF) { return String.fromCharCode(ch) }\n  ch -= 0x10000;\n  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)\n}\n\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$9.validateRegExpFlags = function(state) {\n  var this$1 = this;\n\n  var validFlags = state.validFlags;\n  var flags = state.flags;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags.charAt(i);\n    if (validFlags.indexOf(flag) === -1) {\n      this$1.raise(state.start, \"Invalid regular expression flag\");\n    }\n    if (flags.indexOf(flag, i + 1) > -1) {\n      this$1.raise(state.start, \"Duplicate regular expression flag\");\n    }\n  }\n};\n\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$9.validateRegExpPattern = function(state) {\n  this.regexp_pattern(state);\n\n  // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n  // parsing contains a |GroupName|, reparse with the goal symbol\n  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n  // exception if _P_ did not conform to the grammar, if any elements of _P_\n  // were not matched by the parse, or if any Early Error conditions exist.\n  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n    state.switchN = true;\n    this.regexp_pattern(state);\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\npp$9.regexp_pattern = function(state) {\n  state.pos = 0;\n  state.lastIntValue = 0;\n  state.lastStringValue = \"\";\n  state.lastAssertionIsQuantifiable = false;\n  state.numCapturingParens = 0;\n  state.maxBackReference = 0;\n  state.groupNames.length = 0;\n  state.backReferenceNames.length = 0;\n\n  this.regexp_disjunction(state);\n\n  if (state.pos !== state.source.length) {\n    // Make the same messages as V8.\n    if (state.eat(0x29 /* ) */)) {\n      state.raise(\"Unmatched ')'\");\n    }\n    if (state.eat(0x5D /* [ */) || state.eat(0x7D /* } */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  }\n  if (state.maxBackReference > state.numCapturingParens) {\n    state.raise(\"Invalid escape\");\n  }\n  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n    var name = list[i];\n\n    if (state.groupNames.indexOf(name) === -1) {\n      state.raise(\"Invalid named capture referenced\");\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\npp$9.regexp_disjunction = function(state) {\n  var this$1 = this;\n\n  this.regexp_alternative(state);\n  while (state.eat(0x7C /* | */)) {\n    this$1.regexp_alternative(state);\n  }\n\n  // Make the same message as V8.\n  if (this.regexp_eatQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  if (state.eat(0x7B /* { */)) {\n    state.raise(\"Lone quantifier brackets\");\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\npp$9.regexp_alternative = function(state) {\n  while (state.pos < state.source.length && this.regexp_eatTerm(state))\n    {  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\npp$9.regexp_eatTerm = function(state) {\n  if (this.regexp_eatAssertion(state)) {\n    // Handle `QuantifiableAssertion Quantifier` alternative.\n    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n    // is a QuantifiableAssertion.\n    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n      // Make the same message as V8.\n      if (state.switchU) {\n        state.raise(\"Invalid quantifier\");\n      }\n    }\n    return true\n  }\n\n  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n    this.regexp_eatQuantifier(state);\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\npp$9.regexp_eatAssertion = function(state) {\n  var start = state.pos;\n  state.lastAssertionIsQuantifiable = false;\n\n  // ^, $\n  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n    return true\n  }\n\n  // \\b \\B\n  if (state.eat(0x5C /* \\ */)) {\n    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  // Lookahead / Lookbehind\n  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n    var lookbehind = false;\n    if (this.options.ecmaVersion >= 9) {\n      lookbehind = state.eat(0x3C /* < */);\n    }\n    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n      this.regexp_disjunction(state);\n      if (!state.eat(0x29 /* ) */)) {\n        state.raise(\"Unterminated group\");\n      }\n      state.lastAssertionIsQuantifiable = !lookbehind;\n      return true\n    }\n  }\n\n  state.pos = start;\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\npp$9.regexp_eatQuantifier = function(state, noError) {\n  if ( noError === void 0 ) noError = false;\n\n  if (this.regexp_eatQuantifierPrefix(state, noError)) {\n    state.eat(0x3F /* ? */);\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\npp$9.regexp_eatQuantifierPrefix = function(state, noError) {\n  return (\n    state.eat(0x2A /* * */) ||\n    state.eat(0x2B /* + */) ||\n    state.eat(0x3F /* ? */) ||\n    this.regexp_eatBracedQuantifier(state, noError)\n  )\n};\npp$9.regexp_eatBracedQuantifier = function(state, noError) {\n  var start = state.pos;\n  if (state.eat(0x7B /* { */)) {\n    var min = 0, max = -1;\n    if (this.regexp_eatDecimalDigits(state)) {\n      min = state.lastIntValue;\n      if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n        max = state.lastIntValue;\n      }\n      if (state.eat(0x7D /* } */)) {\n        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n        if (max !== -1 && max < min && !noError) {\n          state.raise(\"numbers out of order in {} quantifier\");\n        }\n        return true\n      }\n    }\n    if (state.switchU && !noError) {\n      state.raise(\"Incomplete quantifier\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\npp$9.regexp_eatAtom = function(state) {\n  return (\n    this.regexp_eatPatternCharacters(state) ||\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state)\n  )\n};\npp$9.regexp_eatReverseSolidusAtomEscape = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatAtomEscape(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatUncapturingGroup = function(state) {\n  var start = state.pos;\n  if (state.eat(0x28 /* ( */)) {\n    if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatCapturingGroup = function(state) {\n  if (state.eat(0x28 /* ( */)) {\n    if (this.options.ecmaVersion >= 9) {\n      this.regexp_groupSpecifier(state);\n    } else if (state.current() === 0x3F /* ? */) {\n      state.raise(\"Invalid group\");\n    }\n    this.regexp_disjunction(state);\n    if (state.eat(0x29 /* ) */)) {\n      state.numCapturingParens += 1;\n      return true\n    }\n    state.raise(\"Unterminated group\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\npp$9.regexp_eatExtendedAtom = function(state) {\n  return (\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state) ||\n    this.regexp_eatInvalidBracedQuantifier(state) ||\n    this.regexp_eatExtendedPatternCharacter(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\npp$9.regexp_eatInvalidBracedQuantifier = function(state) {\n  if (this.regexp_eatBracedQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\npp$9.regexp_eatSyntaxCharacter = function(state) {\n  var ch = state.current();\n  if (isSyntaxCharacter(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isSyntaxCharacter(ch) {\n  return (\n    ch === 0x24 /* $ */ ||\n    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n    ch === 0x2E /* . */ ||\n    ch === 0x3F /* ? */ ||\n    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n    ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\npp$9.regexp_eatPatternCharacters = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n    state.advance();\n  }\n  return state.pos !== start\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\npp$9.regexp_eatExtendedPatternCharacter = function(state) {\n  var ch = state.current();\n  if (\n    ch !== -1 &&\n    ch !== 0x24 /* $ */ &&\n    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n    ch !== 0x2E /* . */ &&\n    ch !== 0x3F /* ? */ &&\n    ch !== 0x5B /* [ */ &&\n    ch !== 0x5E /* ^ */ &&\n    ch !== 0x7C /* | */\n  ) {\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// GroupSpecifier[U] ::\n//   [empty]\n//   `?` GroupName[?U]\npp$9.regexp_groupSpecifier = function(state) {\n  if (state.eat(0x3F /* ? */)) {\n    if (this.regexp_eatGroupName(state)) {\n      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n        state.raise(\"Duplicate capture group name\");\n      }\n      state.groupNames.push(state.lastStringValue);\n      return\n    }\n    state.raise(\"Invalid group\");\n  }\n};\n\n// GroupName[U] ::\n//   `<` RegExpIdentifierName[?U] `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$9.regexp_eatGroupName = function(state) {\n  state.lastStringValue = \"\";\n  if (state.eat(0x3C /* < */)) {\n    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n      return true\n    }\n    state.raise(\"Invalid capture group name\");\n  }\n  return false\n};\n\n// RegExpIdentifierName[U] ::\n//   RegExpIdentifierStart[?U]\n//   RegExpIdentifierName[?U] RegExpIdentifierPart[?U]\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$9.regexp_eatRegExpIdentifierName = function(state) {\n  state.lastStringValue = \"\";\n  if (this.regexp_eatRegExpIdentifierStart(state)) {\n    state.lastStringValue += codePointToString$1(state.lastIntValue);\n    while (this.regexp_eatRegExpIdentifierPart(state)) {\n      state.lastStringValue += codePointToString$1(state.lastIntValue);\n    }\n    return true\n  }\n  return false\n};\n\n// RegExpIdentifierStart[U] ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[?U]\npp$9.regexp_eatRegExpIdentifierStart = function(state) {\n  var start = state.pos;\n  var ch = state.current();\n  state.advance();\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierStart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierStart(ch) {\n  return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n}\n\n// RegExpIdentifierPart[U] ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[?U]\n//   <ZWNJ>\n//   <ZWJ>\npp$9.regexp_eatRegExpIdentifierPart = function(state) {\n  var start = state.pos;\n  var ch = state.current();\n  state.advance();\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierPart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierPart(ch) {\n  return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\npp$9.regexp_eatAtomEscape = function(state) {\n  if (\n    this.regexp_eatBackReference(state) ||\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state) ||\n    (state.switchN && this.regexp_eatKGroupName(state))\n  ) {\n    return true\n  }\n  if (state.switchU) {\n    // Make the same message as V8.\n    if (state.current() === 0x63 /* c */) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.raise(\"Invalid escape\");\n  }\n  return false\n};\npp$9.regexp_eatBackReference = function(state) {\n  var start = state.pos;\n  if (this.regexp_eatDecimalEscape(state)) {\n    var n = state.lastIntValue;\n    if (state.switchU) {\n      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n      if (n > state.maxBackReference) {\n        state.maxBackReference = n;\n      }\n      return true\n    }\n    if (n <= state.numCapturingParens) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatKGroupName = function(state) {\n  if (state.eat(0x6B /* k */)) {\n    if (this.regexp_eatGroupName(state)) {\n      state.backReferenceNames.push(state.lastStringValue);\n      return true\n    }\n    state.raise(\"Invalid named reference\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\npp$9.regexp_eatCharacterEscape = function(state) {\n  return (\n    this.regexp_eatControlEscape(state) ||\n    this.regexp_eatCControlLetter(state) ||\n    this.regexp_eatZero(state) ||\n    this.regexp_eatHexEscapeSequence(state) ||\n    this.regexp_eatRegExpUnicodeEscapeSequence(state) ||\n    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n    this.regexp_eatIdentityEscape(state)\n  )\n};\npp$9.regexp_eatCControlLetter = function(state) {\n  var start = state.pos;\n  if (state.eat(0x63 /* c */)) {\n    if (this.regexp_eatControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatZero = function(state) {\n  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n    state.lastIntValue = 0;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\npp$9.regexp_eatControlEscape = function(state) {\n  var ch = state.current();\n  if (ch === 0x74 /* t */) {\n    state.lastIntValue = 0x09; /* \\t */\n    state.advance();\n    return true\n  }\n  if (ch === 0x6E /* n */) {\n    state.lastIntValue = 0x0A; /* \\n */\n    state.advance();\n    return true\n  }\n  if (ch === 0x76 /* v */) {\n    state.lastIntValue = 0x0B; /* \\v */\n    state.advance();\n    return true\n  }\n  if (ch === 0x66 /* f */) {\n    state.lastIntValue = 0x0C; /* \\f */\n    state.advance();\n    return true\n  }\n  if (ch === 0x72 /* r */) {\n    state.lastIntValue = 0x0D; /* \\r */\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\npp$9.regexp_eatControlLetter = function(state) {\n  var ch = state.current();\n  if (isControlLetter(ch)) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isControlLetter(ch) {\n  return (\n    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\npp$9.regexp_eatRegExpUnicodeEscapeSequence = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x75 /* u */)) {\n    if (this.regexp_eatFixedHexDigits(state, 4)) {\n      var lead = state.lastIntValue;\n      if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n        var leadSurrogateEnd = state.pos;\n        if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n          var trail = state.lastIntValue;\n          if (trail >= 0xDC00 && trail <= 0xDFFF) {\n            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n            return true\n          }\n        }\n        state.pos = leadSurrogateEnd;\n        state.lastIntValue = lead;\n      }\n      return true\n    }\n    if (\n      state.switchU &&\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatHexDigits(state) &&\n      state.eat(0x7D /* } */) &&\n      isValidUnicode(state.lastIntValue)\n    ) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.pos = start;\n  }\n\n  return false\n};\nfunction isValidUnicode(ch) {\n  return ch >= 0 && ch <= 0x10FFFF\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\npp$9.regexp_eatIdentityEscape = function(state) {\n  if (state.switchU) {\n    if (this.regexp_eatSyntaxCharacter(state)) {\n      return true\n    }\n    if (state.eat(0x2F /* / */)) {\n      state.lastIntValue = 0x2F; /* / */\n      return true\n    }\n    return false\n  }\n\n  var ch = state.current();\n  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\npp$9.regexp_eatDecimalEscape = function(state) {\n  state.lastIntValue = 0;\n  var ch = state.current();\n  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n    do {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\npp$9.regexp_eatCharacterClassEscape = function(state) {\n  var ch = state.current();\n\n  if (isCharacterClassEscape(ch)) {\n    state.lastIntValue = -1;\n    state.advance();\n    return true\n  }\n\n  if (\n    state.switchU &&\n    this.options.ecmaVersion >= 9 &&\n    (ch === 0x50 /* P */ || ch === 0x70 /* p */)\n  ) {\n    state.lastIntValue = -1;\n    state.advance();\n    if (\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatUnicodePropertyValueExpression(state) &&\n      state.eat(0x7D /* } */)\n    ) {\n      return true\n    }\n    state.raise(\"Invalid property name\");\n  }\n\n  return false\n};\nfunction isCharacterClassEscape(ch) {\n  return (\n    ch === 0x64 /* d */ ||\n    ch === 0x44 /* D */ ||\n    ch === 0x73 /* s */ ||\n    ch === 0x53 /* S */ ||\n    ch === 0x77 /* w */ ||\n    ch === 0x57 /* W */\n  )\n}\n\n// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\npp$9.regexp_eatUnicodePropertyValueExpression = function(state) {\n  var start = state.pos;\n\n  // UnicodePropertyName `=` UnicodePropertyValue\n  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n    var name = state.lastStringValue;\n    if (this.regexp_eatUnicodePropertyValue(state)) {\n      var value = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n      return true\n    }\n  }\n  state.pos = start;\n\n  // LoneUnicodePropertyNameOrValue\n  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n    var nameOrValue = state.lastStringValue;\n    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n    return true\n  }\n  return false\n};\npp$9.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n  if (!has(state.unicodeProperties.nonBinary, name))\n    { state.raise(\"Invalid property name\"); }\n  if (!state.unicodeProperties.nonBinary[name].test(value))\n    { state.raise(\"Invalid property value\"); }\n};\npp$9.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n  if (!state.unicodeProperties.binary.test(nameOrValue))\n    { state.raise(\"Invalid property name\"); }\n};\n\n// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\npp$9.regexp_eatUnicodePropertyName = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyNameCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyNameCharacter(ch) {\n  return isControlLetter(ch) || ch === 0x5F /* _ */\n}\n\n// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\npp$9.regexp_eatUnicodePropertyValue = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyValueCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyValueCharacter(ch) {\n  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n}\n\n// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\npp$9.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n  return this.regexp_eatUnicodePropertyValue(state)\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\npp$9.regexp_eatCharacterClass = function(state) {\n  if (state.eat(0x5B /* [ */)) {\n    state.eat(0x5E /* ^ */);\n    this.regexp_classRanges(state);\n    if (state.eat(0x5D /* [ */)) {\n      return true\n    }\n    // Unreachable since it threw \"unterminated regular expression\" error before.\n    state.raise(\"Unterminated character class\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\npp$9.regexp_classRanges = function(state) {\n  var this$1 = this;\n\n  while (this.regexp_eatClassAtom(state)) {\n    var left = state.lastIntValue;\n    if (state.eat(0x2D /* - */) && this$1.regexp_eatClassAtom(state)) {\n      var right = state.lastIntValue;\n      if (state.switchU && (left === -1 || right === -1)) {\n        state.raise(\"Invalid character class\");\n      }\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise(\"Range out of order in character class\");\n      }\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\npp$9.regexp_eatClassAtom = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatClassEscape(state)) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      var ch$1 = state.current();\n      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n        state.raise(\"Invalid class escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n\n  var ch = state.current();\n  if (ch !== 0x5D /* [ */) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\npp$9.regexp_eatClassEscape = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x62 /* b */)) {\n    state.lastIntValue = 0x08; /* <BS> */\n    return true\n  }\n\n  if (state.switchU && state.eat(0x2D /* - */)) {\n    state.lastIntValue = 0x2D; /* - */\n    return true\n  }\n\n  if (!state.switchU && state.eat(0x63 /* c */)) {\n    if (this.regexp_eatClassControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  return (\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\npp$9.regexp_eatClassControlLetter = function(state) {\n  var ch = state.current();\n  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$9.regexp_eatHexEscapeSequence = function(state) {\n  var start = state.pos;\n  if (state.eat(0x78 /* x */)) {\n    if (this.regexp_eatFixedHexDigits(state, 2)) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\npp$9.regexp_eatDecimalDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isDecimalDigit(ch = state.current())) {\n    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isDecimalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\npp$9.regexp_eatHexDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isHexDigit(ch = state.current())) {\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isHexDigit(ch) {\n  return (\n    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n  )\n}\nfunction hexToInt(ch) {\n  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n    return 10 + (ch - 0x41 /* A */)\n  }\n  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n    return 10 + (ch - 0x61 /* a */)\n  }\n  return ch - 0x30 /* 0 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\npp$9.regexp_eatLegacyOctalEscapeSequence = function(state) {\n  if (this.regexp_eatOctalDigit(state)) {\n    var n1 = state.lastIntValue;\n    if (this.regexp_eatOctalDigit(state)) {\n      var n2 = state.lastIntValue;\n      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n      } else {\n        state.lastIntValue = n1 * 8 + n2;\n      }\n    } else {\n      state.lastIntValue = n1;\n    }\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\npp$9.regexp_eatOctalDigit = function(state) {\n  var ch = state.current();\n  if (isOctalDigit(ch)) {\n    state.lastIntValue = ch - 0x30; /* 0 */\n    state.advance();\n    return true\n  }\n  state.lastIntValue = 0;\n  return false\n};\nfunction isOctalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$9.regexp_eatFixedHexDigits = function(state, length) {\n  var start = state.pos;\n  state.lastIntValue = 0;\n  for (var i = 0; i < length; ++i) {\n    var ch = state.current();\n    if (!isHexDigit(ch)) {\n      state.pos = start;\n      return false\n    }\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return true\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations)\n    { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n  if (p.options.ranges)\n    { this.range = [p.start, p.end]; }\n};\n\n// ## Tokenizer\n\nvar pp$8 = Parser.prototype;\n\n// Move to the next token\n\npp$8.next = function() {\n  if (this.options.onToken)\n    { this.options.onToken(new Token(this)); }\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp$8.getToken = function() {\n  this.next();\n  return new Token(this)\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  { pp$8[Symbol.iterator] = function() {\n    var this$1 = this;\n\n    return {\n      next: function () {\n        var token = this$1.getToken();\n        return {\n          done: token.type === types.eof,\n          value: token\n        }\n      }\n    }\n  }; }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp$8.curContext = function() {\n  return this.context[this.context.length - 1]\n};\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp$8.nextToken = function() {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n  this.start = this.pos;\n  if (this.options.locations) { this.startLoc = this.curPosition(); }\n  if (this.pos >= this.input.length) { return this.finishToken(types.eof) }\n\n  if (curContext.override) { return curContext.override(this) }\n  else { this.readToken(this.fullCharCodeAtPos()); }\n};\n\npp$8.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    { return this.readWord() }\n\n  return this.getTokenFromCode(code)\n};\n\npp$8.fullCharCodeAtPos = function() {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xe000) { return code }\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 0x35fdc00\n};\n\npp$8.skipBlockComment = function() {\n  var this$1 = this;\n\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n  this.pos = end + 2;\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start;\n    var match;\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this$1.curLine;\n      this$1.lineStart = match.index + match[0].length;\n    }\n  }\n  if (this.options.onComment)\n    { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\npp$8.skipLineComment = function(startSkip) {\n  var this$1 = this;\n\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && !isNewLine(ch)) {\n    ch = this$1.input.charCodeAt(++this$1.pos);\n  }\n  if (this.options.onComment)\n    { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp$8.skipSpace = function() {\n  var this$1 = this;\n\n  loop: while (this.pos < this.input.length) {\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    switch (ch) {\n    case 32: case 160: // ' '\n      ++this$1.pos;\n      break\n    case 13:\n      if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {\n        ++this$1.pos;\n      }\n    case 10: case 8232: case 8233:\n      ++this$1.pos;\n      if (this$1.options.locations) {\n        ++this$1.curLine;\n        this$1.lineStart = this$1.pos;\n      }\n      break\n    case 47: // '/'\n      switch (this$1.input.charCodeAt(this$1.pos + 1)) {\n      case 42: // '*'\n        this$1.skipBlockComment();\n        break\n      case 47:\n        this$1.skipLineComment(2);\n        break\n      default:\n        break loop\n      }\n      break\n    default:\n      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n        ++this$1.pos;\n      } else {\n        break loop\n      }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp$8.finishToken = function(type, val) {\n  this.end = this.pos;\n  if (this.options.locations) { this.endLoc = this.curPosition(); }\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp$8.readToken_dot = function() {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) { return this.readNumber(true) }\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(types.ellipsis)\n  } else {\n    ++this.pos;\n    return this.finishToken(types.dot)\n  }\n};\n\npp$8.readToken_slash = function() { // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.slash, 1)\n};\n\npp$8.readToken_mult_modulo_exp = function(code) { // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? types.star : types.modulo;\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n    ++size;\n    tokentype = types.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) { return this.finishOp(types.assign, size + 1) }\n  return this.finishOp(tokentype, size)\n};\n\npp$8.readToken_pipe_amp = function(code) { // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) { return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2) }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)\n};\n\npp$8.readToken_caret = function() { // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.bitwiseXOR, 1)\n};\n\npp$8.readToken_plus_min = function(code) { // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    return this.finishOp(types.incDec, 2)\n  }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.plusMin, 1)\n};\n\npp$8.readToken_lt_gt = function(code) { // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types.assign, size + 1) }\n    return this.finishOp(types.bitShift, size)\n  }\n  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n      this.input.charCodeAt(this.pos + 3) === 45) {\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken()\n  }\n  if (next === 61) { size = 2; }\n  return this.finishOp(types.relational, size)\n};\n\npp$8.readToken_eq_excl = function(code) { // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2;\n    return this.finishToken(types.arrow)\n  }\n  return this.finishOp(code === 61 ? types.eq : types.prefix, 1)\n};\n\npp$8.getTokenFromCode = function(code) {\n  switch (code) {\n  // The interpretation of a dot depends on whether it is followed\n  // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n  // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(types.parenL)\n  case 41: ++this.pos; return this.finishToken(types.parenR)\n  case 59: ++this.pos; return this.finishToken(types.semi)\n  case 44: ++this.pos; return this.finishToken(types.comma)\n  case 91: ++this.pos; return this.finishToken(types.bracketL)\n  case 93: ++this.pos; return this.finishToken(types.bracketR)\n  case 123: ++this.pos; return this.finishToken(types.braceL)\n  case 125: ++this.pos; return this.finishToken(types.braceR)\n  case 58: ++this.pos; return this.finishToken(types.colon)\n  case 63: ++this.pos; return this.finishToken(types.question)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) { break }\n    ++this.pos;\n    return this.finishToken(types.backQuote)\n\n  case 48: // '0'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n    }\n\n  // Anything else beginning with a digit is an integer, octal\n  // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n  // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n  // Operators are parsed inline in tiny state machines. '=' (61) is\n  // often referred to. `finishOp` simply skips the amount of\n  // characters it is given as second argument, and returns a token\n  // of the type given by its first argument.\n\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 126: // '~'\n    return this.finishOp(types.prefix, 1)\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp$8.finishOp = function(type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str)\n};\n\npp$8.readRegexp = function() {\n  var this$1 = this;\n\n  var escaped, inClass, start = this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) { this$1.raise(start, \"Unterminated regular expression\"); }\n    var ch = this$1.input.charAt(this$1.pos);\n    if (lineBreak.test(ch)) { this$1.raise(start, \"Unterminated regular expression\"); }\n    if (!escaped) {\n      if (ch === \"[\") { inClass = true; }\n      else if (ch === \"]\" && inClass) { inClass = false; }\n      else if (ch === \"/\" && !inClass) { break }\n      escaped = ch === \"\\\\\";\n    } else { escaped = false; }\n    ++this$1.pos;\n  }\n  var pattern = this.input.slice(start, this.pos);\n  ++this.pos;\n  var flagsStart = this.pos;\n  var flags = this.readWord1();\n  if (this.containsEsc) { this.unexpected(flagsStart); }\n\n  // Validate pattern\n  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n  state.reset(start, pattern, flags);\n  this.validateRegExpFlags(state);\n  this.validateRegExpPattern(state);\n\n  // Create Literal#value property value.\n  var value = null;\n  try {\n    value = new RegExp(pattern, flags);\n  } catch (e) {\n    // ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n  }\n\n  return this.finishToken(types.regexp, {pattern: pattern, flags: flags, value: value})\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp$8.readInt = function(radix, len) {\n  var this$1 = this;\n\n  var start = this.pos, total = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    var code = this$1.input.charCodeAt(this$1.pos), val = (void 0);\n    if (code >= 97) { val = code - 97 + 10; } // a\n    else if (code >= 65) { val = code - 65 + 10; } // A\n    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n    else { val = Infinity; }\n    if (val >= radix) { break }\n    ++this$1.pos;\n    total = total * radix + val;\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n  return total\n};\n\npp$8.readRadixNumber = function(radix) {\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n  return this.finishToken(types.num, val)\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp$8.readNumber = function(startsWithDot) {\n  var start = this.pos;\n  if (!startsWithDot && this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n  if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n  if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n  var next = this.input.charCodeAt(this.pos);\n  if (next === 46 && !octal) { // '.'\n    ++this.pos;\n    this.readInt(10);\n    next = this.input.charCodeAt(this.pos);\n  }\n  if ((next === 69 || next === 101) && !octal) { // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) { ++this.pos; } // '+-'\n    if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n  var str = this.input.slice(start, this.pos);\n  var val = octal ? parseInt(str, 8) : parseFloat(str);\n  return this.finishToken(types.num, val)\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp$8.readCodePoint = function() {\n  var ch = this.input.charCodeAt(this.pos), code;\n\n  if (ch === 123) { // '{'\n    if (this.options.ecmaVersion < 6) { this.unexpected(); }\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code\n};\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) { return String.fromCharCode(code) }\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\npp$8.readString = function(quote) {\n  var this$1 = this;\n\n  var out = \"\", chunkStart = ++this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) { this$1.raise(this$1.start, \"Unterminated string constant\"); }\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    if (ch === quote) { break }\n    if (ch === 92) { // '\\'\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      out += this$1.readEscapedChar(false);\n      chunkStart = this$1.pos;\n    } else {\n      if (isNewLine(ch, this$1.options.ecmaVersion >= 10)) { this$1.raise(this$1.start, \"Unterminated string constant\"); }\n      ++this$1.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(types.string, out)\n};\n\n// Reads template string tokens.\n\nvar INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\npp$8.tryReadTemplateToken = function() {\n  this.inTemplateElement = true;\n  try {\n    this.readTmplToken();\n  } catch (err) {\n    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n      this.readInvalidTemplateToken();\n    } else {\n      throw err\n    }\n  }\n\n  this.inTemplateElement = false;\n};\n\npp$8.invalidStringToken = function(position, message) {\n  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n    throw INVALID_TEMPLATE_ESCAPE_ERROR\n  } else {\n    this.raise(position, message);\n  }\n};\n\npp$8.readTmplToken = function() {\n  var this$1 = this;\n\n  var out = \"\", chunkStart = this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) { this$1.raise(this$1.start, \"Unterminated template\"); }\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'\n      if (this$1.pos === this$1.start && (this$1.type === types.template || this$1.type === types.invalidTemplate)) {\n        if (ch === 36) {\n          this$1.pos += 2;\n          return this$1.finishToken(types.dollarBraceL)\n        } else {\n          ++this$1.pos;\n          return this$1.finishToken(types.backQuote)\n        }\n      }\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      return this$1.finishToken(types.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      out += this$1.readEscapedChar(true);\n      chunkStart = this$1.pos;\n    } else if (isNewLine(ch)) {\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      ++this$1.pos;\n      switch (ch) {\n      case 13:\n        if (this$1.input.charCodeAt(this$1.pos) === 10) { ++this$1.pos; }\n      case 10:\n        out += \"\\n\";\n        break\n      default:\n        out += String.fromCharCode(ch);\n        break\n      }\n      if (this$1.options.locations) {\n        ++this$1.curLine;\n        this$1.lineStart = this$1.pos;\n      }\n      chunkStart = this$1.pos;\n    } else {\n      ++this$1.pos;\n    }\n  }\n};\n\n// Reads a template token to search for the end, without validating any escape sequences\npp$8.readInvalidTemplateToken = function() {\n  var this$1 = this;\n\n  for (; this.pos < this.input.length; this.pos++) {\n    switch (this$1.input[this$1.pos]) {\n    case \"\\\\\":\n      ++this$1.pos;\n      break\n\n    case \"$\":\n      if (this$1.input[this$1.pos + 1] !== \"{\") {\n        break\n      }\n    // falls through\n\n    case \"`\":\n      return this$1.finishToken(types.invalidTemplate, this$1.input.slice(this$1.start, this$1.pos))\n\n    // no default\n    }\n  }\n  this.raise(this.start, \"Unterminated template\");\n};\n\n// Used to read escaped characters\n\npp$8.readEscapedChar = function(inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n  case 110: return \"\\n\" // 'n' -> '\\n'\n  case 114: return \"\\r\" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString(this.readCodePoint()) // 'u'\n  case 116: return \"\\t\" // 't' -> '\\t'\n  case 98: return \"\\b\" // 'b' -> '\\b'\n  case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n  case 102: return \"\\f\" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n    return \"\"\n  default:\n    if (ch >= 48 && ch <= 55) {\n      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n      var octal = parseInt(octalStr, 8);\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1);\n        octal = parseInt(octalStr, 8);\n      }\n      this.pos += octalStr.length - 1;\n      ch = this.input.charCodeAt(this.pos);\n      if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n        this.invalidStringToken(\n          this.pos - 1 - octalStr.length,\n          inTemplate\n            ? \"Octal literal in template string\"\n            : \"Octal literal in strict mode\"\n        );\n      }\n      return String.fromCharCode(octal)\n    }\n    if (isNewLine(ch)) {\n      // Unicode new line characters after \\ get removed from output in both\n      // template literals and strings\n      return \"\"\n    }\n    return String.fromCharCode(ch)\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp$8.readHexChar = function(len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n  return n\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp$8.readWord1 = function() {\n  var this$1 = this;\n\n  this.containsEsc = false;\n  var word = \"\", first = true, chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this$1.fullCharCodeAtPos();\n    if (isIdentifierChar(ch, astral)) {\n      this$1.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) { // \"\\\"\n      this$1.containsEsc = true;\n      word += this$1.input.slice(chunkStart, this$1.pos);\n      var escStart = this$1.pos;\n      if (this$1.input.charCodeAt(++this$1.pos) !== 117) // \"u\"\n        { this$1.invalidStringToken(this$1.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n      ++this$1.pos;\n      var esc = this$1.readCodePoint();\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        { this$1.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n      word += codePointToString(esc);\n      chunkStart = this$1.pos;\n    } else {\n      break\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp$8.readWord = function() {\n  var word = this.readWord1();\n  var type = types.name;\n  if (this.keywords.test(word)) {\n    if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + word); }\n    type = keywords$1[word];\n  }\n  return this.finishToken(type, word)\n};\n\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/acornjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/acornjs/acorn/issues\n//\n// [walk]: util/walk.js\n\nvar version = \"6.1.1\";\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return Parser.parse(input, options)\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  return Parser.parseExpressionAt(input, pos, options)\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return Parser.tokenizer(input, options)\n}\n\nexport { version, parse, parseExpressionAt, tokenizer, Parser, defaultOptions, Position, SourceLocation, getLineInfo, Node, TokenType, types as tokTypes, keywords$1 as keywordTypes, TokContext, types$1 as tokContexts, isIdentifierChar, isIdentifierStart, Token, isNewLine, lineBreak, lineBreakG, nonASCIIwhitespace };\n//# sourceMappingURL=acorn.mjs.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DynamicImportKey = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function () {\n  function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } }\n\n  return get;\n}();\n\nexports['default'] = dynamicImport;\n\nvar _acorn = require('acorn');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-underscore-dangle */\n\n\nvar DynamicImportKey = exports.DynamicImportKey = 'Import';\n\n// NOTE: This allows `yield import()` to parse correctly.\n_acorn.tokTypes._import.startsExpr = true;\n\nfunction parseDynamicImport() {\n  var node = this.startNode();\n  this.next();\n  if (this.type !== _acorn.tokTypes.parenL) {\n    this.unexpected();\n  }\n  return this.finishNode(node, DynamicImportKey);\n}\n\nfunction parenAfter() {\n  return (/^(\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*\\(/.test(this.input.slice(this.pos))\n  );\n}\n\nfunction dynamicImport(Parser) {\n  return function (_Parser) {\n    _inherits(_class, _Parser);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    _createClass(_class, [{\n      key: 'parseStatement',\n      value: function () {\n        function parseStatement(context, topLevel, exports) {\n          if (this.type === _acorn.tokTypes._import && parenAfter.call(this)) {\n            return this.parseExpressionStatement(this.startNode(), this.parseExpression());\n          }\n          return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'parseStatement', this).call(this, context, topLevel, exports);\n        }\n\n        return parseStatement;\n      }()\n    }, {\n      key: 'parseExprAtom',\n      value: function () {\n        function parseExprAtom(refDestructuringErrors) {\n          if (this.type === _acorn.tokTypes._import) {\n            return parseDynamicImport.call(this);\n          }\n          return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'parseExprAtom', this).call(this, refDestructuringErrors);\n        }\n\n        return parseExprAtom;\n      }()\n    }]);\n\n    return _class;\n  }(Parser);\n}","import * as acorn from 'acorn';\r\nimport dynamicImport from 'acorn-dynamic-import';\r\n\r\nconst Parser = acorn.Parser.extend(dynamicImport);\r\n\r\nexport const parse = (source: string) => Parser.parse(source, {\r\n\tsourceType: 'module',\r\n\tecmaVersion: 9,\r\n\tpreserveParens: true\r\n});\r\n\r\nexport const parseExpressionAt = (source: string, index: number) => Parser.parseExpressionAt(source, index, {\r\n\tecmaVersion: 9,\r\n\tpreserveParens: true\r\n});","import { parseExpressionAt } from '../acorn';\r\nimport { Parser } from '../index';\r\n\r\nconst literals = new Map([['true', true], ['false', false], ['null', null]]);\r\n\r\nexport default function readExpression(parser: Parser) {\r\n\tconst start = parser.index;\r\n\r\n\tconst name = parser.readUntil(/\\s*}/);\r\n\tif (name && /^[a-z]+$/.test(name)) {\r\n\t\tconst end = start + name.length;\r\n\r\n\t\tif (literals.has(name)) {\r\n\t\t\treturn {\r\n\t\t\t\ttype: 'Literal',\r\n\t\t\t\tstart,\r\n\t\t\t\tend,\r\n\t\t\t\tvalue: literals.get(name),\r\n\t\t\t\traw: name,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\ttype: 'Identifier',\r\n\t\t\tstart,\r\n\t\t\tend: start + name.length,\r\n\t\t\tname,\r\n\t\t};\r\n\t}\r\n\r\n\tparser.index = start;\r\n\r\n\ttry {\r\n\t\tconst node = parseExpressionAt(parser.template, parser.index);\r\n\t\tparser.index = node.end;\r\n\r\n\t\treturn node;\r\n\t} catch (err) {\r\n\t\tparser.acornError(err);\r\n\t}\r\n}\r\n","import * as acorn from '../acorn';\r\nimport repeat from '../../utils/repeat';\r\nimport { Parser } from '../index';\r\nimport { Node } from '../../interfaces';\r\n\r\nconst scriptClosingTag = '</script>';\r\n\r\nfunction get_context(parser: Parser, attributes: Node[], start: number) {\r\n\tconst context = attributes.find(attribute => attribute.name === 'context');\r\n\tif (!context) return 'default';\r\n\r\n\tif (context.value.length !== 1 || context.value[0].type !== 'Text') {\r\n\t\tparser.error({\r\n\t\t\tcode: 'invalid-script',\r\n\t\t\tmessage: `context attribute must be static`\r\n\t\t}, start);\r\n\t}\r\n\r\n\tconst value = context.value[0].data;\r\n\r\n\tif (value !== 'module') {\r\n\t\tparser.error({\r\n\t\t\tcode: `invalid-script`,\r\n\t\t\tmessage: `If the context attribute is supplied, its value must be \"module\"`\r\n\t\t}, context.start);\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\nexport default function readScript(parser: Parser, start: number, attributes: Node[]) {\r\n\tconst scriptStart = parser.index;\r\n\tconst scriptEnd = parser.template.indexOf(scriptClosingTag, scriptStart);\r\n\r\n\tif (scriptEnd === -1) parser.error({\r\n\t\tcode: `unclosed-script`,\r\n\t\tmessage: `<script> must have a closing tag`\r\n\t});\r\n\r\n\tconst source =\r\n\t\trepeat(' ', scriptStart) + parser.template.slice(scriptStart, scriptEnd);\r\n\tparser.index = scriptEnd + scriptClosingTag.length;\r\n\r\n\tlet ast;\r\n\r\n\ttry {\r\n\t\tast = acorn.parse(source);\r\n\t} catch (err) {\r\n\t\tparser.acornError(err);\r\n\t}\r\n\r\n\tast.start = scriptStart;\r\n\treturn {\r\n\t\tstart,\r\n\t\tend: parser.index,\r\n\t\tcontext: get_context(parser, attributes, start),\r\n\t\tcontent: ast,\r\n\t};\r\n}\r\n","'use strict';\n\nvar MAX_LINE_LENGTH = 100;\nvar OFFSET_CORRECTION = 60;\nvar TAB_REPLACEMENT = '    ';\n\nfunction sourceFragment(error, extraLines) {\n    function processLines(start, end) {\n        return lines.slice(start, end).map(function(line, idx) {\n            var num = String(start + idx + 1);\n\n            while (num.length < maxNumLength) {\n                num = ' ' + num;\n            }\n\n            return num + ' |' + line;\n        }).join('\\n');\n    }\n\n    var lines = error.source.split(/\\n|\\r\\n?|\\f/);\n    var line = error.line;\n    var column = error.column;\n    var startLine = Math.max(1, line - extraLines) - 1;\n    var endLine = Math.min(line + extraLines, lines.length + 1);\n    var maxNumLength = Math.max(4, String(endLine).length) + 1;\n    var cutLeft = 0;\n\n    // correct column according to replaced tab before column\n    column += (TAB_REPLACEMENT.length - 1) * (lines[line - 1].substr(0, column - 1).match(/\\t/g) || []).length;\n\n    if (column > MAX_LINE_LENGTH) {\n        cutLeft = column - OFFSET_CORRECTION + 3;\n        column = OFFSET_CORRECTION - 2;\n    }\n\n    for (var i = startLine; i <= endLine; i++) {\n        if (i >= 0 && i < lines.length) {\n            lines[i] = lines[i].replace(/\\t/g, TAB_REPLACEMENT);\n            lines[i] =\n                (cutLeft > 0 && lines[i].length > cutLeft ? '\\u2026' : '') +\n                lines[i].substr(cutLeft, MAX_LINE_LENGTH - 2) +\n                (lines[i].length > cutLeft + MAX_LINE_LENGTH - 1 ? '\\u2026' : '');\n        }\n    }\n\n    return [\n        processLines(startLine, line),\n        new Array(column + maxNumLength + 2).join('-') + '^',\n        processLines(line, endLine)\n    ].join('\\n');\n}\n\nvar CssSyntaxError = function(message, source, offset, line, column) {\n    // some VMs prevent setting line/column otherwise (iOS Safari 10 even throw an exception)\n    var error = Object.create(SyntaxError.prototype);\n\n    error.name = 'CssSyntaxError';\n    error.message = message;\n    error.stack = (new Error().stack || '').replace(/^.+\\n/, error.name + ': ' + error.message + '\\n');\n    error.source = source;\n    error.offset = offset;\n    error.line = line;\n    error.column = column;\n\n    error.sourceFragment = function(extraLines) {\n        return sourceFragment(error, isNaN(extraLines) ? 0 : extraLines);\n    };\n    Object.defineProperty(error, 'formattedMessage', {\n        get: function() {\n            return (\n                'Parse error: ' + error.message + '\\n' +\n                sourceFragment(error, 2)\n            );\n        }\n    });\n\n    // for backward capability\n    error.parseError = {\n        offset: offset,\n        line: line,\n        column: column\n    };\n\n    return error;\n};\n\nmodule.exports = CssSyntaxError;\n","'use strict';\n\n// token types (note: value shouldn't intersect with used char codes)\nvar WHITESPACE = 1;\nvar IDENTIFIER = 2;\nvar NUMBER = 3;\nvar STRING = 4;\nvar COMMENT = 5;\nvar PUNCTUATOR = 6;\nvar CDO = 7;\nvar CDC = 8;\nvar ATRULE = 14;\nvar FUNCTION = 15;\nvar URL = 16;\nvar RAW = 17;\n\nvar TAB = 9;\nvar N = 10;\nvar F = 12;\nvar R = 13;\nvar SPACE = 32;\n\nvar TYPE = {\n    WhiteSpace:   WHITESPACE,\n    Identifier:   IDENTIFIER,\n    Number:           NUMBER,\n    String:           STRING,\n    Comment:         COMMENT,\n    Punctuator:   PUNCTUATOR,\n    CDO:                 CDO,\n    CDC:                 CDC,\n    Atrule:           ATRULE,\n    Function:       FUNCTION,\n    Url:                 URL,\n    Raw:                 RAW,\n\n    ExclamationMark:      33,  // !\n    QuotationMark:        34,  // \"\n    NumberSign:           35,  // #\n    DollarSign:           36,  // $\n    PercentSign:          37,  // %\n    Ampersand:            38,  // &\n    Apostrophe:           39,  // '\n    LeftParenthesis:      40,  // (\n    RightParenthesis:     41,  // )\n    Asterisk:             42,  // *\n    PlusSign:             43,  // +\n    Comma:                44,  // ,\n    HyphenMinus:          45,  // -\n    FullStop:             46,  // .\n    Solidus:              47,  // /\n    Colon:                58,  // :\n    Semicolon:            59,  // ;\n    LessThanSign:         60,  // <\n    EqualsSign:           61,  // =\n    GreaterThanSign:      62,  // >\n    QuestionMark:         63,  // ?\n    CommercialAt:         64,  // @\n    LeftSquareBracket:    91,  // [\n    Backslash:            92,  // \\\n    RightSquareBracket:   93,  // ]\n    CircumflexAccent:     94,  // ^\n    LowLine:              95,  // _\n    GraveAccent:          96,  // `\n    LeftCurlyBracket:    123,  // {\n    VerticalLine:        124,  // |\n    RightCurlyBracket:   125,  // }\n    Tilde:               126   // ~\n};\n\nvar NAME = Object.keys(TYPE).reduce(function(result, key) {\n    result[TYPE[key]] = key;\n    return result;\n}, {});\n\n// https://drafts.csswg.org/css-syntax/#tokenizer-definitions\n// > non-ASCII code point\n// >   A code point with a value equal to or greater than U+0080 <control>\n// > name-start code point\n// >   A letter, a non-ASCII code point, or U+005F LOW LINE (_).\n// > name code point\n// >   A name-start code point, a digit, or U+002D HYPHEN-MINUS (-)\n// That means only ASCII code points has a special meaning and we a maps for 0..127 codes only\nvar SafeUint32Array = typeof Uint32Array !== 'undefined' ? Uint32Array : Array; // fallback on Array when TypedArray is not supported\nvar SYMBOL_TYPE = new SafeUint32Array(0x80);\nvar PUNCTUATION = new SafeUint32Array(0x80);\nvar STOP_URL_RAW = new SafeUint32Array(0x80);\n\nfor (var i = 0; i < SYMBOL_TYPE.length; i++) {\n    SYMBOL_TYPE[i] = IDENTIFIER;\n}\n\n// fill categories\n[\n    TYPE.ExclamationMark,    // !\n    TYPE.QuotationMark,      // \"\n    TYPE.NumberSign,         // #\n    TYPE.DollarSign,         // $\n    TYPE.PercentSign,        // %\n    TYPE.Ampersand,          // &\n    TYPE.Apostrophe,         // '\n    TYPE.LeftParenthesis,    // (\n    TYPE.RightParenthesis,   // )\n    TYPE.Asterisk,           // *\n    TYPE.PlusSign,           // +\n    TYPE.Comma,              // ,\n    TYPE.HyphenMinus,        // -\n    TYPE.FullStop,           // .\n    TYPE.Solidus,            // /\n    TYPE.Colon,              // :\n    TYPE.Semicolon,          // ;\n    TYPE.LessThanSign,       // <\n    TYPE.EqualsSign,         // =\n    TYPE.GreaterThanSign,    // >\n    TYPE.QuestionMark,       // ?\n    TYPE.CommercialAt,       // @\n    TYPE.LeftSquareBracket,  // [\n    // TYPE.Backslash,          // \\\n    TYPE.RightSquareBracket, // ]\n    TYPE.CircumflexAccent,   // ^\n    // TYPE.LowLine,            // _\n    TYPE.GraveAccent,        // `\n    TYPE.LeftCurlyBracket,   // {\n    TYPE.VerticalLine,       // |\n    TYPE.RightCurlyBracket,  // }\n    TYPE.Tilde               // ~\n].forEach(function(key) {\n    SYMBOL_TYPE[Number(key)] = PUNCTUATOR;\n    PUNCTUATION[Number(key)] = PUNCTUATOR;\n});\n\nfor (var i = 48; i <= 57; i++) {\n    SYMBOL_TYPE[i] = NUMBER;\n}\n\nSYMBOL_TYPE[SPACE] = WHITESPACE;\nSYMBOL_TYPE[TAB] = WHITESPACE;\nSYMBOL_TYPE[N] = WHITESPACE;\nSYMBOL_TYPE[R] = WHITESPACE;\nSYMBOL_TYPE[F] = WHITESPACE;\n\nSYMBOL_TYPE[TYPE.Apostrophe] = STRING;\nSYMBOL_TYPE[TYPE.QuotationMark] = STRING;\n\nSTOP_URL_RAW[SPACE] = 1;\nSTOP_URL_RAW[TAB] = 1;\nSTOP_URL_RAW[N] = 1;\nSTOP_URL_RAW[R] = 1;\nSTOP_URL_RAW[F] = 1;\nSTOP_URL_RAW[TYPE.Apostrophe] = 1;\nSTOP_URL_RAW[TYPE.QuotationMark] = 1;\nSTOP_URL_RAW[TYPE.LeftParenthesis] = 1;\nSTOP_URL_RAW[TYPE.RightParenthesis] = 1;\n\n// whitespace is punctuation ...\nPUNCTUATION[SPACE] = PUNCTUATOR;\nPUNCTUATION[TAB] = PUNCTUATOR;\nPUNCTUATION[N] = PUNCTUATOR;\nPUNCTUATION[R] = PUNCTUATOR;\nPUNCTUATION[F] = PUNCTUATOR;\n// ... hyper minus is not\nPUNCTUATION[TYPE.HyphenMinus] = 0;\n\nmodule.exports = {\n    TYPE: TYPE,\n    NAME: NAME,\n\n    SYMBOL_TYPE: SYMBOL_TYPE,\n    PUNCTUATION: PUNCTUATION,\n    STOP_URL_RAW: STOP_URL_RAW\n};\n","'use strict';\n\nvar constants = require('./const');\nvar PUNCTUATION = constants.PUNCTUATION;\nvar STOP_URL_RAW = constants.STOP_URL_RAW;\nvar TYPE = constants.TYPE;\nvar FULLSTOP = TYPE.FullStop;\nvar PLUSSIGN = TYPE.PlusSign;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar PUNCTUATOR = TYPE.Punctuator;\nvar TAB = 9;\nvar N = 10;\nvar F = 12;\nvar R = 13;\nvar SPACE = 32;\nvar BACK_SLASH = 92;\nvar E = 101; // 'e'.charCodeAt(0)\n\nfunction firstCharOffset(source) {\n    // detect BOM (https://en.wikipedia.org/wiki/Byte_order_mark)\n    if (source.charCodeAt(0) === 0xFEFF ||  // UTF-16BE\n        source.charCodeAt(0) === 0xFFFE) {  // UTF-16LE\n        return 1;\n    }\n\n    return 0;\n}\n\nfunction isHex(code) {\n    return (code >= 48 && code <= 57) || // 0 .. 9\n           (code >= 65 && code <= 70) || // A .. F\n           (code >= 97 && code <= 102);  // a .. f\n}\n\nfunction isNumber(code) {\n    return code >= 48 && code <= 57;\n}\n\nfunction isNewline(source, offset, code) {\n    if (code === N || code === F || code === R) {\n        if (code === R && offset + 1 < source.length && source.charCodeAt(offset + 1) === N) {\n            return 2;\n        }\n\n        return 1;\n    }\n\n    return 0;\n}\n\nfunction cmpChar(testStr, offset, referenceCode) {\n    var code = testStr.charCodeAt(offset);\n\n    // code.toLowerCase()\n    if (code >= 65 && code <= 90) {\n        code = code | 32;\n    }\n\n    return code === referenceCode;\n}\n\nfunction cmpStr(testStr, start, end, referenceStr) {\n    if (end - start !== referenceStr.length) {\n        return false;\n    }\n\n    if (start < 0 || end > testStr.length) {\n        return false;\n    }\n\n    for (var i = start; i < end; i++) {\n        var testCode = testStr.charCodeAt(i);\n        var refCode = referenceStr.charCodeAt(i - start);\n\n        // testStr[i].toLowerCase()\n        if (testCode >= 65 && testCode <= 90) {\n            testCode = testCode | 32;\n        }\n\n        if (testCode !== refCode) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction endsWith(testStr, referenceStr) {\n    return cmpStr(testStr, testStr.length - referenceStr.length, testStr.length, referenceStr);\n}\n\nfunction findLastNonSpaceLocation(scanner) {\n    for (var i = scanner.source.length - 1; i >= 0; i--) {\n        var code = scanner.source.charCodeAt(i);\n\n        if (code !== SPACE && code !== TAB && code !== R && code !== N && code !== F) {\n            break;\n        }\n    }\n\n    return scanner.getLocation(i + 1);\n}\n\nfunction findWhiteSpaceEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        if (code !== SPACE && code !== TAB && code !== R && code !== N && code !== F) {\n            break;\n        }\n    }\n\n    return offset;\n}\n\nfunction findCommentEnd(source, offset) {\n    var commentEnd = source.indexOf('*/', offset);\n\n    if (commentEnd === -1) {\n        return source.length;\n    }\n\n    return commentEnd + 2;\n}\n\nfunction findStringEnd(source, offset, quote) {\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        // TODO: bad string\n        if (code === BACK_SLASH) {\n            offset++;\n        } else if (code === quote) {\n            offset++;\n            break;\n        }\n    }\n\n    return offset;\n}\n\nfunction findDecimalNumberEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        if (code < 48 || code > 57) {  // not a 0 .. 9\n            break;\n        }\n    }\n\n    return offset;\n}\n\nfunction findNumberEnd(source, offset, allowFraction) {\n    var code;\n\n    offset = findDecimalNumberEnd(source, offset);\n\n    // fraction: .\\d+\n    if (allowFraction && offset + 1 < source.length && source.charCodeAt(offset) === FULLSTOP) {\n        code = source.charCodeAt(offset + 1);\n\n        if (isNumber(code)) {\n            offset = findDecimalNumberEnd(source, offset + 1);\n        }\n    }\n\n    // exponent: e[+-]\\d+\n    if (offset + 1 < source.length) {\n        if ((source.charCodeAt(offset) | 32) === E) { // case insensitive check for `e`\n            code = source.charCodeAt(offset + 1);\n\n            if (code === PLUSSIGN || code === HYPHENMINUS) {\n                if (offset + 2 < source.length) {\n                    code = source.charCodeAt(offset + 2);\n                }\n            }\n\n            if (isNumber(code)) {\n                offset = findDecimalNumberEnd(source, offset + 2);\n            }\n        }\n    }\n\n    return offset;\n}\n\n// skip escaped unicode sequence that can ends with space\n// [0-9a-f]{1,6}(\\r\\n|[ \\n\\r\\t\\f])?\nfunction findEscaseEnd(source, offset) {\n    for (var i = 0; i < 7 && offset + i < source.length; i++) {\n        var code = source.charCodeAt(offset + i);\n\n        if (i !== 6 && isHex(code)) {\n            continue;\n        }\n\n        if (i > 0) {\n            offset += i - 1 + isNewline(source, offset + i, code);\n            if (code === SPACE || code === TAB) {\n                offset++;\n            }\n        }\n\n        break;\n    }\n\n    return offset;\n}\n\nfunction findIdentifierEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        if (code === BACK_SLASH) {\n            offset = findEscaseEnd(source, offset + 1);\n        } else if (code < 0x80 && PUNCTUATION[code] === PUNCTUATOR) {\n            break;\n        }\n    }\n\n    return offset;\n}\n\nfunction findUrlRawEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        if (code === BACK_SLASH) {\n            offset = findEscaseEnd(source, offset + 1);\n        } else if (code < 0x80 && STOP_URL_RAW[code] === 1) {\n            break;\n        }\n    }\n\n    return offset;\n}\n\nmodule.exports = {\n    firstCharOffset: firstCharOffset,\n\n    isHex: isHex,\n    isNumber: isNumber,\n    isNewline: isNewline,\n\n    cmpChar: cmpChar,\n    cmpStr: cmpStr,\n    endsWith: endsWith,\n\n    findLastNonSpaceLocation: findLastNonSpaceLocation,\n    findWhiteSpaceEnd: findWhiteSpaceEnd,\n    findCommentEnd: findCommentEnd,\n    findStringEnd: findStringEnd,\n    findDecimalNumberEnd: findDecimalNumberEnd,\n    findNumberEnd: findNumberEnd,\n    findEscaseEnd: findEscaseEnd,\n    findIdentifierEnd: findIdentifierEnd,\n    findUrlRawEnd: findUrlRawEnd\n};\n","'use strict';\n\nvar CssSyntaxError = require('./error');\n\nvar constants = require('./const');\nvar TYPE = constants.TYPE;\nvar NAME = constants.NAME;\nvar SYMBOL_TYPE = constants.SYMBOL_TYPE;\n\nvar utils = require('./utils');\nvar firstCharOffset = utils.firstCharOffset;\nvar cmpStr = utils.cmpStr;\nvar isNumber = utils.isNumber;\nvar findLastNonSpaceLocation = utils.findLastNonSpaceLocation;\nvar findWhiteSpaceEnd = utils.findWhiteSpaceEnd;\nvar findCommentEnd = utils.findCommentEnd;\nvar findStringEnd = utils.findStringEnd;\nvar findNumberEnd = utils.findNumberEnd;\nvar findIdentifierEnd = utils.findIdentifierEnd;\nvar findUrlRawEnd = utils.findUrlRawEnd;\n\nvar NULL = 0;\nvar WHITESPACE = TYPE.WhiteSpace;\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBER = TYPE.Number;\nvar STRING = TYPE.String;\nvar COMMENT = TYPE.Comment;\nvar PUNCTUATOR = TYPE.Punctuator;\nvar CDO = TYPE.CDO;\nvar CDC = TYPE.CDC;\nvar ATRULE = TYPE.Atrule;\nvar FUNCTION = TYPE.Function;\nvar URL = TYPE.Url;\nvar RAW = TYPE.Raw;\n\nvar N = 10;\nvar F = 12;\nvar R = 13;\nvar STAR = TYPE.Asterisk;\nvar SLASH = TYPE.Solidus;\nvar FULLSTOP = TYPE.FullStop;\nvar PLUSSIGN = TYPE.PlusSign;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar GREATERTHANSIGN = TYPE.GreaterThanSign;\nvar LESSTHANSIGN = TYPE.LessThanSign;\nvar EXCLAMATIONMARK = TYPE.ExclamationMark;\nvar COMMERCIALAT = TYPE.CommercialAt;\nvar QUOTATIONMARK = TYPE.QuotationMark;\nvar APOSTROPHE = TYPE.Apostrophe;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\nvar RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET = TYPE.RightSquareBracket;\n\nvar MIN_BUFFER_SIZE = 16 * 1024;\nvar OFFSET_MASK = 0x00FFFFFF;\nvar TYPE_SHIFT = 24;\nvar SafeUint32Array = typeof Uint32Array !== 'undefined' ? Uint32Array : Array; // fallback on Array when TypedArray is not supported\n\nfunction computeLinesAndColumns(tokenizer, source) {\n    var sourceLength = source.length;\n    var start = firstCharOffset(source);\n    var lines = tokenizer.lines;\n    var line = tokenizer.startLine;\n    var columns = tokenizer.columns;\n    var column = tokenizer.startColumn;\n\n    if (lines === null || lines.length < sourceLength + 1) {\n        lines = new SafeUint32Array(Math.max(sourceLength + 1024, MIN_BUFFER_SIZE));\n        columns = new SafeUint32Array(lines.length);\n    }\n\n    for (var i = start; i < sourceLength; i++) {\n        var code = source.charCodeAt(i);\n\n        lines[i] = line;\n        columns[i] = column++;\n\n        if (code === N || code === R || code === F) {\n            if (code === R && i + 1 < sourceLength && source.charCodeAt(i + 1) === N) {\n                i++;\n                lines[i] = line;\n                columns[i] = column;\n            }\n\n            line++;\n            column = 1;\n        }\n    }\n\n    lines[i] = line;\n    columns[i] = column;\n\n    tokenizer.linesAnsColumnsComputed = true;\n    tokenizer.lines = lines;\n    tokenizer.columns = columns;\n}\n\nfunction tokenLayout(tokenizer, source, startPos) {\n    var sourceLength = source.length;\n    var offsetAndType = tokenizer.offsetAndType;\n    var balance = tokenizer.balance;\n    var tokenCount = 0;\n    var prevType = 0;\n    var offset = startPos;\n    var anchor = 0;\n    var balanceCloseCode = 0;\n    var balanceStart = 0;\n    var balancePrev = 0;\n\n    if (offsetAndType === null || offsetAndType.length < sourceLength + 1) {\n        offsetAndType = new SafeUint32Array(sourceLength + 1024);\n        balance = new SafeUint32Array(sourceLength + 1024);\n    }\n\n    while (offset < sourceLength) {\n        var code = source.charCodeAt(offset);\n        var type = code < 0x80 ? SYMBOL_TYPE[code] : IDENTIFIER;\n\n        balance[tokenCount] = sourceLength;\n\n        switch (type) {\n            case WHITESPACE:\n                offset = findWhiteSpaceEnd(source, offset + 1);\n                break;\n\n            case PUNCTUATOR:\n                switch (code) {\n                    case balanceCloseCode:\n                        balancePrev = balanceStart & OFFSET_MASK;\n                        balanceStart = balance[balancePrev];\n                        balanceCloseCode = balanceStart >> TYPE_SHIFT;\n                        balance[tokenCount] = balancePrev;\n                        balance[balancePrev++] = tokenCount;\n                        for (; balancePrev < tokenCount; balancePrev++) {\n                            if (balance[balancePrev] === sourceLength) {\n                                balance[balancePrev] = tokenCount;\n                            }\n                        }\n                        break;\n\n                    case LEFTSQUAREBRACKET:\n                        balance[tokenCount] = balanceStart;\n                        balanceCloseCode = RIGHTSQUAREBRACKET;\n                        balanceStart = (balanceCloseCode << TYPE_SHIFT) | tokenCount;\n                        break;\n\n                    case LEFTCURLYBRACKET:\n                        balance[tokenCount] = balanceStart;\n                        balanceCloseCode = RIGHTCURLYBRACKET;\n                        balanceStart = (balanceCloseCode << TYPE_SHIFT) | tokenCount;\n                        break;\n\n                    case LEFTPARENTHESIS:\n                        balance[tokenCount] = balanceStart;\n                        balanceCloseCode = RIGHTPARENTHESIS;\n                        balanceStart = (balanceCloseCode << TYPE_SHIFT) | tokenCount;\n                        break;\n                }\n\n                // /*\n                if (code === STAR && prevType === SLASH) {\n                    type = COMMENT;\n                    offset = findCommentEnd(source, offset + 1);\n                    tokenCount--; // rewrite prev token\n                    break;\n                }\n\n                // edge case for -.123 and +.123\n                if (code === FULLSTOP && (prevType === PLUSSIGN || prevType === HYPHENMINUS)) {\n                    if (offset + 1 < sourceLength && isNumber(source.charCodeAt(offset + 1))) {\n                        type = NUMBER;\n                        offset = findNumberEnd(source, offset + 2, false);\n                        tokenCount--; // rewrite prev token\n                        break;\n                    }\n                }\n\n                // <!--\n                if (code === EXCLAMATIONMARK && prevType === LESSTHANSIGN) {\n                    if (offset + 2 < sourceLength &&\n                        source.charCodeAt(offset + 1) === HYPHENMINUS &&\n                        source.charCodeAt(offset + 2) === HYPHENMINUS) {\n                        type = CDO;\n                        offset = offset + 3;\n                        tokenCount--; // rewrite prev token\n                        break;\n                    }\n                }\n\n                // -->\n                if (code === HYPHENMINUS && prevType === HYPHENMINUS) {\n                    if (offset + 1 < sourceLength && source.charCodeAt(offset + 1) === GREATERTHANSIGN) {\n                        type = CDC;\n                        offset = offset + 2;\n                        tokenCount--; // rewrite prev token\n                        break;\n                    }\n                }\n\n                // ident(\n                if (code === LEFTPARENTHESIS && prevType === IDENTIFIER) {\n                    offset = offset + 1;\n                    tokenCount--; // rewrite prev token\n                    balance[tokenCount] = balance[tokenCount + 1];\n                    balanceStart--;\n\n                    // 4 char length identifier and equal to `url(` (case insensitive)\n                    if (offset - anchor === 4 && cmpStr(source, anchor, offset, 'url(')) {\n                        // special case for url() because it can contain any symbols sequence with few exceptions\n                        anchor = findWhiteSpaceEnd(source, offset);\n                        code = source.charCodeAt(anchor);\n                        if (code !== LEFTPARENTHESIS &&\n                            code !== RIGHTPARENTHESIS &&\n                            code !== QUOTATIONMARK &&\n                            code !== APOSTROPHE) {\n                            // url(\n                            offsetAndType[tokenCount++] = (URL << TYPE_SHIFT) | offset;\n                            balance[tokenCount] = sourceLength;\n\n                            // ws*\n                            if (anchor !== offset) {\n                                offsetAndType[tokenCount++] = (WHITESPACE << TYPE_SHIFT) | anchor;\n                                balance[tokenCount] = sourceLength;\n                            }\n\n                            // raw\n                            type = RAW;\n                            offset = findUrlRawEnd(source, anchor);\n                        } else {\n                            type = URL;\n                        }\n                    } else {\n                        type = FUNCTION;\n                    }\n                    break;\n                }\n\n                type = code;\n                offset = offset + 1;\n                break;\n\n            case NUMBER:\n                offset = findNumberEnd(source, offset + 1, prevType !== FULLSTOP);\n\n                // merge number with a preceding dot, dash or plus\n                if (prevType === FULLSTOP ||\n                    prevType === HYPHENMINUS ||\n                    prevType === PLUSSIGN) {\n                    tokenCount--; // rewrite prev token\n                }\n\n                break;\n\n            case STRING:\n                offset = findStringEnd(source, offset + 1, code);\n                break;\n\n            default:\n                anchor = offset;\n                offset = findIdentifierEnd(source, offset);\n\n                // merge identifier with a preceding dash\n                if (prevType === HYPHENMINUS) {\n                    // rewrite prev token\n                    tokenCount--;\n                    // restore prev prev token type\n                    // for case @-prefix-ident\n                    prevType = tokenCount === 0 ? 0 : offsetAndType[tokenCount - 1] >> TYPE_SHIFT;\n                }\n\n                if (prevType === COMMERCIALAT) {\n                    // rewrite prev token and change type to <at-keyword-token>\n                    tokenCount--;\n                    type = ATRULE;\n                }\n        }\n\n        offsetAndType[tokenCount++] = (type << TYPE_SHIFT) | offset;\n        prevType = type;\n    }\n\n    // finalize arrays\n    offsetAndType[tokenCount] = offset;\n    balance[tokenCount] = sourceLength;\n    while (balanceStart !== 0) {\n        balancePrev = balanceStart & OFFSET_MASK;\n        balanceStart = balance[balancePrev];\n        balance[balancePrev] = sourceLength;\n    }\n\n    tokenizer.offsetAndType = offsetAndType;\n    tokenizer.tokenCount = tokenCount;\n    tokenizer.balance = balance;\n}\n\n//\n// tokenizer\n//\n\nvar Tokenizer = function(source, startOffset, startLine, startColumn) {\n    this.offsetAndType = null;\n    this.balance = null;\n    this.lines = null;\n    this.columns = null;\n\n    this.setSource(source, startOffset, startLine, startColumn);\n};\n\nTokenizer.prototype = {\n    setSource: function(source, startOffset, startLine, startColumn) {\n        var safeSource = String(source || '');\n        var start = firstCharOffset(safeSource);\n\n        this.source = safeSource;\n        this.firstCharOffset = start;\n        this.startOffset = typeof startOffset === 'undefined' ? 0 : startOffset;\n        this.startLine = typeof startLine === 'undefined' ? 1 : startLine;\n        this.startColumn = typeof startColumn === 'undefined' ? 1 : startColumn;\n        this.linesAnsColumnsComputed = false;\n\n        this.eof = false;\n        this.currentToken = -1;\n        this.tokenType = 0;\n        this.tokenStart = start;\n        this.tokenEnd = start;\n\n        tokenLayout(this, safeSource, start);\n        this.next();\n    },\n\n    lookupType: function(offset) {\n        offset += this.currentToken;\n\n        if (offset < this.tokenCount) {\n            return this.offsetAndType[offset] >> TYPE_SHIFT;\n        }\n\n        return NULL;\n    },\n    lookupNonWSType: function(offset) {\n        offset += this.currentToken;\n\n        for (var type; offset < this.tokenCount; offset++) {\n            type = this.offsetAndType[offset] >> TYPE_SHIFT;\n\n            if (type !== WHITESPACE) {\n                return type;\n            }\n        }\n\n        return NULL;\n    },\n    lookupValue: function(offset, referenceStr) {\n        offset += this.currentToken;\n\n        if (offset < this.tokenCount) {\n            return cmpStr(\n                this.source,\n                this.offsetAndType[offset - 1] & OFFSET_MASK,\n                this.offsetAndType[offset] & OFFSET_MASK,\n                referenceStr\n            );\n        }\n\n        return false;\n    },\n    getTokenStart: function(tokenNum) {\n        if (tokenNum === this.currentToken) {\n            return this.tokenStart;\n        }\n\n        if (tokenNum > 0) {\n            return tokenNum < this.tokenCount\n                ? this.offsetAndType[tokenNum - 1] & OFFSET_MASK\n                : this.offsetAndType[this.tokenCount] & OFFSET_MASK;\n        }\n\n        return this.firstCharOffset;\n    },\n    getOffsetExcludeWS: function() {\n        if (this.currentToken > 0) {\n            if ((this.offsetAndType[this.currentToken - 1] >> TYPE_SHIFT) === WHITESPACE) {\n                return this.currentToken > 1\n                    ? this.offsetAndType[this.currentToken - 2] & OFFSET_MASK\n                    : this.firstCharOffset;\n            }\n        }\n        return this.tokenStart;\n    },\n    getRawLength: function(startToken, endTokenType1, endTokenType2, includeTokenType2) {\n        var cursor = startToken;\n        var balanceEnd;\n\n        loop:\n        for (; cursor < this.tokenCount; cursor++) {\n            balanceEnd = this.balance[cursor];\n\n            // belance end points to offset before start\n            if (balanceEnd < startToken) {\n                break loop;\n            }\n\n            // check token is stop type\n            switch (this.offsetAndType[cursor] >> TYPE_SHIFT) {\n                case endTokenType1:\n                    break loop;\n\n                case endTokenType2:\n                    if (includeTokenType2) {\n                        cursor++;\n                    }\n                    break loop;\n\n                default:\n                    // fast forward to the end of balanced block\n                    if (this.balance[balanceEnd] === cursor) {\n                        cursor = balanceEnd;\n                    }\n            }\n\n        }\n\n        return cursor - this.currentToken;\n    },\n\n    getTokenValue: function() {\n        return this.source.substring(this.tokenStart, this.tokenEnd);\n    },\n    substrToCursor: function(start) {\n        return this.source.substring(start, this.tokenStart);\n    },\n\n    skipWS: function() {\n        for (var i = this.currentToken, skipTokenCount = 0; i < this.tokenCount; i++, skipTokenCount++) {\n            if ((this.offsetAndType[i] >> TYPE_SHIFT) !== WHITESPACE) {\n                break;\n            }\n        }\n\n        if (skipTokenCount > 0) {\n            this.skip(skipTokenCount);\n        }\n    },\n    skipSC: function() {\n        while (this.tokenType === WHITESPACE || this.tokenType === COMMENT) {\n            this.next();\n        }\n    },\n    skip: function(tokenCount) {\n        var next = this.currentToken + tokenCount;\n\n        if (next < this.tokenCount) {\n            this.currentToken = next;\n            this.tokenStart = this.offsetAndType[next - 1] & OFFSET_MASK;\n            next = this.offsetAndType[next];\n            this.tokenType = next >> TYPE_SHIFT;\n            this.tokenEnd = next & OFFSET_MASK;\n        } else {\n            this.currentToken = this.tokenCount;\n            this.next();\n        }\n    },\n    next: function() {\n        var next = this.currentToken + 1;\n\n        if (next < this.tokenCount) {\n            this.currentToken = next;\n            this.tokenStart = this.tokenEnd;\n            next = this.offsetAndType[next];\n            this.tokenType = next >> TYPE_SHIFT;\n            this.tokenEnd = next & OFFSET_MASK;\n        } else {\n            this.currentToken = this.tokenCount;\n            this.eof = true;\n            this.tokenType = NULL;\n            this.tokenStart = this.tokenEnd = this.source.length;\n        }\n    },\n\n    eat: function(tokenType) {\n        if (this.tokenType !== tokenType) {\n            var offset = this.tokenStart;\n            var message = NAME[tokenType] + ' is expected';\n\n            // tweak message and offset\n            if (tokenType === IDENTIFIER) {\n                // when identifier is expected but there is a function or url\n                if (this.tokenType === FUNCTION || this.tokenType === URL) {\n                    offset = this.tokenEnd - 1;\n                    message += ' but function found';\n                }\n            } else {\n                // when test type is part of another token show error for current position + 1\n                // e.g. eat(HYPHENMINUS) will fail on \"-foo\", but pointing on \"-\" is odd\n                if (this.source.charCodeAt(this.tokenStart) === tokenType) {\n                    offset = offset + 1;\n                }\n            }\n\n            this.error(message, offset);\n        }\n\n        this.next();\n    },\n    eatNonWS: function(tokenType) {\n        this.skipWS();\n        this.eat(tokenType);\n    },\n\n    consume: function(tokenType) {\n        var value = this.getTokenValue();\n\n        this.eat(tokenType);\n\n        return value;\n    },\n    consumeFunctionName: function() {\n        var name = this.source.substring(this.tokenStart, this.tokenEnd - 1);\n\n        this.eat(FUNCTION);\n\n        return name;\n    },\n    consumeNonWS: function(tokenType) {\n        this.skipWS();\n\n        return this.consume(tokenType);\n    },\n\n    expectIdentifier: function(name) {\n        if (this.tokenType !== IDENTIFIER || cmpStr(this.source, this.tokenStart, this.tokenEnd, name) === false) {\n            this.error('Identifier `' + name + '` is expected');\n        }\n\n        this.next();\n    },\n\n    getLocation: function(offset, filename) {\n        if (!this.linesAnsColumnsComputed) {\n            computeLinesAndColumns(this, this.source);\n        }\n\n        return {\n            source: filename,\n            offset: this.startOffset + offset,\n            line: this.lines[offset],\n            column: this.columns[offset]\n        };\n    },\n\n    getLocationRange: function(start, end, filename) {\n        if (!this.linesAnsColumnsComputed) {\n            computeLinesAndColumns(this, this.source);\n        }\n\n        return {\n            source: filename,\n            start: {\n                offset: this.startOffset + start,\n                line: this.lines[start],\n                column: this.columns[start]\n            },\n            end: {\n                offset: this.startOffset + end,\n                line: this.lines[end],\n                column: this.columns[end]\n            }\n        };\n    },\n\n    error: function(message, offset) {\n        var location = typeof offset !== 'undefined' && offset < this.source.length\n            ? this.getLocation(offset)\n            : this.eof\n                ? findLastNonSpaceLocation(this)\n                : this.getLocation(this.tokenStart);\n\n        throw new CssSyntaxError(\n            message || 'Unexpected input',\n            this.source,\n            location.offset,\n            location.line,\n            location.column\n        );\n    },\n\n    dump: function() {\n        var offset = 0;\n\n        return Array.prototype.slice.call(this.offsetAndType, 0, this.tokenCount).map(function(item, idx) {\n            var start = offset;\n            var end = item & OFFSET_MASK;\n\n            offset = end;\n\n            return {\n                idx: idx,\n                type: NAME[item >> TYPE_SHIFT],\n                chunk: this.source.substring(start, end),\n                balance: this.balance[idx]\n            };\n        }, this);\n    }\n};\n\n// extend with error class\nTokenizer.CssSyntaxError = CssSyntaxError;\n\n// extend tokenizer with constants\nObject.keys(constants).forEach(function(key) {\n    Tokenizer[key] = constants[key];\n});\n\n// extend tokenizer with static methods from utils\nObject.keys(utils).forEach(function(key) {\n    Tokenizer[key] = utils[key];\n});\n\n// warm up tokenizer to elimitate code branches that never execute\n// fix soft deoptimizations (insufficient type feedback)\nnew Tokenizer('\\n\\r\\r\\n\\f<!---->//\"\"\\'\\'/*\\r\\n\\f*/1a;.\\\\31\\t\\+2{url(a);func();+1.2e3 -.4e-5 .6e+7}').getLocation();\n\nmodule.exports = Tokenizer;\n","module.exports = require('./Tokenizer');\n","'use strict';\n\n//\n//            item        item        item        item\n//          /------\\    /------\\    /------\\    /------\\\n//          | data |    | data |    | data |    | data |\n//  null <--+-prev |<---+-prev |<---+-prev |<---+-prev |\n//          | next-+--->| next-+--->| next-+--->| next-+--> null\n//          \\------/    \\------/    \\------/    \\------/\n//             ^                                    ^\n//             |                list                |\n//             |              /------\\              |\n//             \\--------------+-head |              |\n//                            | tail-+--------------/\n//                            \\------/\n//\n\nfunction createItem(data) {\n    return {\n        prev: null,\n        next: null,\n        data: data\n    };\n}\n\nvar cursors = null;\nvar List = function() {\n    this.cursor = null;\n    this.head = null;\n    this.tail = null;\n};\n\nList.createItem = createItem;\nList.prototype.createItem = createItem;\n\nList.prototype.getSize = function() {\n    var size = 0;\n    var cursor = this.head;\n\n    while (cursor) {\n        size++;\n        cursor = cursor.next;\n    }\n\n    return size;\n};\n\nList.prototype.fromArray = function(array) {\n    var cursor = null;\n\n    this.head = null;\n\n    for (var i = 0; i < array.length; i++) {\n        var item = createItem(array[i]);\n\n        if (cursor !== null) {\n            cursor.next = item;\n        } else {\n            this.head = item;\n        }\n\n        item.prev = cursor;\n        cursor = item;\n    }\n\n    this.tail = cursor;\n\n    return this;\n};\n\nList.prototype.toArray = function() {\n    var cursor = this.head;\n    var result = [];\n\n    while (cursor) {\n        result.push(cursor.data);\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.toJSON = List.prototype.toArray;\n\nList.prototype.isEmpty = function() {\n    return this.head === null;\n};\n\nList.prototype.first = function() {\n    return this.head && this.head.data;\n};\n\nList.prototype.last = function() {\n    return this.tail && this.tail.data;\n};\n\nfunction allocateCursor(node, prev, next) {\n    var cursor;\n\n    if (cursors !== null) {\n        cursor = cursors;\n        cursors = cursors.cursor;\n        cursor.prev = prev;\n        cursor.next = next;\n        cursor.cursor = node.cursor;\n    } else {\n        cursor = {\n            prev: prev,\n            next: next,\n            cursor: node.cursor\n        };\n    }\n\n    node.cursor = cursor;\n\n    return cursor;\n}\n\nfunction releaseCursor(node) {\n    var cursor = node.cursor;\n\n    node.cursor = cursor.cursor;\n    cursor.prev = null;\n    cursor.next = null;\n    cursor.cursor = cursors;\n    cursors = cursor;\n}\n\nList.prototype.each = function(fn, context) {\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, null, this.head);\n\n    while (cursor.next !== null) {\n        item = cursor.next;\n        cursor.next = item.next;\n\n        fn.call(context, item.data, item, this);\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.eachRight = function(fn, context) {\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, this.tail, null);\n\n    while (cursor.prev !== null) {\n        item = cursor.prev;\n        cursor.prev = item.prev;\n\n        fn.call(context, item.data, item, this);\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.nextUntil = function(start, fn, context) {\n    if (start === null) {\n        return;\n    }\n\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, null, start);\n\n    while (cursor.next !== null) {\n        item = cursor.next;\n        cursor.next = item.next;\n\n        if (fn.call(context, item.data, item, this)) {\n            break;\n        }\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.prevUntil = function(start, fn, context) {\n    if (start === null) {\n        return;\n    }\n\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, start, null);\n\n    while (cursor.prev !== null) {\n        item = cursor.prev;\n        cursor.prev = item.prev;\n\n        if (fn.call(context, item.data, item, this)) {\n            break;\n        }\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.some = function(fn, context) {\n    var cursor = this.head;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    while (cursor !== null) {\n        if (fn.call(context, cursor.data, cursor, this)) {\n            return true;\n        }\n\n        cursor = cursor.next;\n    }\n\n    return false;\n};\n\nList.prototype.map = function(fn, context) {\n    var result = [];\n    var cursor = this.head;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    while (cursor !== null) {\n        result.push(fn.call(context, cursor.data, cursor, this));\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.clear = function() {\n    this.head = null;\n    this.tail = null;\n};\n\nList.prototype.copy = function() {\n    var result = new List();\n    var cursor = this.head;\n\n    while (cursor !== null) {\n        result.insert(createItem(cursor.data));\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.updateCursors = function(prevOld, prevNew, nextOld, nextNew) {\n    var cursor = this.cursor;\n\n    while (cursor !== null) {\n        if (cursor.prev === prevOld) {\n            cursor.prev = prevNew;\n        }\n\n        if (cursor.next === nextOld) {\n            cursor.next = nextNew;\n        }\n\n        cursor = cursor.cursor;\n    }\n};\n\nList.prototype.prepend = function(item) {\n    //      head\n    //    ^\n    // item\n    this.updateCursors(null, item, this.head, item);\n\n    // insert to the beginning of the list\n    if (this.head !== null) {\n        // new item <- first item\n        this.head.prev = item;\n\n        // new item -> first item\n        item.next = this.head;\n    } else {\n        // if list has no head, then it also has no tail\n        // in this case tail points to the new item\n        this.tail = item;\n    }\n\n    // head always points to new item\n    this.head = item;\n\n    return this;\n};\n\nList.prototype.prependData = function(data) {\n    return this.prepend(createItem(data));\n};\n\nList.prototype.append = function(item) {\n    // tail\n    //      ^\n    //      item\n    this.updateCursors(this.tail, item, null, item);\n\n    // insert to the ending of the list\n    if (this.tail !== null) {\n        // last item -> new item\n        this.tail.next = item;\n\n        // last item <- new item\n        item.prev = this.tail;\n    } else {\n        // if list has no tail, then it also has no head\n        // in this case head points to new item\n        this.head = item;\n    }\n\n    // tail always points to new item\n    this.tail = item;\n\n    return this;\n};\n\nList.prototype.appendData = function(data) {\n    return this.append(createItem(data));\n};\n\nList.prototype.insert = function(item, before) {\n    if (before !== undefined && before !== null) {\n        // prev   before\n        //      ^\n        //     item\n        this.updateCursors(before.prev, item, before, item);\n\n        if (before.prev === null) {\n            // insert to the beginning of list\n            if (this.head !== before) {\n                throw new Error('before doesn\\'t belong to list');\n            }\n\n            // since head points to before therefore list doesn't empty\n            // no need to check tail\n            this.head = item;\n            before.prev = item;\n            item.next = before;\n\n            this.updateCursors(null, item);\n        } else {\n\n            // insert between two items\n            before.prev.next = item;\n            item.prev = before.prev;\n\n            before.prev = item;\n            item.next = before;\n        }\n    } else {\n        this.append(item);\n    }\n};\n\nList.prototype.insertData = function(data, before) {\n    this.insert(createItem(data), before);\n};\n\nList.prototype.remove = function(item) {\n    //      item\n    //       ^\n    // prev     next\n    this.updateCursors(item, item.prev, item, item.next);\n\n    if (item.prev !== null) {\n        item.prev.next = item.next;\n    } else {\n        if (this.head !== item) {\n            throw new Error('item doesn\\'t belong to list');\n        }\n\n        this.head = item.next;\n    }\n\n    if (item.next !== null) {\n        item.next.prev = item.prev;\n    } else {\n        if (this.tail !== item) {\n            throw new Error('item doesn\\'t belong to list');\n        }\n\n        this.tail = item.prev;\n    }\n\n    item.prev = null;\n    item.next = null;\n\n    return item;\n};\n\nList.prototype.appendList = function(list) {\n    // ignore empty lists\n    if (list.head === null) {\n        return;\n    }\n\n    this.updateCursors(this.tail, list.tail, null, list.head);\n\n    // insert to end of the list\n    if (this.tail !== null) {\n        // if destination list has a tail, then it also has a head,\n        // but head doesn't change\n\n        // dest tail -> source head\n        this.tail.next = list.head;\n\n        // dest tail <- source head\n        list.head.prev = this.tail;\n    } else {\n        // if list has no a tail, then it also has no a head\n        // in this case points head to new item\n        this.head = list.head;\n    }\n\n    // tail always start point to new item\n    this.tail = list.tail;\n\n    list.head = null;\n    list.tail = null;\n};\n\nList.prototype.insertList = function(list, before) {\n    if (before !== undefined && before !== null) {\n        // ignore empty lists\n        if (list.head === null) {\n            return;\n        }\n\n        this.updateCursors(before.prev, list.tail, before, list.head);\n\n        // insert in the middle of dist list\n        if (before.prev !== null) {\n            // before.prev <-> list.head\n            before.prev.next = list.head;\n            list.head.prev = before.prev;\n        } else {\n            this.head = list.head;\n        }\n\n        before.prev = list.tail;\n        list.tail.next = before;\n\n        list.head = null;\n        list.tail = null;\n    } else {\n        this.appendList(list);\n    }\n};\n\nList.prototype.replace = function(oldItem, newItemOrList) {\n    if ('head' in newItemOrList) {\n        this.insertList(newItemOrList, oldItem);\n    } else {\n        this.insert(newItemOrList, oldItem);\n    }\n    this.remove(oldItem);\n};\n\nmodule.exports = List;\n","var List = require('../utils/list');\nvar TYPE = require('../tokenizer').TYPE;\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\n\nmodule.exports = function readSequence(recognizer) {\n    var children = new List();\n    var child = null;\n    var context = {\n        recognizer: recognizer,\n        space: null,\n        ignoreWS: false,\n        ignoreWSAfter: false\n    };\n\n    this.scanner.skipSC();\n\n    while (!this.scanner.eof) {\n        switch (this.scanner.tokenType) {\n            case COMMENT:\n                this.scanner.next();\n                continue;\n\n            case WHITESPACE:\n                if (context.ignoreWS) {\n                    this.scanner.next();\n                } else {\n                    context.space = this.WhiteSpace();\n                }\n                continue;\n        }\n\n        child = recognizer.getNode.call(this, context);\n\n        if (child === undefined) {\n            break;\n        }\n\n        if (context.space !== null) {\n            children.appendData(context.space);\n            context.space = null;\n        }\n\n        children.appendData(child);\n\n        if (context.ignoreWSAfter) {\n            context.ignoreWSAfter = false;\n            context.ignoreWS = true;\n        } else {\n            context.ignoreWS = false;\n        }\n    }\n\n    return children;\n};\n","'use strict';\n\nvar Tokenizer = require('../tokenizer');\nvar sequence = require('./sequence');\nvar noop = function() {};\n\nfunction createParseContext(name) {\n    return function() {\n        return this[name]();\n    };\n}\n\nfunction processConfig(config) {\n    var parserConfig = {\n        context: {},\n        scope: {},\n        atrule: {},\n        pseudo: {}\n    };\n\n    if (config.parseContext) {\n        for (var name in config.parseContext) {\n            switch (typeof config.parseContext[name]) {\n                case 'function':\n                    parserConfig.context[name] = config.parseContext[name];\n                    break;\n\n                case 'string':\n                    parserConfig.context[name] = createParseContext(config.parseContext[name]);\n                    break;\n            }\n        }\n    }\n\n    if (config.scope) {\n        for (var name in config.scope) {\n            parserConfig.scope[name] = config.scope[name];\n        }\n    }\n\n    if (config.atrule) {\n        for (var name in config.atrule) {\n            var atrule = config.atrule[name];\n\n            if (atrule.parse) {\n                parserConfig.atrule[name] = atrule.parse;\n            }\n        }\n    }\n\n    if (config.pseudo) {\n        for (var name in config.pseudo) {\n            var pseudo = config.pseudo[name];\n\n            if (pseudo.parse) {\n                parserConfig.pseudo[name] = pseudo.parse;\n            }\n        }\n    }\n\n    if (config.node) {\n        for (var name in config.node) {\n            parserConfig[name] = config.node[name].parse;\n        }\n    }\n\n    return parserConfig;\n}\n\nmodule.exports = function createParser(config) {\n    var parser = {\n        scanner: new Tokenizer(),\n        filename: '<unknown>',\n        needPositions: false,\n        tolerant: false,\n        onParseError: noop,\n        parseAtruleExpression: true,\n        parseSelector: true,\n        parseValue: true,\n        parseCustomProperty: false,\n\n        readSequence: sequence,\n\n        tolerantParse: function(consumer, fallback) {\n            if (this.tolerant) {\n                var start = this.scanner.currentToken;\n\n                try {\n                    return consumer.call(this);\n                } catch (e) {\n                    this.onParseError(e);\n                    return fallback.call(this, start);\n                }\n            } else {\n                return consumer.call(this);\n            }\n        },\n\n        getLocation: function(start, end) {\n            if (this.needPositions) {\n                return this.scanner.getLocationRange(\n                    start,\n                    end,\n                    this.filename\n                );\n            }\n\n            return null;\n        },\n        getLocationFromList: function(list) {\n            if (this.needPositions) {\n                return this.scanner.getLocationRange(\n                    list.head !== null ? list.first().loc.start.offset - this.scanner.startOffset : this.scanner.tokenStart,\n                    list.head !== null ? list.last().loc.end.offset - this.scanner.startOffset : this.scanner.tokenStart,\n                    this.filename\n                );\n            }\n\n            return null;\n        }\n    };\n\n    config = processConfig(config || {});\n    for (var key in config) {\n        parser[key] = config[key];\n    }\n\n    return function(source, options) {\n        options = options || {};\n\n        var context = options.context || 'default';\n        var ast;\n\n        parser.scanner.setSource(source, options.offset, options.line, options.column);\n        parser.filename = options.filename || '<unknown>';\n        parser.needPositions = Boolean(options.positions);\n        parser.tolerant = Boolean(options.tolerant);\n        parser.onParseError = typeof options.onParseError === 'function' ? options.onParseError : noop;\n        parser.parseAtruleExpression = 'parseAtruleExpression' in options ? Boolean(options.parseAtruleExpression) : true;\n        parser.parseSelector = 'parseSelector' in options ? Boolean(options.parseSelector) : true;\n        parser.parseValue = 'parseValue' in options ? Boolean(options.parseValue) : true;\n        parser.parseCustomProperty = 'parseCustomProperty' in options ? Boolean(options.parseCustomProperty) : false;\n\n        if (!parser.context.hasOwnProperty(context)) {\n            throw new Error('Unknown context `' + context + '`');\n        }\n\n        ast = parser.context[context].call(parser, options);\n\n        if (!parser.scanner.eof) {\n            parser.scanner.error();\n        }\n\n        // console.log(JSON.stringify(ast, null, 4));\n        return ast;\n    };\n};\n","var cmpChar = require('../../tokenizer').cmpChar;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar STRING = TYPE.String;\nvar NUMBER = TYPE.Number;\nvar FUNCTION = TYPE.Function;\nvar URL = TYPE.Url;\nvar NUMBERSIGN = TYPE.NumberSign;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar PLUSSIGN = TYPE.PlusSign;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar COMMA = TYPE.Comma;\nvar SOLIDUS = TYPE.Solidus;\nvar ASTERISK = TYPE.Asterisk;\nvar PERCENTSIGN = TYPE.PercentSign;\nvar BACKSLASH = TYPE.Backslash;\nvar U = 117; // 'u'.charCodeAt(0)\n\nmodule.exports = function defaultRecognizer(context) {\n    switch (this.scanner.tokenType) {\n        case NUMBERSIGN:\n            return this.HexColor();\n\n        case COMMA:\n            context.space = null;\n            context.ignoreWSAfter = true;\n            return this.Operator();\n\n        case SOLIDUS:\n        case ASTERISK:\n        case PLUSSIGN:\n        case HYPHENMINUS:\n            return this.Operator();\n\n        case LEFTPARENTHESIS:\n            return this.Parentheses(this.readSequence, context.recognizer);\n\n        case LEFTSQUAREBRACKET:\n            return this.Brackets(this.readSequence, context.recognizer);\n\n        case STRING:\n            return this.String();\n\n        case NUMBER:\n            switch (this.scanner.lookupType(1)) {\n                case PERCENTSIGN:\n                    return this.Percentage();\n\n                case IDENTIFIER:\n                    // edge case: number with folowing \\0 and \\9 hack shouldn't to be a Dimension\n                    if (cmpChar(this.scanner.source, this.scanner.tokenEnd, BACKSLASH)) {\n                        return this.Number();\n                    } else {\n                        return this.Dimension();\n                    }\n\n                default:\n                    return this.Number();\n            }\n\n        case FUNCTION:\n            return this.Function(this.readSequence, context.recognizer);\n\n        case URL:\n            return this.Url();\n\n        case IDENTIFIER:\n            // check for unicode range, it should start with u+ or U+\n            if (cmpChar(this.scanner.source, this.scanner.tokenStart, U) &&\n                cmpChar(this.scanner.source, this.scanner.tokenStart + 1, PLUSSIGN)) {\n                return this.UnicodeRange();\n            } else {\n                return this.Identifier();\n            }\n    }\n};\n","module.exports = {\n    getNode: require('./default')\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBER = TYPE.Number;\nvar NUMBERSIGN = TYPE.NumberSign;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar PLUSSIGN = TYPE.PlusSign;\nvar SOLIDUS = TYPE.Solidus;\nvar ASTERISK = TYPE.Asterisk;\nvar FULLSTOP = TYPE.FullStop;\nvar COLON = TYPE.Colon;\nvar GREATERTHANSIGN = TYPE.GreaterThanSign;\nvar VERTICALLINE = TYPE.VerticalLine;\nvar TILDE = TYPE.Tilde;\n\nfunction getNode(context) {\n    switch (this.scanner.tokenType) {\n        case PLUSSIGN:\n        case GREATERTHANSIGN:\n        case TILDE:\n            context.space = null;\n            context.ignoreWSAfter = true;\n            return this.Combinator();\n\n        case SOLIDUS:  // /deep/\n            return this.Combinator();\n\n        case FULLSTOP:\n            return this.ClassSelector();\n\n        case LEFTSQUAREBRACKET:\n            return this.AttributeSelector();\n\n        case NUMBERSIGN:\n            return this.IdSelector();\n\n        case COLON:\n            if (this.scanner.lookupType(1) === COLON) {\n                return this.PseudoElementSelector();\n            } else {\n                return this.PseudoClassSelector();\n            }\n\n        case IDENTIFIER:\n        case ASTERISK:\n        case VERTICALLINE:\n            return this.TypeSelector();\n\n        case NUMBER:\n            return this.Percentage();\n    }\n};\n\nmodule.exports = {\n    getNode: getNode\n};\n","var List = require('../../utils/list');\n\n// https://drafts.csswg.org/css-images-4/#element-notation\n// https://developer.mozilla.org/en-US/docs/Web/CSS/element\nmodule.exports = function() {\n    this.scanner.skipSC();\n\n    var id = this.IdSelector();\n\n    this.scanner.skipSC();\n\n    return new List().appendData(\n        id\n    );\n};\n","var List = require('../../utils/list');\n\n// legacy IE function\n// expression '(' raw ')'\nmodule.exports = function() {\n    return new List().appendData(\n        this.Raw(this.scanner.currentToken, 0, 0, false, false)\n    );\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar COMMA = TYPE.Comma;\nvar SEMICOLON = TYPE.Semicolon;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar EXCLAMATIONMARK = TYPE.ExclamationMark;\n\n// var '(' ident (',' <value>? )? ')'\nmodule.exports = function() {\n    var children = new List();\n\n    this.scanner.skipSC();\n\n    var identStart = this.scanner.tokenStart;\n\n    this.scanner.eat(HYPHENMINUS);\n    if (this.scanner.source.charCodeAt(this.scanner.tokenStart) !== HYPHENMINUS) {\n        this.scanner.error('HyphenMinus is expected');\n    }\n    this.scanner.eat(IDENTIFIER);\n\n    children.appendData({\n        type: 'Identifier',\n        loc: this.getLocation(identStart, this.scanner.tokenStart),\n        name: this.scanner.substrToCursor(identStart)\n    });\n\n    this.scanner.skipSC();\n\n    if (this.scanner.tokenType === COMMA) {\n        children.appendData(this.Operator());\n        children.appendData(this.parseCustomProperty\n            ? this.Value(null)\n            : this.Raw(this.scanner.currentToken, EXCLAMATIONMARK, SEMICOLON, false, false)\n        );\n    }\n\n    return children;\n};\n","module.exports = {\n    getNode: require('./default'),\n    '-moz-element': require('../function/element'),\n    'element': require('../function/element'),\n    'expression': require('../function/expression'),\n    'var': require('../function/var')\n};\n","module.exports = {\n    AtruleExpression: require('./atruleExpression'),\n    Selector: require('./selector'),\n    Value: require('./value')\n};\n","module.exports = {\n    parse: {\n        expression: null,\n        block: function() {\n            return this.Block(this.Declaration);\n        }\n    }\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar STRING = TYPE.String;\nvar IDENTIFIER = TYPE.Identifier;\nvar URL = TYPE.Url;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\n\nmodule.exports = {\n    parse: {\n        expression: function() {\n            var children = new List();\n\n            this.scanner.skipSC();\n\n            switch (this.scanner.tokenType) {\n                case STRING:\n                    children.appendData(this.String());\n                    break;\n\n                case URL:\n                    children.appendData(this.Url());\n                    break;\n\n                default:\n                    this.scanner.error('String or url() is expected');\n            }\n\n            if (this.scanner.lookupNonWSType(0) === IDENTIFIER ||\n                this.scanner.lookupNonWSType(0) === LEFTPARENTHESIS) {\n                children.appendData(this.WhiteSpace());\n                children.appendData(this.MediaQueryList());\n            }\n\n            return children;\n        },\n        block: null\n    }\n};\n","var List = require('../../utils/list');\n\nmodule.exports = {\n    parse: {\n        expression: function() {\n            return new List().appendData(\n                this.MediaQueryList()\n            );\n        },\n        block: function() {\n            return this.Block(this.Rule);\n        }\n    }\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\n\nmodule.exports = {\n    parse: {\n        expression: function() {\n            if (this.scanner.lookupNonWSType(0) === LEFTCURLYBRACKET) {\n                return null;\n            }\n\n            return new List().appendData(\n                this.SelectorList()\n            );\n        },\n        block: function() {\n            return this.Block(this.Declaration);\n        }\n    }\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENTIFIER = TYPE.Identifier;\nvar FUNCTION = TYPE.Function;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar COLON = TYPE.Colon;\n\nfunction consumeRaw() {\n    return new List().appendData(\n        this.Raw(this.scanner.currentToken, 0, 0, false, false)\n    );\n}\n\nfunction parentheses() {\n    var index = 0;\n\n    this.scanner.skipSC();\n\n    // TODO: make it simplier\n    if (this.scanner.tokenType === IDENTIFIER) {\n        index = 1;\n    } else if (this.scanner.tokenType === HYPHENMINUS &&\n               this.scanner.lookupType(1) === IDENTIFIER) {\n        index = 2;\n    }\n\n    if (index !== 0 && this.scanner.lookupNonWSType(index) === COLON) {\n        return new List().appendData(\n            this.Declaration()\n        );\n    }\n\n    return readSequence.call(this);\n}\n\nfunction readSequence() {\n    var children = new List();\n    var space = null;\n    var child;\n\n    this.scanner.skipSC();\n\n    scan:\n    while (!this.scanner.eof) {\n        switch (this.scanner.tokenType) {\n            case WHITESPACE:\n                space = this.WhiteSpace();\n                continue;\n\n            case COMMENT:\n                this.scanner.next();\n                continue;\n\n            case FUNCTION:\n                child = this.Function(consumeRaw, this.scope.AtruleExpression);\n                break;\n\n            case IDENTIFIER:\n                child = this.Identifier();\n                break;\n\n            case LEFTPARENTHESIS:\n                child = this.Parentheses(parentheses, this.scope.AtruleExpression);\n                break;\n\n            default:\n                break scan;\n        }\n\n        if (space !== null) {\n            children.appendData(space);\n            space = null;\n        }\n\n        children.appendData(child);\n    }\n\n    return children;\n}\n\nmodule.exports = {\n    parse: {\n        expression: function() {\n            var children = readSequence.call(this);\n\n            if (children.isEmpty()) {\n                this.scanner.error('Condition is expected');\n            }\n\n            return children;\n        },\n        block: function() {\n            return this.Block(this.Rule);\n        }\n    }\n};\n","module.exports = {\n    'font-face': require('./font-face'),\n    'import': require('./import'),\n    'media': require('./media'),\n    'page': require('./page'),\n    'supports': require('./supports')\n};\n","var List = require('../../utils/list');\n\nmodule.exports = {\n    parse: function() {\n        return new List().appendData(\n            this.Identifier()\n        );\n    }\n};\n","var List = require('../../utils/list');\n\nmodule.exports = {\n    parse: function() {\n        return new List().appendData(\n            this.SelectorList()\n        );\n    }\n};\n","var List = require('../../utils/list');\n\nmodule.exports = {\n    parse: function() {\n        return new List().appendData(\n            this.Identifier()\n        );\n    }\n};\n","var List = require('../../../utils/list');\n\nmodule.exports = {\n    parse: function selectorList() {\n        return new List().appendData(\n            this.SelectorList()\n        );\n    }\n};\n","module.exports = require('./common/selectorList');\n","module.exports = require('./common/selectorList');\n","var List = require('../../../utils/list');\nvar ALLOW_OF_CLAUSE = true;\n\nmodule.exports = {\n    parse: function() {\n        return new List().appendData(\n            this.Nth(ALLOW_OF_CLAUSE)\n        );\n    }\n};\n","module.exports = require('./common/nthWithOfClause');\n","module.exports = require('./common/nthWithOfClause');\n","var List = require('../../../utils/list');\nvar DISALLOW_OF_CLAUSE = false;\n\nmodule.exports = {\n    parse: function nth() {\n        return new List().appendData(\n            this.Nth(DISALLOW_OF_CLAUSE)\n        );\n    }\n};\n","module.exports = require('./common/nth');\n","module.exports = require('./common/nth');\n","var List = require('../../utils/list');\n\nmodule.exports = {\n    parse: function compoundSelector() {\n        return new List().appendData(\n            this.Selector()\n        );\n    }\n};\n","module.exports = {\n    'dir': require('./dir'),\n    'has': require('./has'),\n    'lang': require('./lang'),\n    'matches': require('./matches'),\n    'not': require('./not'),\n    'nth-child': require('./nth-child'),\n    'nth-last-child': require('./nth-last-child'),\n    'nth-last-of-type': require('./nth-last-of-type'),\n    'nth-of-type': require('./nth-of-type'),\n    'slotted': require('./slotted')\n};\n","var cmpChar = require('../../tokenizer').cmpChar;\nvar isNumber = require('../../tokenizer').isNumber;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBER = TYPE.Number;\nvar PLUSSIGN = TYPE.PlusSign;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar N = 110; // 'n'.charCodeAt(0)\nvar DISALLOW_SIGN = true;\nvar ALLOW_SIGN = false;\n\nfunction checkTokenIsInteger(scanner, disallowSign) {\n    var pos = scanner.tokenStart;\n\n    if (scanner.source.charCodeAt(pos) === PLUSSIGN ||\n        scanner.source.charCodeAt(pos) === HYPHENMINUS) {\n        if (disallowSign) {\n            scanner.error();\n        }\n        pos++;\n    }\n\n    for (; pos < scanner.tokenEnd; pos++) {\n        if (!isNumber(scanner.source.charCodeAt(pos))) {\n            scanner.error('Unexpected input', pos);\n        }\n    }\n}\n\n// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\nmodule.exports = {\n    name: 'AnPlusB',\n    structure: {\n        a: [String, null],\n        b: [String, null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var end = start;\n        var prefix = '';\n        var a = null;\n        var b = null;\n\n        if (this.scanner.tokenType === NUMBER ||\n            this.scanner.tokenType === PLUSSIGN) {\n            checkTokenIsInteger(this.scanner, ALLOW_SIGN);\n            prefix = this.scanner.getTokenValue();\n            this.scanner.next();\n            end = this.scanner.tokenStart;\n        }\n\n        if (this.scanner.tokenType === IDENTIFIER) {\n            var bStart = this.scanner.tokenStart;\n\n            if (cmpChar(this.scanner.source, bStart, HYPHENMINUS)) {\n                if (prefix === '') {\n                    prefix = '-';\n                    bStart++;\n                } else {\n                    this.scanner.error('Unexpected hyphen minus');\n                }\n            }\n\n            if (!cmpChar(this.scanner.source, bStart, N)) {\n                this.scanner.error();\n            }\n\n            a = prefix === ''  ? '1'  :\n                prefix === '+' ? '+1' :\n                prefix === '-' ? '-1' :\n                prefix;\n\n            var len = this.scanner.tokenEnd - bStart;\n            if (len > 1) {\n                // ..n-..\n                if (this.scanner.source.charCodeAt(bStart + 1) !== HYPHENMINUS) {\n                    this.scanner.error('Unexpected input', bStart + 1);\n                }\n\n                if (len > 2) {\n                    // ..n-{number}..\n                    this.scanner.tokenStart = bStart + 2;\n                } else {\n                    // ..n- {number}\n                    this.scanner.next();\n                    this.scanner.skipSC();\n                }\n\n                checkTokenIsInteger(this.scanner, DISALLOW_SIGN);\n                b = '-' + this.scanner.getTokenValue();\n                this.scanner.next();\n                end = this.scanner.tokenStart;\n            } else {\n                prefix = '';\n                this.scanner.next();\n                end = this.scanner.tokenStart;\n                this.scanner.skipSC();\n\n                if (this.scanner.tokenType === HYPHENMINUS ||\n                    this.scanner.tokenType === PLUSSIGN) {\n                    prefix = this.scanner.getTokenValue();\n                    this.scanner.next();\n                    this.scanner.skipSC();\n                }\n\n                if (this.scanner.tokenType === NUMBER) {\n                    checkTokenIsInteger(this.scanner, prefix !== '');\n\n                    if (!isNumber(this.scanner.source.charCodeAt(this.scanner.tokenStart))) {\n                        prefix = this.scanner.source.charAt(this.scanner.tokenStart);\n                        this.scanner.tokenStart++;\n                    }\n\n                    if (prefix === '') {\n                        // should be an operator before number\n                        this.scanner.error();\n                    } else if (prefix === '+') {\n                        // plus is using by default\n                        prefix = '';\n                    }\n\n                    b = prefix + this.scanner.getTokenValue();\n\n                    this.scanner.next();\n                    end = this.scanner.tokenStart;\n                } else {\n                    if (prefix) {\n                        this.scanner.eat(NUMBER);\n                    }\n                }\n            }\n        } else {\n            if (prefix === '' || prefix === '+') { // no number\n                this.scanner.error(\n                    'Number or identifier is expected',\n                    this.scanner.tokenStart + (\n                        this.scanner.tokenType === PLUSSIGN ||\n                        this.scanner.tokenType === HYPHENMINUS\n                    )\n                );\n            }\n\n            b = prefix;\n        }\n\n        return {\n            type: 'AnPlusB',\n            loc: this.getLocation(start, end),\n            a: a,\n            b: b\n        };\n    },\n    generate: function(processChunk, node) {\n        var a = node.a !== null && node.a !== undefined;\n        var b = node.b !== null && node.b !== undefined;\n\n        if (a) {\n            processChunk(\n                node.a === '+1' ? '+n' :\n                node.a ===  '1' ?  'n' :\n                node.a === '-1' ? '-n' :\n                node.a + 'n'\n            );\n\n            if (b) {\n                b = String(node.b);\n                if (b.charAt(0) === '-' || b.charAt(0) === '+') {\n                    processChunk(b.charAt(0));\n                    processChunk(b.substr(1));\n                } else {\n                    processChunk('+');\n                    processChunk(b);\n                }\n            }\n        } else {\n            processChunk(String(node.b));\n        }\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar ATRULE = TYPE.Atrule;\nvar SEMICOLON = TYPE.Semicolon;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\nvar RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;\n\nfunction isBlockAtrule() {\n    for (var offset = 1, type; type = this.scanner.lookupType(offset); offset++) {\n        if (type === RIGHTCURLYBRACKET) {\n            return true;\n        }\n\n        if (type === LEFTCURLYBRACKET ||\n            type === ATRULE) {\n            return false;\n        }\n    }\n\n    this.scanner.skip(offset);\n    this.scanner.eat(RIGHTCURLYBRACKET);\n}\n\nmodule.exports = {\n    name: 'Atrule',\n    structure: {\n        name: String,\n        expression: ['AtruleExpression', null],\n        block: ['Block', null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var name;\n        var nameLowerCase;\n        var expression = null;\n        var block = null;\n\n        this.scanner.eat(ATRULE);\n\n        name = this.scanner.substrToCursor(start + 1);\n        nameLowerCase = name.toLowerCase();\n        this.scanner.skipSC();\n\n        expression = this.AtruleExpression(name);\n\n        // turn empty AtruleExpression into null\n        if (expression.children.head === null) {\n            expression = null;\n        }\n\n        this.scanner.skipSC();\n\n        if (this.atrule.hasOwnProperty(nameLowerCase)) {\n            if (typeof this.atrule[nameLowerCase].block === 'function') {\n                if (this.scanner.tokenType !== LEFTCURLYBRACKET) {\n                    // FIXME: make tolerant\n                    this.scanner.error('Curly bracket is expected');\n                }\n\n                block = this.atrule[nameLowerCase].block.call(this);\n            } else {\n                if (!this.tolerant || !this.scanner.eof) {\n                    this.scanner.eat(SEMICOLON);\n                }\n            }\n        } else {\n            switch (this.scanner.tokenType) {\n                case SEMICOLON:\n                    this.scanner.next();\n                    break;\n\n                case LEFTCURLYBRACKET:\n                    // TODO: should consume block content as Raw?\n                    block = this.Block(isBlockAtrule.call(this) ? this.Declaration : this.Rule);\n                    break;\n\n                default:\n                    if (!this.tolerant) {\n                        this.scanner.error('Semicolon or block is expected');\n                    }\n            }\n        }\n\n        return {\n            type: 'Atrule',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            expression: expression,\n            block: block\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('@');\n        processChunk(node.name);\n\n        if (node.expression !== null) {\n            processChunk(' ');\n            this.generate(processChunk, node.expression);\n        }\n\n        if (node.block) {\n            this.generate(processChunk, node.block);\n        } else {\n            processChunk(';');\n        }\n    },\n    walkContext: 'atrule'\n};\n","var List = require('../../utils/list');\n\nvar TYPE = require('../../tokenizer').TYPE;\nvar SEMICOLON = TYPE.Semicolon;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\n\nfunction consumeRaw(startToken) {\n    return new List().appendData(\n        this.Raw(startToken, SEMICOLON, LEFTCURLYBRACKET, false, true)\n    );\n}\n\nfunction consumeDefaultSequence() {\n    return this.readSequence(this.scope.AtruleExpression);\n}\n\nmodule.exports = {\n    name: 'AtruleExpression',\n    structure: {\n        children: [[]]\n    },\n    parse: function(name) {\n        var children = null;\n        var startToken = this.scanner.currentToken;\n\n        if (name !== null) {\n            name = name.toLowerCase();\n        }\n\n        if (this.parseAtruleExpression) {\n            // custom consumer\n            if (this.atrule.hasOwnProperty(name)) {\n                if (typeof this.atrule[name].expression === 'function') {\n                    children = this.tolerantParse(this.atrule[name].expression, consumeRaw);\n                }\n            } else {\n                // default consumer\n                this.scanner.skipSC();\n                children = this.tolerantParse(consumeDefaultSequence, consumeRaw);\n            }\n\n            if (this.tolerant) {\n                if (this.scanner.eof || (this.scanner.tokenType !== SEMICOLON && this.scanner.tokenType !== LEFTCURLYBRACKET)) {\n                    children = consumeRaw.call(this, startToken);\n                }\n            }\n        } else {\n            children = consumeRaw.call(this, startToken);\n        }\n\n        if (children === null) {\n            children = new List();\n        }\n\n        return {\n            type: 'AtruleExpression',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.each(processChunk, node);\n    },\n    walkContext: 'atruleExpression'\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar STRING = TYPE.String;\nvar DOLLARSIGN = TYPE.DollarSign;\nvar ASTERISK = TYPE.Asterisk;\nvar COLON = TYPE.Colon;\nvar EQUALSSIGN = TYPE.EqualsSign;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET = TYPE.RightSquareBracket;\nvar CIRCUMFLEXACCENT = TYPE.CircumflexAccent;\nvar VERTICALLINE = TYPE.VerticalLine;\nvar TILDE = TYPE.Tilde;\n\nfunction getAttributeName() {\n    if (this.scanner.eof) {\n        this.scanner.error('Unexpected end of input');\n    }\n\n    var start = this.scanner.tokenStart;\n    var expectIdentifier = false;\n    var checkColon = true;\n\n    if (this.scanner.tokenType === ASTERISK) {\n        expectIdentifier = true;\n        checkColon = false;\n        this.scanner.next();\n    } else if (this.scanner.tokenType !== VERTICALLINE) {\n        this.scanner.eat(IDENTIFIER);\n    }\n\n    if (this.scanner.tokenType === VERTICALLINE) {\n        if (this.scanner.lookupType(1) !== EQUALSSIGN) {\n            this.scanner.next();\n            this.scanner.eat(IDENTIFIER);\n        } else if (expectIdentifier) {\n            this.scanner.error('Identifier is expected', this.scanner.tokenEnd);\n        }\n    } else if (expectIdentifier) {\n        this.scanner.error('Vertical line is expected');\n    }\n\n    if (checkColon && this.scanner.tokenType === COLON) {\n        this.scanner.next();\n        this.scanner.eat(IDENTIFIER);\n    }\n\n    return {\n        type: 'Identifier',\n        loc: this.getLocation(start, this.scanner.tokenStart),\n        name: this.scanner.substrToCursor(start)\n    };\n}\n\nfunction getOperator() {\n    var start = this.scanner.tokenStart;\n    var tokenType = this.scanner.tokenType;\n\n    if (tokenType !== EQUALSSIGN &&        // =\n        tokenType !== TILDE &&             // ~=\n        tokenType !== CIRCUMFLEXACCENT &&  // ^=\n        tokenType !== DOLLARSIGN &&        // $=\n        tokenType !== ASTERISK &&          // *=\n        tokenType !== VERTICALLINE         // |=\n    ) {\n        this.scanner.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');\n    }\n\n    if (tokenType === EQUALSSIGN) {\n        this.scanner.next();\n    } else {\n        this.scanner.next();\n        this.scanner.eat(EQUALSSIGN);\n    }\n\n    return this.scanner.substrToCursor(start);\n}\n\n// '[' S* attrib_name ']'\n// '[' S* attrib_name S* attrib_matcher S* [ IDENT | STRING ] S* attrib_flags? S* ']'\nmodule.exports = {\n    name: 'AttributeSelector',\n    structure: {\n        name: 'Identifier',\n        matcher: [String, null],\n        value: ['String', 'Identifier', null],\n        flags: [String, null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var name;\n        var matcher = null;\n        var value = null;\n        var flags = null;\n\n        this.scanner.eat(LEFTSQUAREBRACKET);\n        this.scanner.skipSC();\n\n        name = getAttributeName.call(this);\n        this.scanner.skipSC();\n\n        if (this.scanner.tokenType !== RIGHTSQUAREBRACKET) {\n            // avoid case `[name i]`\n            if (this.scanner.tokenType !== IDENTIFIER) {\n                matcher = getOperator.call(this);\n\n                this.scanner.skipSC();\n\n                value = this.scanner.tokenType === STRING\n                    ? this.String()\n                    : this.Identifier();\n\n                this.scanner.skipSC();\n            }\n\n            // attribute flags\n            if (this.scanner.tokenType === IDENTIFIER) {\n                flags = this.scanner.getTokenValue();\n                this.scanner.next();\n\n                this.scanner.skipSC();\n            }\n        }\n\n        this.scanner.eat(RIGHTSQUAREBRACKET);\n\n        return {\n            type: 'AttributeSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            matcher: matcher,\n            value: value,\n            flags: flags\n        };\n    },\n    generate: function(processChunk, node) {\n        var flagsPrefix = ' ';\n\n        processChunk('[');\n        this.generate(processChunk, node.name);\n\n        if (node.matcher !== null) {\n            processChunk(node.matcher);\n\n            if (node.value !== null) {\n                this.generate(processChunk, node.value);\n\n                // space between string and flags is not required\n                if (node.value.type === 'String') {\n                    flagsPrefix = '';\n                }\n            }\n        }\n\n        if (node.flags !== null) {\n            processChunk(flagsPrefix);\n            processChunk(node.flags);\n        }\n\n        processChunk(']');\n    }\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar SEMICOLON = TYPE.Semicolon;\nvar ATRULE = TYPE.Atrule;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\nvar RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, 0, SEMICOLON, true, true);\n}\n\nmodule.exports = {\n    name: 'Block',\n    structure: {\n        children: [['Atrule', 'Rule', 'Declaration']]\n    },\n    parse: function(defaultConsumer) {\n        if (!defaultConsumer) {\n            defaultConsumer = this.Declaration;\n        }\n\n        var start = this.scanner.tokenStart;\n        var children = new List();\n\n        this.scanner.eat(LEFTCURLYBRACKET);\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case RIGHTCURLYBRACKET:\n                    break scan;\n\n                case WHITESPACE:\n                case COMMENT:\n                case SEMICOLON:\n                    this.scanner.next();\n                    break;\n\n                case ATRULE:\n                    children.appendData(this.tolerantParse(this.Atrule, consumeRaw));\n                    break;\n\n                default:\n                    children.appendData(this.tolerantParse(defaultConsumer, consumeRaw));\n            }\n        }\n\n        if (!this.tolerant || !this.scanner.eof) {\n            this.scanner.eat(RIGHTCURLYBRACKET);\n        }\n\n        return {\n            type: 'Block',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('{');\n        this.each(processChunk, node);\n        processChunk('}');\n    },\n    walkContext: 'block'\n};\n","var TYPE = require('../../tokenizer').TYPE;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET = TYPE.RightSquareBracket;\n\n// currently only Grid Layout uses square brackets, but left it universal\n// https://drafts.csswg.org/css-grid/#track-sizing\n// [ ident* ]\nmodule.exports = {\n    name: 'Brackets',\n    structure: {\n        children: [[]]\n    },\n    parse: function(readSequence, recognizer) {\n        var start = this.scanner.tokenStart;\n        var children = null;\n\n        this.scanner.eat(LEFTSQUAREBRACKET);\n        children = readSequence.call(this, recognizer);\n        this.scanner.eat(RIGHTSQUAREBRACKET);\n\n        return {\n            type: 'Brackets',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('[');\n        this.each(processChunk, node);\n        processChunk(']');\n    }\n};\n","var CDC = require('../../tokenizer').TYPE.CDC;\n\nmodule.exports = {\n    name: 'CDC',\n    structure: [],\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.eat(CDC); // -->\n\n        return {\n            type: 'CDC',\n            loc: this.getLocation(start, this.scanner.tokenStart)\n        };\n    },\n    generate: function(processChunk) {\n        processChunk('-->');\n    }\n};\n","var CDO = require('../../tokenizer').TYPE.CDO;\n\nmodule.exports = {\n    name: 'CDO',\n    structure: [],\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.eat(CDO); // <!--\n\n        return {\n            type: 'CDO',\n            loc: this.getLocation(start, this.scanner.tokenStart)\n        };\n    },\n    generate: function(processChunk) {\n        processChunk('<!--');\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\nvar IDENTIFIER = TYPE.Identifier;\nvar FULLSTOP = TYPE.FullStop;\n\n// '.' ident\nmodule.exports = {\n    name: 'ClassSelector',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        this.scanner.eat(FULLSTOP);\n\n        return {\n            type: 'ClassSelector',\n            loc: this.getLocation(this.scanner.tokenStart - 1, this.scanner.tokenEnd),\n            name: this.scanner.consume(IDENTIFIER)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('.');\n        processChunk(node.name);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar PLUSSIGN = TYPE.PlusSign;\nvar SOLIDUS = TYPE.Solidus;\nvar GREATERTHANSIGN = TYPE.GreaterThanSign;\nvar TILDE = TYPE.Tilde;\n\n// + | > | ~ | /deep/\nmodule.exports = {\n    name: 'Combinator',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        switch (this.scanner.tokenType) {\n            case GREATERTHANSIGN:\n            case PLUSSIGN:\n            case TILDE:\n                this.scanner.next();\n                break;\n\n            case SOLIDUS:\n                this.scanner.next();\n                this.scanner.expectIdentifier('deep');\n                this.scanner.eat(SOLIDUS);\n                break;\n\n            default:\n                this.scanner.error('Combinator is expected');\n        }\n\n        return {\n            type: 'Combinator',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.name);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar ASTERISK = TYPE.Asterisk;\nvar SOLIDUS = TYPE.Solidus;\n\n// '/*' .* '*/'\nmodule.exports = {\n    name: 'Comment',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var end = this.scanner.tokenEnd;\n\n        if ((end - start + 2) >= 2 &&\n            this.scanner.source.charCodeAt(end - 2) === ASTERISK &&\n            this.scanner.source.charCodeAt(end - 1) === SOLIDUS) {\n            end -= 2;\n        }\n\n        this.scanner.next();\n\n        return {\n            type: 'Comment',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.source.substring(start + 2, end)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('/*');\n        processChunk(node.value);\n        processChunk('*/');\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar COLON = TYPE.Colon;\nvar EXCLAMATIONMARK = TYPE.ExclamationMark;\nvar SOLIDUS = TYPE.Solidus;\nvar ASTERISK = TYPE.Asterisk;\nvar DOLLARSIGN = TYPE.DollarSign;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar SEMICOLON = TYPE.Semicolon;\nvar RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\nvar PLUSSIGN = TYPE.PlusSign;\nvar NUMBERSIGN = TYPE.NumberSign;\n\nmodule.exports = {\n    name: 'Declaration',\n    structure: {\n        important: [Boolean, String],\n        property: String,\n        value: ['Value', 'Raw']\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var property = readProperty.call(this);\n        var important = false;\n        var value;\n\n        this.scanner.skipSC();\n        this.scanner.eat(COLON);\n\n        if (isCustomProperty(property) ? this.parseCustomProperty : this.parseValue) {\n            value = this.Value(property);\n        } else {\n            value = this.Raw(this.scanner.currentToken, EXCLAMATIONMARK, SEMICOLON, false, false);\n        }\n\n        if (this.scanner.tokenType === EXCLAMATIONMARK) {\n            important = getImportant(this.scanner);\n            this.scanner.skipSC();\n        }\n\n        // TODO: include or not to include semicolon to range?\n        // if (this.scanner.tokenType === SEMICOLON) {\n        //     this.scanner.next();\n        // }\n\n        if (!this.scanner.eof &&\n            this.scanner.tokenType !== SEMICOLON &&\n            this.scanner.tokenType !== RIGHTPARENTHESIS &&\n            this.scanner.tokenType !== RIGHTCURLYBRACKET) {\n            this.scanner.error();\n        }\n\n        return {\n            type: 'Declaration',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            important: important,\n            property: property,\n            value: value\n        };\n    },\n    generate: function(processChunk, node, item) {\n        processChunk(node.property);\n        processChunk(':');\n        this.generate(processChunk, node.value);\n\n        if (node.important) {\n            processChunk(node.important === true ? '!important' : '!' + node.important);\n        }\n\n        if (item && item.next) {\n            processChunk(';');\n        }\n    },\n    walkContext: 'declaration'\n};\n\nfunction isCustomProperty(name) {\n    return name.length >= 2 &&\n           name.charCodeAt(0) === HYPHENMINUS &&\n           name.charCodeAt(1) === HYPHENMINUS;\n}\n\nfunction readProperty() {\n    var start = this.scanner.tokenStart;\n    var prefix = 0;\n\n    // hacks\n    switch (this.scanner.tokenType) {\n        case ASTERISK:\n        case DOLLARSIGN:\n        case PLUSSIGN:\n        case NUMBERSIGN:\n            prefix = 1;\n            break;\n\n        // TODO: not sure we should support this hack\n        case SOLIDUS:\n            prefix = this.scanner.lookupType(1) === SOLIDUS ? 2 : 1;\n            break;\n    }\n\n    if (this.scanner.lookupType(prefix) === HYPHENMINUS) {\n        prefix++;\n    }\n\n    if (prefix) {\n        this.scanner.skip(prefix);\n    }\n\n    this.scanner.eat(IDENTIFIER);\n\n    return this.scanner.substrToCursor(start);\n}\n\n// ! ws* important\nfunction getImportant(scanner) {\n    scanner.eat(EXCLAMATIONMARK);\n    scanner.skipSC();\n\n    var important = scanner.consume(IDENTIFIER);\n\n    // store original value in case it differ from `important`\n    // for better original source restoring and hacks like `!ie` support\n    return important === 'important' ? true : important;\n}\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar SEMICOLON = TYPE.Semicolon;\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, 0, SEMICOLON, true, true);\n}\n\nmodule.exports = {\n    name: 'DeclarationList',\n    structure: {\n        children: [['Declaration']]\n    },\n    parse: function() {\n        var children = new List();\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case WHITESPACE:\n                case COMMENT:\n                case SEMICOLON:\n                    this.scanner.next();\n                    break;\n\n                default:\n                    children.appendData(this.tolerantParse(this.Declaration, consumeRaw));\n            }\n        }\n\n        return {\n            type: 'DeclarationList',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.each(processChunk, node);\n    }\n};\n","var NUMBER = require('../../tokenizer').TYPE.Number;\n\n// special reader for units to avoid adjoined IE hacks (i.e. '1px\\9')\nfunction readUnit(scanner) {\n    var unit = scanner.getTokenValue();\n    var backSlashPos = unit.indexOf('\\\\');\n\n    if (backSlashPos > 0) {\n        // patch token offset\n        scanner.tokenStart += backSlashPos;\n\n        // return part before backslash\n        return unit.substring(0, backSlashPos);\n    }\n\n    // no backslash in unit name\n    scanner.next();\n\n    return unit;\n}\n\n// number ident\nmodule.exports = {\n    name: 'Dimension',\n    structure: {\n        value: String,\n        unit: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var value = this.scanner.consume(NUMBER);\n        var unit = readUnit(this.scanner);\n\n        return {\n            type: 'Dimension',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: value,\n            unit: unit\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n        processChunk(node.unit);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\n\n// <function-token> <sequence> ')'\nmodule.exports = {\n    name: 'Function',\n    structure: {\n        name: String,\n        children: [[]]\n    },\n    parse: function(readSequence, recognizer) {\n        var start = this.scanner.tokenStart;\n        var name = this.scanner.consumeFunctionName();\n        var nameLowerCase = name.toLowerCase();\n        var children;\n\n        children = recognizer.hasOwnProperty(nameLowerCase)\n            ? recognizer[nameLowerCase].call(this, recognizer)\n            : readSequence.call(this, recognizer);\n\n        this.scanner.eat(RIGHTPARENTHESIS);\n\n        return {\n            type: 'Function',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.name);\n        processChunk('(');\n        this.each(processChunk, node);\n        processChunk(')');\n    },\n    walkContext: 'function'\n};\n","var isHex = require('../../tokenizer').isHex;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBER = TYPE.Number;\nvar NUMBERSIGN = TYPE.NumberSign;\n\nfunction consumeHexSequence(scanner, required) {\n    if (!isHex(scanner.source.charCodeAt(scanner.tokenStart))) {\n        if (required) {\n            scanner.error('Unexpected input', scanner.tokenStart);\n        } else {\n            return;\n        }\n    }\n\n    for (var pos = scanner.tokenStart + 1; pos < scanner.tokenEnd; pos++) {\n        var code = scanner.source.charCodeAt(pos);\n\n        // break on non-hex char\n        if (!isHex(code)) {\n            // break token, exclude symbol\n            scanner.tokenStart = pos;\n            return;\n        }\n    }\n\n    // token is full hex sequence, go to next token\n    scanner.next();\n}\n\n// # ident\nmodule.exports = {\n    name: 'HexColor',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.eat(NUMBERSIGN);\n\n        scan:\n        switch (this.scanner.tokenType) {\n            case NUMBER:\n                consumeHexSequence(this.scanner, true);\n\n                // if token is identifier then number consists of hex only,\n                // try to add identifier to result\n                if (this.scanner.tokenType === IDENTIFIER) {\n                    consumeHexSequence(this.scanner, false);\n                }\n\n                break;\n\n            case IDENTIFIER:\n                consumeHexSequence(this.scanner, true);\n                break;\n\n            default:\n                this.scanner.error('Number or identifier is expected');\n        }\n\n        return {\n            type: 'HexColor',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.substrToCursor(start + 1) // skip #\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('#');\n        processChunk(node.value);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\nvar IDENTIFIER = TYPE.Identifier;\n\nmodule.exports = {\n    name: 'Identifier',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        return {\n            type: 'Identifier',\n            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n            name: this.scanner.consume(IDENTIFIER)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.name);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBERSIGN = TYPE.NumberSign;\n\n// '#' ident\nmodule.exports = {\n    name: 'IdSelector',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        this.scanner.eat(NUMBERSIGN);\n\n        return {\n            type: 'IdSelector',\n            loc: this.getLocation(this.scanner.tokenStart - 1, this.scanner.tokenEnd),\n            name: this.scanner.consume(IDENTIFIER)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('#');\n        processChunk(node.name);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBER = TYPE.Number;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\nvar COLON = TYPE.Colon;\nvar SOLIDUS = TYPE.Solidus;\n\nmodule.exports = {\n    name: 'MediaFeature',\n    structure: {\n        name: String,\n        value: ['Identifier', 'Number', 'Dimension', 'Ratio', null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var name;\n        var value = null;\n\n        this.scanner.eat(LEFTPARENTHESIS);\n        this.scanner.skipSC();\n\n        name = this.scanner.consume(IDENTIFIER);\n        this.scanner.skipSC();\n\n        if (this.scanner.tokenType !== RIGHTPARENTHESIS) {\n            this.scanner.eat(COLON);\n            this.scanner.skipSC();\n\n            switch (this.scanner.tokenType) {\n                case NUMBER:\n                    if (this.scanner.lookupType(1) === IDENTIFIER) {\n                        value = this.Dimension();\n                    } else if (this.scanner.lookupNonWSType(1) === SOLIDUS) {\n                        value = this.Ratio();\n                    } else {\n                        value = this.Number();\n                    }\n\n                    break;\n\n                case IDENTIFIER:\n                    value = this.Identifier();\n\n                    break;\n\n                default:\n                    this.scanner.error('Number, dimension, ratio or identifier is expected');\n            }\n\n            this.scanner.skipSC();\n        }\n\n        this.scanner.eat(RIGHTPARENTHESIS);\n\n        return {\n            type: 'MediaFeature',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            value: value\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('(');\n        processChunk(node.name);\n        if (node.value !== null) {\n            processChunk(':');\n            this.generate(processChunk, node.value);\n        }\n        processChunk(')');\n    }\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENTIFIER = TYPE.Identifier;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\n\nmodule.exports = {\n    name: 'MediaQuery',\n    structure: {\n        children: [['Identifier', 'MediaFeature', 'WhiteSpace']]\n    },\n    parse: function() {\n        this.scanner.skipSC();\n\n        var children = new List();\n        var child = null;\n        var space = null;\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case COMMENT:\n                    this.scanner.next();\n                    continue;\n\n                case WHITESPACE:\n                    space = this.WhiteSpace();\n                    continue;\n\n                case IDENTIFIER:\n                    child = this.Identifier();\n                    break;\n\n                case LEFTPARENTHESIS:\n                    child = this.MediaFeature();\n                    break;\n\n                default:\n                    break scan;\n            }\n\n            if (space !== null) {\n                children.appendData(space);\n                space = null;\n            }\n\n            children.appendData(child);\n        }\n\n        if (child === null) {\n            this.scanner.error('Identifier or parenthesis is expected');\n        }\n\n        return {\n            type: 'MediaQuery',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.each(processChunk, node);\n    }\n};\n","var List = require('../../utils/list');\nvar COMMA = require('../../tokenizer').TYPE.Comma;\n\nmodule.exports = {\n    name: 'MediaQueryList',\n    structure: {\n        children: [['MediaQuery']]\n    },\n    parse: function(relative) {\n        var children = new List();\n\n        this.scanner.skipSC();\n\n        while (!this.scanner.eof) {\n            children.appendData(this.MediaQuery(relative));\n\n            if (this.scanner.tokenType !== COMMA) {\n                break;\n            }\n\n            this.scanner.next();\n        }\n\n        return {\n            type: 'MediaQueryList',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.eachComma(processChunk, node);\n    }\n};\n","// https://drafts.csswg.org/css-syntax-3/#the-anb-type\nmodule.exports = {\n    name: 'Nth',\n    structure: {\n        nth: ['AnPlusB', 'Identifier'],\n        selector: ['SelectorList', null]\n    },\n    parse: function(allowOfClause) {\n        this.scanner.skipSC();\n\n        var start = this.scanner.tokenStart;\n        var end = start;\n        var selector = null;\n        var query;\n\n        if (this.scanner.lookupValue(0, 'odd') || this.scanner.lookupValue(0, 'even')) {\n            query = this.Identifier();\n        } else {\n            query = this.AnPlusB();\n        }\n\n        this.scanner.skipSC();\n\n        if (allowOfClause && this.scanner.lookupValue(0, 'of')) {\n            this.scanner.next();\n\n            selector = this.SelectorList();\n\n            if (this.needPositions) {\n                end = selector.children.last().loc.end.offset;\n            }\n        } else {\n            if (this.needPositions) {\n                end = query.loc.end.offset;\n            }\n        }\n\n        return {\n            type: 'Nth',\n            loc: this.getLocation(start, end),\n            nth: query,\n            selector: selector\n        };\n    },\n    generate: function(processChunk, node) {\n        this.generate(processChunk, node.nth);\n        if (node.selector !== null) {\n            processChunk(' of ');\n            this.generate(processChunk, node.selector);\n        }\n    }\n};\n","var NUMBER = require('../../tokenizer').TYPE.Number;\n\nmodule.exports = {\n    name: 'Number',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        return {\n            type: 'Number',\n            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n            value: this.scanner.consume(NUMBER)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n    }\n};\n","// '/' | '*' | ',' | ':' | '+' | '-'\nmodule.exports = {\n    name: 'Operator',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.next();\n\n        return {\n            type: 'Operator',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\n\nmodule.exports = {\n    name: 'Parentheses',\n    structure: {\n        children: [[]]\n    },\n    parse: function(readSequence, recognizer) {\n        var start = this.scanner.tokenStart;\n        var children = null;\n\n        this.scanner.eat(LEFTPARENTHESIS);\n        children = readSequence.call(this, recognizer);\n        this.scanner.eat(RIGHTPARENTHESIS);\n\n        return {\n            type: 'Parentheses',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('(');\n        this.each(processChunk, node);\n        processChunk(')');\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar NUMBER = TYPE.Number;\nvar PERCENTSIGN = TYPE.PercentSign;\n\nmodule.exports = {\n    name: 'Percentage',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var number = this.scanner.consume(NUMBER);\n\n        this.scanner.eat(PERCENTSIGN);\n\n        return {\n            type: 'Percentage',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: number\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n        processChunk('%');\n    }\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar FUNCTION = TYPE.Function;\nvar COLON = TYPE.Colon;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\n\n// : ident [ '(' .. ')' ]?\nmodule.exports = {\n    name: 'PseudoClassSelector',\n    structure: {\n        name: String,\n        children: [['Raw'], null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var children = null;\n        var name;\n        var nameLowerCase;\n\n        this.scanner.eat(COLON);\n\n        if (this.scanner.tokenType === FUNCTION) {\n            name = this.scanner.consumeFunctionName();\n            nameLowerCase = name.toLowerCase();\n\n            if (this.pseudo.hasOwnProperty(nameLowerCase)) {\n                this.scanner.skipSC();\n                children = this.pseudo[nameLowerCase].call(this);\n                this.scanner.skipSC();\n            } else {\n                children = new List().appendData(\n                    this.Raw(this.scanner.currentToken, 0, 0, false, false)\n                );\n            }\n\n            this.scanner.eat(RIGHTPARENTHESIS);\n        } else {\n            name = this.scanner.consume(IDENTIFIER);\n        }\n\n        return {\n            type: 'PseudoClassSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(':');\n        processChunk(node.name);\n\n        if (node.children !== null) {\n            processChunk('(');\n            this.each(processChunk, node);\n            processChunk(')');\n        }\n    },\n    walkContext: 'function'\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar FUNCTION = TYPE.Function;\nvar COLON = TYPE.Colon;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\n\n// :: ident [ '(' .. ')' ]?\nmodule.exports = {\n    name: 'PseudoElementSelector',\n    structure: {\n        name: String,\n        children: [['Raw'], null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var children = null;\n        var name;\n        var nameLowerCase;\n\n        this.scanner.eat(COLON);\n        this.scanner.eat(COLON);\n\n        if (this.scanner.tokenType === FUNCTION) {\n            name = this.scanner.consumeFunctionName();\n            nameLowerCase = name.toLowerCase();\n\n            if (this.pseudo.hasOwnProperty(nameLowerCase)) {\n                this.scanner.skipSC();\n                children = this.pseudo[nameLowerCase].call(this);\n                this.scanner.skipSC();\n            } else {\n                children = new List().appendData(\n                    this.Raw(this.scanner.currentToken, 0, 0, false, false)\n                );\n            }\n\n            this.scanner.eat(RIGHTPARENTHESIS);\n        } else {\n            name = this.scanner.consume(IDENTIFIER);\n        }\n\n        return {\n            type: 'PseudoElementSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('::');\n        processChunk(node.name);\n\n        if (node.children !== null) {\n            processChunk('(');\n            this.each(processChunk, node);\n            processChunk(')');\n        }\n    },\n    walkContext: 'function'\n};\n","var isNumber = require('../../tokenizer').isNumber;\nvar TYPE = require('../../tokenizer').TYPE;\nvar NUMBER = TYPE.Number;\nvar SOLIDUS = TYPE.Solidus;\nvar FULLSTOP = TYPE.FullStop;\n\n// Terms of <ratio> should to be a positive number (not zero or negative)\n// (see https://drafts.csswg.org/mediaqueries-3/#values)\n// However, -o-min-device-pixel-ratio takes fractional values as a ratio's term\n// and this is using by various sites. Therefore we relax checking on parse\n// to test a term is unsigned number without exponent part.\n// Additional checks may to be applied on lexer validation.\nfunction consumeNumber(scanner) {\n    var value = scanner.consumeNonWS(NUMBER);\n\n    for (var i = 0; i < value.length; i++) {\n        var code = value.charCodeAt(i);\n        if (!isNumber(code) && code !== FULLSTOP) {\n            scanner.error('Unsigned number is expected', scanner.tokenStart - value.length + i);\n        }\n    }\n\n    if (Number(value) === 0) {\n        scanner.error('Zero number is not allowed', scanner.tokenStart - value.length);\n    }\n\n    return value;\n}\n\n// <positive-integer> S* '/' S* <positive-integer>\nmodule.exports = {\n    name: 'Ratio',\n    structure: {\n        left: String,\n        right: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var left = consumeNumber(this.scanner);\n        var right;\n\n        this.scanner.eatNonWS(SOLIDUS);\n        right = consumeNumber(this.scanner);\n\n        return {\n            type: 'Ratio',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            left: left,\n            right: right\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.left);\n        processChunk('/');\n        processChunk(node.right);\n    }\n};\n","module.exports = {\n    name: 'Raw',\n    structure: {\n        value: String\n    },\n    parse: function(startToken, endTokenType1, endTokenType2, includeTokenType2, excludeWhiteSpace) {\n        var startOffset = this.scanner.getTokenStart(startToken);\n        var endOffset;\n\n        this.scanner.skip(\n            this.scanner.getRawLength(\n                startToken,\n                endTokenType1,\n                endTokenType2,\n                includeTokenType2\n            )\n        );\n\n        if (excludeWhiteSpace && this.scanner.tokenStart > startOffset) {\n            endOffset = this.scanner.getOffsetExcludeWS();\n        } else {\n            endOffset = this.scanner.tokenStart;\n        }\n\n        return {\n            type: 'Raw',\n            loc: this.getLocation(startOffset, endOffset),\n            value: this.scanner.source.substring(startOffset, endOffset)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, LEFTCURLYBRACKET, 0, false, true);\n}\n\nmodule.exports = {\n    name: 'Rule',\n    structure: {\n        selector: ['SelectorList', 'Raw'],\n        block: ['Block']\n    },\n    parse: function() {\n        var startToken = this.scanner.currentToken;\n        var startOffset = this.scanner.tokenStart;\n        var selector = this.parseSelector\n            ? this.tolerantParse(this.SelectorList, consumeRaw)\n            : consumeRaw.call(this, startToken);\n        var block = this.Block(this.Declaration);\n\n        return {\n            type: 'Rule',\n            loc: this.getLocation(startOffset, this.scanner.tokenStart),\n            selector: selector,\n            block: block\n        };\n    },\n    generate: function(processChunk, node) {\n        this.generate(processChunk, node.selector);\n        this.generate(processChunk, node.block);\n    },\n    walkContext: 'rule'\n};\n","module.exports = {\n    name: 'Selector',\n    structure: {\n        children: [[\n            'TypeSelector',\n            'IdSelector',\n            'ClassSelector',\n            'AttributeSelector',\n            'PseudoClassSelector',\n            'PseudoElementSelector',\n            'Combinator',\n            'WhiteSpace'\n        ]]\n    },\n    parse: function() {\n        var children = this.readSequence(this.scope.Selector);\n\n        // nothing were consumed\n        if (children.isEmpty()) {\n            this.scanner.error('Selector is expected');\n        }\n\n        return {\n            type: 'Selector',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.each(processChunk, node);\n    }\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar COMMA = TYPE.Comma;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\n\nmodule.exports = {\n    name: 'SelectorList',\n    structure: {\n        children: [['Selector', 'Raw']]\n    },\n    parse: function() {\n        var children = new List();\n\n        while (!this.scanner.eof) {\n            children.appendData(this.parseSelector\n                ? this.Selector()\n                : this.Raw(this.scanner.currentToken, COMMA, LEFTCURLYBRACKET, false, false)\n            );\n\n            if (this.scanner.tokenType === COMMA) {\n                this.scanner.next();\n                continue;\n            }\n\n            break;\n        }\n\n        return {\n            type: 'SelectorList',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.eachComma(processChunk, node);\n    },\n    walkContext: 'selector'\n};\n","var STRING = require('../../tokenizer').TYPE.String;\n\nmodule.exports = {\n    name: 'String',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        return {\n            type: 'String',\n            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n            value: this.scanner.consume(STRING)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n    }\n};\n","var List = require('../../utils/list');\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar EXCLAMATIONMARK = TYPE.ExclamationMark;\nvar ATRULE = TYPE.Atrule;\nvar CDO = TYPE.CDO;\nvar CDC = TYPE.CDC;\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, 0, 0, false, false);\n}\n\nmodule.exports = {\n    name: 'StyleSheet',\n    structure: {\n        children: [['Comment', 'Atrule', 'Rule', 'Raw']]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var children = new List();\n        var child;\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case WHITESPACE:\n                    this.scanner.next();\n                    continue;\n\n                case COMMENT:\n                    // ignore comments except exclamation comments (i.e. /*! .. */) on top level\n                    if (this.scanner.source.charCodeAt(this.scanner.tokenStart + 2) !== EXCLAMATIONMARK) {\n                        this.scanner.next();\n                        continue;\n                    }\n\n                    child = this.Comment();\n                    break;\n\n                case CDO: // <!--\n                    child = this.CDO();\n                    break;\n\n                case CDC: // -->\n                    child = this.CDC();\n                    break;\n\n                // CSS Syntax Module Level 3\n                // §2.2 Error handling\n                // At the \"top level\" of a stylesheet, an <at-keyword-token> starts an at-rule.\n                case ATRULE:\n                    child = this.Atrule();\n                    break;\n\n                // Anything else starts a qualified rule ...\n                default:\n                    child = this.tolerantParse(this.Rule, consumeRaw);\n            }\n\n            children.appendData(child);\n        }\n\n        return {\n            type: 'StyleSheet',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.each(processChunk, node);\n    },\n    walkContext: 'stylesheet'\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar ASTERISK = TYPE.Asterisk;\nvar VERTICALLINE = TYPE.VerticalLine;\n\nfunction eatIdentifierOrAsterisk() {\n    if (this.scanner.tokenType !== IDENTIFIER &&\n        this.scanner.tokenType !== ASTERISK) {\n        this.scanner.error('Identifier or asterisk is expected');\n    }\n\n    this.scanner.next();\n}\n\n// ident\n// ident|ident\n// ident|*\n// *\n// *|ident\n// *|*\n// |ident\n// |*\nmodule.exports = {\n    name: 'TypeSelector',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        if (this.scanner.tokenType === VERTICALLINE) {\n            this.scanner.next();\n            eatIdentifierOrAsterisk.call(this);\n        } else {\n            eatIdentifierOrAsterisk.call(this);\n\n            if (this.scanner.tokenType === VERTICALLINE) {\n                this.scanner.next();\n                eatIdentifierOrAsterisk.call(this);\n            }\n        }\n\n        return {\n            type: 'TypeSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.name);\n    }\n};\n","var isHex = require('../../tokenizer').isHex;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBER = TYPE.Number;\nvar PLUSSIGN = TYPE.PlusSign;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar FULLSTOP = TYPE.FullStop;\nvar QUESTIONMARK = TYPE.QuestionMark;\n\nfunction scanUnicodeNumber(scanner) {\n    for (var pos = scanner.tokenStart + 1; pos < scanner.tokenEnd; pos++) {\n        var code = scanner.source.charCodeAt(pos);\n\n        // break on fullstop or hyperminus/plussign after exponent\n        if (code === FULLSTOP || code === PLUSSIGN) {\n            // break token, exclude symbol\n            scanner.tokenStart = pos;\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// https://drafts.csswg.org/css-syntax-3/#urange\nfunction scanUnicodeRange(scanner) {\n    var hexStart = scanner.tokenStart + 1; // skip +\n    var hexLength = 0;\n\n    scan: {\n        if (scanner.tokenType === NUMBER) {\n            if (scanner.source.charCodeAt(scanner.tokenStart) !== FULLSTOP && scanUnicodeNumber(scanner)) {\n                scanner.next();\n            } else if (scanner.source.charCodeAt(scanner.tokenStart) !== HYPHENMINUS) {\n                break scan;\n            }\n        } else {\n            scanner.next(); // PLUSSIGN\n        }\n\n        if (scanner.tokenType === HYPHENMINUS) {\n            scanner.next();\n        }\n\n        if (scanner.tokenType === NUMBER) {\n            scanner.next();\n        }\n\n        if (scanner.tokenType === IDENTIFIER) {\n            scanner.next();\n        }\n\n        if (scanner.tokenStart === hexStart) {\n            scanner.error('Unexpected input', hexStart);\n        }\n    }\n\n    // validate for U+x{1,6} or U+x{1,6}-x{1,6}\n    // where x is [0-9a-fA-F]\n    for (var i = hexStart, wasHyphenMinus = false; i < scanner.tokenStart; i++) {\n        var code = scanner.source.charCodeAt(i);\n\n        if (isHex(code) === false && (code !== HYPHENMINUS || wasHyphenMinus)) {\n            scanner.error('Unexpected input', i);\n        }\n\n        if (code === HYPHENMINUS) {\n            // hex sequence shouldn't be an empty\n            if (hexLength === 0) {\n                scanner.error('Unexpected input', i);\n            }\n\n            wasHyphenMinus = true;\n            hexLength = 0;\n        } else {\n            hexLength++;\n\n            // too long hex sequence\n            if (hexLength > 6) {\n                scanner.error('Too long hex sequence', i);\n            }\n        }\n\n    }\n\n    // check we have a non-zero sequence\n    if (hexLength === 0) {\n        scanner.error('Unexpected input', i - 1);\n    }\n\n    // U+abc???\n    if (!wasHyphenMinus) {\n        // consume as many U+003F QUESTION MARK (?) code points as possible\n        for (; hexLength < 6 && !scanner.eof; scanner.next()) {\n            if (scanner.tokenType !== QUESTIONMARK) {\n                break;\n            }\n\n            hexLength++;\n        }\n    }\n}\n\nmodule.exports = {\n    name: 'UnicodeRange',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.next(); // U or u\n        scanUnicodeRange(this.scanner);\n\n        return {\n            type: 'UnicodeRange',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar STRING = TYPE.String;\nvar URL = TYPE.Url;\nvar RAW = TYPE.Raw;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\n\n// url '(' S* (string | raw) S* ')'\nmodule.exports = {\n    name: 'Url',\n    structure: {\n        value: ['String', 'Raw']\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var value;\n\n        this.scanner.eat(URL);\n        this.scanner.skipSC();\n\n        switch (this.scanner.tokenType) {\n            case STRING:\n                value = this.String();\n                break;\n\n            case RAW:\n                value = this.Raw(this.scanner.currentToken, 0, RAW, true, false);\n                break;\n\n            default:\n                this.scanner.error('String or Raw is expected');\n        }\n\n        this.scanner.skipSC();\n        this.scanner.eat(RIGHTPARENTHESIS);\n\n        return {\n            type: 'Url',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: value\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('url');\n        processChunk('(');\n        this.generate(processChunk, node.value);\n        processChunk(')');\n    }\n};\n","var endsWith = require('../../tokenizer').endsWith;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar FUNCTION = TYPE.Function;\nvar COLON = TYPE.Colon;\nvar SEMICOLON = TYPE.Semicolon;\nvar EXCLAMATIONMARK = TYPE.ExclamationMark;\n\n// 'progid:' ws* 'DXImageTransform.Microsoft.' ident ws* '(' .* ')'\nfunction checkProgid(scanner) {\n    var offset = 0;\n\n    for (var type; type = scanner.lookupType(offset); offset++) {\n        if (type !== WHITESPACE && type !== COMMENT) {\n            break;\n        }\n    }\n\n    if (scanner.lookupValue(offset, 'alpha(') ||\n        scanner.lookupValue(offset, 'chroma(') ||\n        scanner.lookupValue(offset, 'dropshadow(')) {\n        if (scanner.lookupType(offset) !== FUNCTION) {\n            return false;\n        }\n    } else {\n        if (scanner.lookupValue(offset, 'progid') === false ||\n            scanner.lookupType(offset + 1) !== COLON) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nmodule.exports = {\n    name: 'Value',\n    structure: {\n        children: [[]]\n    },\n    parse: function(property) {\n        // special parser for filter property since it can contains non-standart syntax for old IE\n        if (property !== null && endsWith(property, 'filter') && checkProgid(this.scanner)) {\n            this.scanner.skipSC();\n            return this.Raw(this.scanner.currentToken, EXCLAMATIONMARK, SEMICOLON, false, false);\n        }\n\n        var start = this.scanner.tokenStart;\n        var children = this.readSequence(this.scope.Value);\n\n        return {\n            type: 'Value',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.each(processChunk, node);\n    }\n};\n","var WHITESPACE = require('../../tokenizer').TYPE.WhiteSpace;\nvar SPACE = Object.freeze({\n    type: 'WhiteSpace',\n    loc: null,\n    value: ' '\n});\n\nmodule.exports = {\n    name: 'WhiteSpace',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        this.scanner.eat(WHITESPACE);\n        return SPACE;\n\n        // return {\n        //     type: 'WhiteSpace',\n        //     loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n        //     value: this.scanner.consume(WHITESPACE)\n        // };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n    }\n};\n","module.exports = {\n    AnPlusB: require('./AnPlusB'),\n    Atrule: require('./Atrule'),\n    AtruleExpression: require('./AtruleExpression'),\n    AttributeSelector: require('./AttributeSelector'),\n    Block: require('./Block'),\n    Brackets: require('./Brackets'),\n    CDC: require('./CDC'),\n    CDO: require('./CDO'),\n    ClassSelector: require('./ClassSelector'),\n    Combinator: require('./Combinator'),\n    Comment: require('./Comment'),\n    Declaration: require('./Declaration'),\n    DeclarationList: require('./DeclarationList'),\n    Dimension: require('./Dimension'),\n    Function: require('./Function'),\n    HexColor: require('./HexColor'),\n    Identifier: require('./Identifier'),\n    IdSelector: require('./IdSelector'),\n    MediaFeature: require('./MediaFeature'),\n    MediaQuery: require('./MediaQuery'),\n    MediaQueryList: require('./MediaQueryList'),\n    Nth: require('./Nth'),\n    Number: require('./Number'),\n    Operator: require('./Operator'),\n    Parentheses: require('./Parentheses'),\n    Percentage: require('./Percentage'),\n    PseudoClassSelector: require('./PseudoClassSelector'),\n    PseudoElementSelector: require('./PseudoElementSelector'),\n    Ratio: require('./Ratio'),\n    Raw: require('./Raw'),\n    Rule: require('./Rule'),\n    Selector: require('./Selector'),\n    SelectorList: require('./SelectorList'),\n    String: require('./String'),\n    StyleSheet: require('./StyleSheet'),\n    TypeSelector: require('./TypeSelector'),\n    UnicodeRange: require('./UnicodeRange'),\n    Url: require('./Url'),\n    Value: require('./Value'),\n    WhiteSpace: require('./WhiteSpace')\n};\n","module.exports = {\n    parseContext: {\n        default: 'StyleSheet',\n        stylesheet: 'StyleSheet',\n        atrule: 'Atrule',\n        atruleExpression: function(options) {\n            return this.AtruleExpression(options.atrule ? String(options.atrule) : null);\n        },\n        mediaQueryList: 'MediaQueryList',\n        mediaQuery: 'MediaQuery',\n        rule: 'Rule',\n        selectorList: 'SelectorList',\n        selector: 'Selector',\n        block: function() {\n            return this.Block(this.Declaration);\n        },\n        declarationList: 'DeclarationList',\n        declaration: 'Declaration',\n        value: function(options) {\n            return this.Value(options.property ? String(options.property) : null);\n        }\n    },\n    scope: require('../scope'),\n    atrule: require('../atrule'),\n    pseudo: require('../pseudo'),\n    node: require('../node')\n};\n","var createParser = require('./create');\nvar config = require('../syntax/config/parser');\n\nmodule.exports = createParser(config);\n","export function walk(ast, { enter, leave }) {\n\tvisit(ast, null, enter, leave);\n}\n\nlet shouldSkip = false;\nconst context = { skip: () => shouldSkip = true };\n\nexport const childKeys = {};\n\nconst toString = Object.prototype.toString;\n\nfunction isArray(thing) {\n\treturn toString.call(thing) === '[object Array]';\n}\n\nfunction visit(node, parent, enter, leave, prop, index) {\n\tif (!node) return;\n\n\tif (enter) {\n\t\tconst _shouldSkip = shouldSkip;\n\t\tshouldSkip = false;\n\t\tenter.call(context, node, parent, prop, index);\n\t\tconst skipped = shouldSkip;\n\t\tshouldSkip = _shouldSkip;\n\n\t\tif (skipped) return;\n\t}\n\n\tconst keys = childKeys[node.type] || (\n\t\tchildKeys[node.type] = Object.keys(node).filter(key => typeof node[key] === 'object')\n\t);\n\n\tfor (let i = 0; i < keys.length; i += 1) {\n\t\tconst key = keys[i];\n\t\tconst value = node[key];\n\n\t\tif (isArray(value)) {\n\t\t\tfor (let j = 0; j < value.length; j += 1) {\n\t\t\t\tvisit(value[j], node, enter, leave, key, j);\n\t\t\t}\n\t\t}\n\n\t\telse if (value && value.type) {\n\t\t\tvisit(value, node, enter, leave, key, null);\n\t\t}\n\t}\n\n\tif (leave) {\n\t\tleave(node, parent, prop, index);\n\t}\n}\n","import parse from 'css-tree/lib/parser/index.js';\r\nimport { walk } from 'estree-walker';\r\nimport { Parser } from '../index';\r\nimport { Node } from '../../interfaces';\r\n\r\nexport default function readStyle(parser: Parser, start: number, attributes: Node[]) {\r\n\tconst contentStart = parser.index;\r\n\tconst styles = parser.readUntil(/<\\/style>/);\r\n\tconst contentEnd = parser.index;\r\n\r\n\tlet ast;\r\n\r\n\ttry {\r\n\t\tast = parse(styles, {\r\n\t\t\tpositions: true,\r\n\t\t\toffset: contentStart,\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tif (err.name === 'CssSyntaxError') {\r\n\t\t\tparser.error({\r\n\t\t\t\tcode: `css-syntax-error`,\r\n\t\t\t\tmessage: err.message\r\n\t\t\t}, err.offset);\r\n\t\t} else {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tast = JSON.parse(JSON.stringify(ast));\r\n\r\n\t// tidy up AST\r\n\twalk(ast, {\r\n\t\tenter: (node: Node) => {\r\n\t\t\t// replace `ref:a` nodes\r\n\t\t\tif (node.type === 'Selector') {\r\n\t\t\t\tfor (let i = 0; i < node.children.length; i += 1) {\r\n\t\t\t\t\tconst a = node.children[i];\r\n\t\t\t\t\tconst b = node.children[i + 1];\r\n\r\n\t\t\t\t\tif (isRefSelector(a, b)) {\r\n\t\t\t\t\t\tparser.error({\r\n\t\t\t\t\t\t\tcode: `invalid-ref-selector`,\r\n\t\t\t\t\t\t\tmessage: 'ref selectors are no longer supported'\r\n\t\t\t\t\t\t}, a.loc.start.offset);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (node.loc) {\r\n\t\t\t\tnode.start = node.loc.start.offset;\r\n\t\t\t\tnode.end = node.loc.end.offset;\r\n\t\t\t\tdelete node.loc;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tparser.eat('</style>', true);\r\n\tconst end = parser.index;\r\n\r\n\treturn {\r\n\t\tstart,\r\n\t\tend,\r\n\t\tattributes,\r\n\t\tchildren: ast.children,\r\n\t\tcontent: {\r\n\t\t\tstart: contentStart,\r\n\t\t\tend: contentEnd,\r\n\t\t\tstyles,\r\n\t\t},\r\n\t};\r\n}\r\n\r\nfunction isRefSelector(a: Node, b: Node) {\r\n\tif (!b) return false;\r\n\r\n\treturn (\r\n\t\ta.type === 'TypeSelector' &&\r\n\t\ta.name === 'ref' &&\r\n\t\tb.type === 'PseudoClassSelector'\r\n\t);\r\n}","// https://dev.w3.org/html5/html-author/charref\r\nexport default {\r\n\tCounterClockwiseContourIntegral: 8755,\r\n\tClockwiseContourIntegral: 8754,\r\n\tDoubleLongLeftRightArrow: 10234,\r\n\tDiacriticalDoubleAcute: 733,\r\n\tNotSquareSupersetEqual: 8931,\r\n\tCloseCurlyDoubleQuote: 8221,\r\n\tDoubleContourIntegral: 8751,\r\n\tFilledVerySmallSquare: 9642,\r\n\tNegativeVeryThinSpace: 8203,\r\n\tNotPrecedesSlantEqual: 8928,\r\n\tNotRightTriangleEqual: 8941,\r\n\tNotSucceedsSlantEqual: 8929,\r\n\tCapitalDifferentialD: 8517,\r\n\tDoubleLeftRightArrow: 8660,\r\n\tDoubleLongRightArrow: 10233,\r\n\tEmptyVerySmallSquare: 9643,\r\n\tNestedGreaterGreater: 8811,\r\n\tNotDoubleVerticalBar: 8742,\r\n\tNotLeftTriangleEqual: 8940,\r\n\tNotSquareSubsetEqual: 8930,\r\n\tOpenCurlyDoubleQuote: 8220,\r\n\tReverseUpEquilibrium: 10607,\r\n\tDoubleLongLeftArrow: 10232,\r\n\tDownLeftRightVector: 10576,\r\n\tLeftArrowRightArrow: 8646,\r\n\tNegativeMediumSpace: 8203,\r\n\tRightArrowLeftArrow: 8644,\r\n\tSquareSupersetEqual: 8850,\r\n\tleftrightsquigarrow: 8621,\r\n\tDownRightTeeVector: 10591,\r\n\tDownRightVectorBar: 10583,\r\n\tLongLeftRightArrow: 10231,\r\n\tLongleftrightarrow: 10234,\r\n\tNegativeThickSpace: 8203,\r\n\tPrecedesSlantEqual: 8828,\r\n\tReverseEquilibrium: 8651,\r\n\tRightDoubleBracket: 10215,\r\n\tRightDownTeeVector: 10589,\r\n\tRightDownVectorBar: 10581,\r\n\tRightTriangleEqual: 8885,\r\n\tSquareIntersection: 8851,\r\n\tSucceedsSlantEqual: 8829,\r\n\tblacktriangleright: 9656,\r\n\tlongleftrightarrow: 10231,\r\n\tDoubleUpDownArrow: 8661,\r\n\tDoubleVerticalBar: 8741,\r\n\tDownLeftTeeVector: 10590,\r\n\tDownLeftVectorBar: 10582,\r\n\tFilledSmallSquare: 9724,\r\n\tGreaterSlantEqual: 10878,\r\n\tLeftDoubleBracket: 10214,\r\n\tLeftDownTeeVector: 10593,\r\n\tLeftDownVectorBar: 10585,\r\n\tLeftTriangleEqual: 8884,\r\n\tNegativeThinSpace: 8203,\r\n\tNotReverseElement: 8716,\r\n\tNotTildeFullEqual: 8775,\r\n\tRightAngleBracket: 10217,\r\n\tRightUpDownVector: 10575,\r\n\tSquareSubsetEqual: 8849,\r\n\tVerticalSeparator: 10072,\r\n\tblacktriangledown: 9662,\r\n\tblacktriangleleft: 9666,\r\n\tleftrightharpoons: 8651,\r\n\trightleftharpoons: 8652,\r\n\ttwoheadrightarrow: 8608,\r\n\tDiacriticalAcute: 180,\r\n\tDiacriticalGrave: 96,\r\n\tDiacriticalTilde: 732,\r\n\tDoubleRightArrow: 8658,\r\n\tDownArrowUpArrow: 8693,\r\n\tEmptySmallSquare: 9723,\r\n\tGreaterEqualLess: 8923,\r\n\tGreaterFullEqual: 8807,\r\n\tLeftAngleBracket: 10216,\r\n\tLeftUpDownVector: 10577,\r\n\tLessEqualGreater: 8922,\r\n\tNonBreakingSpace: 160,\r\n\tNotRightTriangle: 8939,\r\n\tNotSupersetEqual: 8841,\r\n\tRightTriangleBar: 10704,\r\n\tRightUpTeeVector: 10588,\r\n\tRightUpVectorBar: 10580,\r\n\tUnderParenthesis: 9181,\r\n\tUpArrowDownArrow: 8645,\r\n\tcirclearrowright: 8635,\r\n\tdownharpoonright: 8642,\r\n\tntrianglerighteq: 8941,\r\n\trightharpoondown: 8641,\r\n\trightrightarrows: 8649,\r\n\ttwoheadleftarrow: 8606,\r\n\tvartriangleright: 8883,\r\n\tCloseCurlyQuote: 8217,\r\n\tContourIntegral: 8750,\r\n\tDoubleDownArrow: 8659,\r\n\tDoubleLeftArrow: 8656,\r\n\tDownRightVector: 8641,\r\n\tLeftRightVector: 10574,\r\n\tLeftTriangleBar: 10703,\r\n\tLeftUpTeeVector: 10592,\r\n\tLeftUpVectorBar: 10584,\r\n\tLowerRightArrow: 8600,\r\n\tNotGreaterEqual: 8817,\r\n\tNotGreaterTilde: 8821,\r\n\tNotLeftTriangle: 8938,\r\n\tOverParenthesis: 9180,\r\n\tRightDownVector: 8642,\r\n\tShortRightArrow: 8594,\r\n\tUpperRightArrow: 8599,\r\n\tbigtriangledown: 9661,\r\n\tcirclearrowleft: 8634,\r\n\tcurvearrowright: 8631,\r\n\tdownharpoonleft: 8643,\r\n\tleftharpoondown: 8637,\r\n\tleftrightarrows: 8646,\r\n\tnLeftrightarrow: 8654,\r\n\tnleftrightarrow: 8622,\r\n\tntrianglelefteq: 8940,\r\n\trightleftarrows: 8644,\r\n\trightsquigarrow: 8605,\r\n\trightthreetimes: 8908,\r\n\tstraightepsilon: 1013,\r\n\ttrianglerighteq: 8885,\r\n\tvartriangleleft: 8882,\r\n\tDiacriticalDot: 729,\r\n\tDoubleRightTee: 8872,\r\n\tDownLeftVector: 8637,\r\n\tGreaterGreater: 10914,\r\n\tHorizontalLine: 9472,\r\n\tInvisibleComma: 8291,\r\n\tInvisibleTimes: 8290,\r\n\tLeftDownVector: 8643,\r\n\tLeftRightArrow: 8596,\r\n\tLeftrightarrow: 8660,\r\n\tLessSlantEqual: 10877,\r\n\tLongRightArrow: 10230,\r\n\tLongrightarrow: 10233,\r\n\tLowerLeftArrow: 8601,\r\n\tNestedLessLess: 8810,\r\n\tNotGreaterLess: 8825,\r\n\tNotLessGreater: 8824,\r\n\tNotSubsetEqual: 8840,\r\n\tNotVerticalBar: 8740,\r\n\tOpenCurlyQuote: 8216,\r\n\tReverseElement: 8715,\r\n\tRightTeeVector: 10587,\r\n\tRightVectorBar: 10579,\r\n\tShortDownArrow: 8595,\r\n\tShortLeftArrow: 8592,\r\n\tSquareSuperset: 8848,\r\n\tTildeFullEqual: 8773,\r\n\tUpperLeftArrow: 8598,\r\n\tZeroWidthSpace: 8203,\r\n\tcurvearrowleft: 8630,\r\n\tdoublebarwedge: 8966,\r\n\tdowndownarrows: 8650,\r\n\thookrightarrow: 8618,\r\n\tleftleftarrows: 8647,\r\n\tleftrightarrow: 8596,\r\n\tleftthreetimes: 8907,\r\n\tlongrightarrow: 10230,\r\n\tlooparrowright: 8620,\r\n\tnshortparallel: 8742,\r\n\tntriangleright: 8939,\r\n\trightarrowtail: 8611,\r\n\trightharpoonup: 8640,\r\n\ttrianglelefteq: 8884,\r\n\tupharpoonright: 8638,\r\n\tApplyFunction: 8289,\r\n\tDifferentialD: 8518,\r\n\tDoubleLeftTee: 10980,\r\n\tDoubleUpArrow: 8657,\r\n\tLeftTeeVector: 10586,\r\n\tLeftVectorBar: 10578,\r\n\tLessFullEqual: 8806,\r\n\tLongLeftArrow: 10229,\r\n\tLongleftarrow: 10232,\r\n\tNotTildeEqual: 8772,\r\n\tNotTildeTilde: 8777,\r\n\tPoincareplane: 8460,\r\n\tPrecedesEqual: 10927,\r\n\tPrecedesTilde: 8830,\r\n\tRightArrowBar: 8677,\r\n\tRightTeeArrow: 8614,\r\n\tRightTriangle: 8883,\r\n\tRightUpVector: 8638,\r\n\tSucceedsEqual: 10928,\r\n\tSucceedsTilde: 8831,\r\n\tSupersetEqual: 8839,\r\n\tUpEquilibrium: 10606,\r\n\tVerticalTilde: 8768,\r\n\tVeryThinSpace: 8202,\r\n\tbigtriangleup: 9651,\r\n\tblacktriangle: 9652,\r\n\tdivideontimes: 8903,\r\n\tfallingdotseq: 8786,\r\n\thookleftarrow: 8617,\r\n\tleftarrowtail: 8610,\r\n\tleftharpoonup: 8636,\r\n\tlongleftarrow: 10229,\r\n\tlooparrowleft: 8619,\r\n\tmeasuredangle: 8737,\r\n\tntriangleleft: 8938,\r\n\tshortparallel: 8741,\r\n\tsmallsetminus: 8726,\r\n\ttriangleright: 9657,\r\n\tupharpoonleft: 8639,\r\n\tDownArrowBar: 10515,\r\n\tDownTeeArrow: 8615,\r\n\tExponentialE: 8519,\r\n\tGreaterEqual: 8805,\r\n\tGreaterTilde: 8819,\r\n\tHilbertSpace: 8459,\r\n\tHumpDownHump: 8782,\r\n\tIntersection: 8898,\r\n\tLeftArrowBar: 8676,\r\n\tLeftTeeArrow: 8612,\r\n\tLeftTriangle: 8882,\r\n\tLeftUpVector: 8639,\r\n\tNotCongruent: 8802,\r\n\tNotLessEqual: 8816,\r\n\tNotLessTilde: 8820,\r\n\tProportional: 8733,\r\n\tRightCeiling: 8969,\r\n\tRoundImplies: 10608,\r\n\tShortUpArrow: 8593,\r\n\tSquareSubset: 8847,\r\n\tUnderBracket: 9141,\r\n\tVerticalLine: 124,\r\n\tblacklozenge: 10731,\r\n\texponentiale: 8519,\r\n\trisingdotseq: 8787,\r\n\ttriangledown: 9663,\r\n\ttriangleleft: 9667,\r\n\tCircleMinus: 8854,\r\n\tCircleTimes: 8855,\r\n\tEquilibrium: 8652,\r\n\tGreaterLess: 8823,\r\n\tLeftCeiling: 8968,\r\n\tLessGreater: 8822,\r\n\tMediumSpace: 8287,\r\n\tNotPrecedes: 8832,\r\n\tNotSucceeds: 8833,\r\n\tOverBracket: 9140,\r\n\tRightVector: 8640,\r\n\tRrightarrow: 8667,\r\n\tRuleDelayed: 10740,\r\n\tSmallCircle: 8728,\r\n\tSquareUnion: 8852,\r\n\tSubsetEqual: 8838,\r\n\tUpDownArrow: 8597,\r\n\tUpdownarrow: 8661,\r\n\tVerticalBar: 8739,\r\n\tbackepsilon: 1014,\r\n\tblacksquare: 9642,\r\n\tcircledcirc: 8858,\r\n\tcircleddash: 8861,\r\n\tcurlyeqprec: 8926,\r\n\tcurlyeqsucc: 8927,\r\n\tdiamondsuit: 9830,\r\n\teqslantless: 10901,\r\n\texpectation: 8496,\r\n\tnRightarrow: 8655,\r\n\tnrightarrow: 8603,\r\n\tpreccurlyeq: 8828,\r\n\tprecnapprox: 10937,\r\n\tquaternions: 8461,\r\n\tstraightphi: 981,\r\n\tsucccurlyeq: 8829,\r\n\tsuccnapprox: 10938,\r\n\tthickapprox: 8776,\r\n\tupdownarrow: 8597,\r\n\tBernoullis: 8492,\r\n\tCirclePlus: 8853,\r\n\tEqualTilde: 8770,\r\n\tFouriertrf: 8497,\r\n\tImaginaryI: 8520,\r\n\tLaplacetrf: 8466,\r\n\tLeftVector: 8636,\r\n\tLleftarrow: 8666,\r\n\tNotElement: 8713,\r\n\tNotGreater: 8815,\r\n\tProportion: 8759,\r\n\tRightArrow: 8594,\r\n\tRightFloor: 8971,\r\n\tRightarrow: 8658,\r\n\tTildeEqual: 8771,\r\n\tTildeTilde: 8776,\r\n\tUnderBrace: 9183,\r\n\tUpArrowBar: 10514,\r\n\tUpTeeArrow: 8613,\r\n\tcircledast: 8859,\r\n\tcomplement: 8705,\r\n\tcurlywedge: 8911,\r\n\teqslantgtr: 10902,\r\n\tgtreqqless: 10892,\r\n\tlessapprox: 10885,\r\n\tlesseqqgtr: 10891,\r\n\tlmoustache: 9136,\r\n\tlongmapsto: 10236,\r\n\tmapstodown: 8615,\r\n\tmapstoleft: 8612,\r\n\tnLeftarrow: 8653,\r\n\tnleftarrow: 8602,\r\n\tprecapprox: 10935,\r\n\trightarrow: 8594,\r\n\trmoustache: 9137,\r\n\tsqsubseteq: 8849,\r\n\tsqsupseteq: 8850,\r\n\tsubsetneqq: 10955,\r\n\tsuccapprox: 10936,\r\n\tsupsetneqq: 10956,\r\n\tupuparrows: 8648,\r\n\tvarepsilon: 949,\r\n\tvarnothing: 8709,\r\n\tBackslash: 8726,\r\n\tCenterDot: 183,\r\n\tCircleDot: 8857,\r\n\tCongruent: 8801,\r\n\tCoproduct: 8720,\r\n\tDoubleDot: 168,\r\n\tDownArrow: 8595,\r\n\tDownBreve: 785,\r\n\tDownarrow: 8659,\r\n\tHumpEqual: 8783,\r\n\tLeftArrow: 8592,\r\n\tLeftFloor: 8970,\r\n\tLeftarrow: 8656,\r\n\tLessTilde: 8818,\r\n\tMellintrf: 8499,\r\n\tMinusPlus: 8723,\r\n\tNotCupCap: 8813,\r\n\tNotExists: 8708,\r\n\tOverBrace: 9182,\r\n\tPlusMinus: 177,\r\n\tTherefore: 8756,\r\n\tThinSpace: 8201,\r\n\tTripleDot: 8411,\r\n\tUnionPlus: 8846,\r\n\tbackprime: 8245,\r\n\tbacksimeq: 8909,\r\n\tbigotimes: 10754,\r\n\tcenterdot: 183,\r\n\tcheckmark: 10003,\r\n\tcomplexes: 8450,\r\n\tdotsquare: 8865,\r\n\tdownarrow: 8595,\r\n\tgtrapprox: 10886,\r\n\tgtreqless: 8923,\r\n\theartsuit: 9829,\r\n\tleftarrow: 8592,\r\n\tlesseqgtr: 8922,\r\n\tnparallel: 8742,\r\n\tnshortmid: 8740,\r\n\tnsubseteq: 8840,\r\n\tnsupseteq: 8841,\r\n\tpitchfork: 8916,\r\n\trationals: 8474,\r\n\tspadesuit: 9824,\r\n\tsubseteqq: 10949,\r\n\tsubsetneq: 8842,\r\n\tsupseteqq: 10950,\r\n\tsupsetneq: 8843,\r\n\ttherefore: 8756,\r\n\ttriangleq: 8796,\r\n\tvarpropto: 8733,\r\n\tDDotrahd: 10513,\r\n\tDotEqual: 8784,\r\n\tIntegral: 8747,\r\n\tLessLess: 10913,\r\n\tNotEqual: 8800,\r\n\tNotTilde: 8769,\r\n\tPartialD: 8706,\r\n\tPrecedes: 8826,\r\n\tRightTee: 8866,\r\n\tSucceeds: 8827,\r\n\tSuchThat: 8715,\r\n\tSuperset: 8835,\r\n\tUarrocir: 10569,\r\n\tUnderBar: 818,\r\n\tandslope: 10840,\r\n\tangmsdaa: 10664,\r\n\tangmsdab: 10665,\r\n\tangmsdac: 10666,\r\n\tangmsdad: 10667,\r\n\tangmsdae: 10668,\r\n\tangmsdaf: 10669,\r\n\tangmsdag: 10670,\r\n\tangmsdah: 10671,\r\n\tangrtvbd: 10653,\r\n\tapproxeq: 8778,\r\n\tawconint: 8755,\r\n\tbackcong: 8780,\r\n\tbarwedge: 8965,\r\n\tbbrktbrk: 9142,\r\n\tbigoplus: 10753,\r\n\tbigsqcup: 10758,\r\n\tbiguplus: 10756,\r\n\tbigwedge: 8896,\r\n\tboxminus: 8863,\r\n\tboxtimes: 8864,\r\n\tcapbrcup: 10825,\r\n\tcircledR: 174,\r\n\tcircledS: 9416,\r\n\tcirfnint: 10768,\r\n\tclubsuit: 9827,\r\n\tcupbrcap: 10824,\r\n\tcurlyvee: 8910,\r\n\tcwconint: 8754,\r\n\tdoteqdot: 8785,\r\n\tdotminus: 8760,\r\n\tdrbkarow: 10512,\r\n\tdzigrarr: 10239,\r\n\telinters: 9191,\r\n\temptyset: 8709,\r\n\teqvparsl: 10725,\r\n\tfpartint: 10765,\r\n\tgeqslant: 10878,\r\n\tgesdotol: 10884,\r\n\tgnapprox: 10890,\r\n\thksearow: 10533,\r\n\thkswarow: 10534,\r\n\timagline: 8464,\r\n\timagpart: 8465,\r\n\tinfintie: 10717,\r\n\tintegers: 8484,\r\n\tintercal: 8890,\r\n\tintlarhk: 10775,\r\n\tlaemptyv: 10676,\r\n\tldrushar: 10571,\r\n\tleqslant: 10877,\r\n\tlesdotor: 10883,\r\n\tllcorner: 8990,\r\n\tlnapprox: 10889,\r\n\tlrcorner: 8991,\r\n\tlurdshar: 10570,\r\n\tmapstoup: 8613,\r\n\tmultimap: 8888,\r\n\tnaturals: 8469,\r\n\totimesas: 10806,\r\n\tparallel: 8741,\r\n\tplusacir: 10787,\r\n\tpointint: 10773,\r\n\tprecneqq: 10933,\r\n\tprecnsim: 8936,\r\n\tprofalar: 9006,\r\n\tprofline: 8978,\r\n\tprofsurf: 8979,\r\n\traemptyv: 10675,\r\n\trealpart: 8476,\r\n\trppolint: 10770,\r\n\trtriltri: 10702,\r\n\tscpolint: 10771,\r\n\tsetminus: 8726,\r\n\tshortmid: 8739,\r\n\tsmeparsl: 10724,\r\n\tsqsubset: 8847,\r\n\tsqsupset: 8848,\r\n\tsubseteq: 8838,\r\n\tsuccneqq: 10934,\r\n\tsuccnsim: 8937,\r\n\tsupseteq: 8839,\r\n\tthetasym: 977,\r\n\tthicksim: 8764,\r\n\ttimesbar: 10801,\r\n\ttriangle: 9653,\r\n\ttriminus: 10810,\r\n\ttrpezium: 9186,\r\n\tulcorner: 8988,\r\n\turcorner: 8989,\r\n\tvarkappa: 1008,\r\n\tvarsigma: 962,\r\n\tvartheta: 977,\r\n\tBecause: 8757,\r\n\tCayleys: 8493,\r\n\tCconint: 8752,\r\n\tCedilla: 184,\r\n\tDiamond: 8900,\r\n\tDownTee: 8868,\r\n\tElement: 8712,\r\n\tEpsilon: 917,\r\n\tImplies: 8658,\r\n\tLeftTee: 8867,\r\n\tNewLine: 10,\r\n\tNoBreak: 8288,\r\n\tNotLess: 8814,\r\n\tOmicron: 927,\r\n\tOverBar: 175,\r\n\tProduct: 8719,\r\n\tUpArrow: 8593,\r\n\tUparrow: 8657,\r\n\tUpsilon: 933,\r\n\talefsym: 8501,\r\n\tangrtvb: 8894,\r\n\tangzarr: 9084,\r\n\tasympeq: 8781,\r\n\tbacksim: 8765,\r\n\tbecause: 8757,\r\n\tbemptyv: 10672,\r\n\tbetween: 8812,\r\n\tbigcirc: 9711,\r\n\tbigodot: 10752,\r\n\tbigstar: 9733,\r\n\tboxplus: 8862,\r\n\tccupssm: 10832,\r\n\tcemptyv: 10674,\r\n\tcirscir: 10690,\r\n\tcoloneq: 8788,\r\n\tcongdot: 10861,\r\n\tcudarrl: 10552,\r\n\tcudarrr: 10549,\r\n\tcularrp: 10557,\r\n\tcurarrm: 10556,\r\n\tdbkarow: 10511,\r\n\tddagger: 8225,\r\n\tddotseq: 10871,\r\n\tdemptyv: 10673,\r\n\tdiamond: 8900,\r\n\tdigamma: 989,\r\n\tdotplus: 8724,\r\n\tdwangle: 10662,\r\n\tepsilon: 949,\r\n\teqcolon: 8789,\r\n\tequivDD: 10872,\r\n\tgesdoto: 10882,\r\n\tgtquest: 10876,\r\n\tgtrless: 8823,\r\n\tharrcir: 10568,\r\n\tintprod: 10812,\r\n\tisindot: 8949,\r\n\tlarrbfs: 10527,\r\n\tlarrsim: 10611,\r\n\tlbrksld: 10639,\r\n\tlbrkslu: 10637,\r\n\tldrdhar: 10599,\r\n\tlesdoto: 10881,\r\n\tlessdot: 8918,\r\n\tlessgtr: 8822,\r\n\tlesssim: 8818,\r\n\tlotimes: 10804,\r\n\tlozenge: 9674,\r\n\tltquest: 10875,\r\n\tluruhar: 10598,\r\n\tmaltese: 10016,\r\n\tminusdu: 10794,\r\n\tnapprox: 8777,\r\n\tnatural: 9838,\r\n\tnearrow: 8599,\r\n\tnexists: 8708,\r\n\tnotinva: 8713,\r\n\tnotinvb: 8951,\r\n\tnotinvc: 8950,\r\n\tnotniva: 8716,\r\n\tnotnivb: 8958,\r\n\tnotnivc: 8957,\r\n\tnpolint: 10772,\r\n\tnsqsube: 8930,\r\n\tnsqsupe: 8931,\r\n\tnvinfin: 10718,\r\n\tnwarrow: 8598,\r\n\tolcross: 10683,\r\n\tomicron: 959,\r\n\torderof: 8500,\r\n\torslope: 10839,\r\n\tpertenk: 8241,\r\n\tplanckh: 8462,\r\n\tpluscir: 10786,\r\n\tplussim: 10790,\r\n\tplustwo: 10791,\r\n\tprecsim: 8830,\r\n\tquatint: 10774,\r\n\tquesteq: 8799,\r\n\trarrbfs: 10528,\r\n\trarrsim: 10612,\r\n\trbrksld: 10638,\r\n\trbrkslu: 10640,\r\n\trdldhar: 10601,\r\n\trealine: 8475,\r\n\trotimes: 10805,\r\n\truluhar: 10600,\r\n\tsearrow: 8600,\r\n\tsimplus: 10788,\r\n\tsimrarr: 10610,\r\n\tsubedot: 10947,\r\n\tsubmult: 10945,\r\n\tsubplus: 10943,\r\n\tsubrarr: 10617,\r\n\tsuccsim: 8831,\r\n\tsupdsub: 10968,\r\n\tsupedot: 10948,\r\n\tsuphsub: 10967,\r\n\tsuplarr: 10619,\r\n\tsupmult: 10946,\r\n\tsupplus: 10944,\r\n\tswarrow: 8601,\r\n\ttopfork: 10970,\r\n\ttriplus: 10809,\r\n\ttritime: 10811,\r\n\tuparrow: 8593,\r\n\tupsilon: 965,\r\n\tuwangle: 10663,\r\n\tvzigzag: 10650,\r\n\tzigrarr: 8669,\r\n\tAacute: 193,\r\n\tAbreve: 258,\r\n\tAgrave: 192,\r\n\tAssign: 8788,\r\n\tAtilde: 195,\r\n\tBarwed: 8966,\r\n\tBumpeq: 8782,\r\n\tCacute: 262,\r\n\tCcaron: 268,\r\n\tCcedil: 199,\r\n\tColone: 10868,\r\n\tConint: 8751,\r\n\tCupCap: 8781,\r\n\tDagger: 8225,\r\n\tDcaron: 270,\r\n\tDotDot: 8412,\r\n\tDstrok: 272,\r\n\tEacute: 201,\r\n\tEcaron: 282,\r\n\tEgrave: 200,\r\n\tExists: 8707,\r\n\tForAll: 8704,\r\n\tGammad: 988,\r\n\tGbreve: 286,\r\n\tGcedil: 290,\r\n\tHARDcy: 1066,\r\n\tHstrok: 294,\r\n\tIacute: 205,\r\n\tIgrave: 204,\r\n\tItilde: 296,\r\n\tJsercy: 1032,\r\n\tKcedil: 310,\r\n\tLacute: 313,\r\n\tLambda: 923,\r\n\tLcaron: 317,\r\n\tLcedil: 315,\r\n\tLmidot: 319,\r\n\tLstrok: 321,\r\n\tNacute: 323,\r\n\tNcaron: 327,\r\n\tNcedil: 325,\r\n\tNtilde: 209,\r\n\tOacute: 211,\r\n\tOdblac: 336,\r\n\tOgrave: 210,\r\n\tOslash: 216,\r\n\tOtilde: 213,\r\n\tOtimes: 10807,\r\n\tRacute: 340,\r\n\tRarrtl: 10518,\r\n\tRcaron: 344,\r\n\tRcedil: 342,\r\n\tSHCHcy: 1065,\r\n\tSOFTcy: 1068,\r\n\tSacute: 346,\r\n\tScaron: 352,\r\n\tScedil: 350,\r\n\tSquare: 9633,\r\n\tSubset: 8912,\r\n\tSupset: 8913,\r\n\tTcaron: 356,\r\n\tTcedil: 354,\r\n\tTstrok: 358,\r\n\tUacute: 218,\r\n\tUbreve: 364,\r\n\tUdblac: 368,\r\n\tUgrave: 217,\r\n\tUtilde: 360,\r\n\tVdashl: 10982,\r\n\tVerbar: 8214,\r\n\tVvdash: 8874,\r\n\tYacute: 221,\r\n\tZacute: 377,\r\n\tZcaron: 381,\r\n\taacute: 225,\r\n\tabreve: 259,\r\n\tagrave: 224,\r\n\tandand: 10837,\r\n\tangmsd: 8737,\r\n\tangsph: 8738,\r\n\tapacir: 10863,\r\n\tapprox: 8776,\r\n\tatilde: 227,\r\n\tbarvee: 8893,\r\n\tbarwed: 8965,\r\n\tbecaus: 8757,\r\n\tbernou: 8492,\r\n\tbigcap: 8898,\r\n\tbigcup: 8899,\r\n\tbigvee: 8897,\r\n\tbkarow: 10509,\r\n\tbottom: 8869,\r\n\tbowtie: 8904,\r\n\tboxbox: 10697,\r\n\tbprime: 8245,\r\n\tbrvbar: 166,\r\n\tbullet: 8226,\r\n\tbumpeq: 8783,\r\n\tcacute: 263,\r\n\tcapand: 10820,\r\n\tcapcap: 10827,\r\n\tcapcup: 10823,\r\n\tcapdot: 10816,\r\n\tccaron: 269,\r\n\tccedil: 231,\r\n\tcirceq: 8791,\r\n\tcirmid: 10991,\r\n\tcolone: 8788,\r\n\tcommat: 64,\r\n\tcompfn: 8728,\r\n\tconint: 8750,\r\n\tcoprod: 8720,\r\n\tcopysr: 8471,\r\n\tcularr: 8630,\r\n\tcupcap: 10822,\r\n\tcupcup: 10826,\r\n\tcupdot: 8845,\r\n\tcurarr: 8631,\r\n\tcurren: 164,\r\n\tcylcty: 9005,\r\n\tdagger: 8224,\r\n\tdaleth: 8504,\r\n\tdcaron: 271,\r\n\tdfisht: 10623,\r\n\tdivide: 247,\r\n\tdivonx: 8903,\r\n\tdlcorn: 8990,\r\n\tdlcrop: 8973,\r\n\tdollar: 36,\r\n\tdrcorn: 8991,\r\n\tdrcrop: 8972,\r\n\tdstrok: 273,\r\n\teacute: 233,\r\n\teaster: 10862,\r\n\tecaron: 283,\r\n\tecolon: 8789,\r\n\tegrave: 232,\r\n\tegsdot: 10904,\r\n\telsdot: 10903,\r\n\temptyv: 8709,\r\n\temsp13: 8196,\r\n\temsp14: 8197,\r\n\teparsl: 10723,\r\n\teqcirc: 8790,\r\n\tequals: 61,\r\n\tequest: 8799,\r\n\tfemale: 9792,\r\n\tffilig: 64259,\r\n\tffllig: 64260,\r\n\tforall: 8704,\r\n\tfrac12: 189,\r\n\tfrac13: 8531,\r\n\tfrac14: 188,\r\n\tfrac15: 8533,\r\n\tfrac16: 8537,\r\n\tfrac18: 8539,\r\n\tfrac23: 8532,\r\n\tfrac25: 8534,\r\n\tfrac34: 190,\r\n\tfrac35: 8535,\r\n\tfrac38: 8540,\r\n\tfrac45: 8536,\r\n\tfrac56: 8538,\r\n\tfrac58: 8541,\r\n\tfrac78: 8542,\r\n\tgacute: 501,\r\n\tgammad: 989,\r\n\tgbreve: 287,\r\n\tgesdot: 10880,\r\n\tgesles: 10900,\r\n\tgtlPar: 10645,\r\n\tgtrarr: 10616,\r\n\tgtrdot: 8919,\r\n\tgtrsim: 8819,\r\n\thairsp: 8202,\r\n\thamilt: 8459,\r\n\thardcy: 1098,\r\n\thearts: 9829,\r\n\thellip: 8230,\r\n\thercon: 8889,\r\n\thomtht: 8763,\r\n\thorbar: 8213,\r\n\thslash: 8463,\r\n\thstrok: 295,\r\n\thybull: 8259,\r\n\thyphen: 8208,\r\n\tiacute: 237,\r\n\tigrave: 236,\r\n\tiiiint: 10764,\r\n\tiinfin: 10716,\r\n\tincare: 8453,\r\n\tinodot: 305,\r\n\tintcal: 8890,\r\n\tiquest: 191,\r\n\tisinsv: 8947,\r\n\titilde: 297,\r\n\tjsercy: 1112,\r\n\tkappav: 1008,\r\n\tkcedil: 311,\r\n\tkgreen: 312,\r\n\tlAtail: 10523,\r\n\tlacute: 314,\r\n\tlagran: 8466,\r\n\tlambda: 955,\r\n\tlangle: 10216,\r\n\tlarrfs: 10525,\r\n\tlarrhk: 8617,\r\n\tlarrlp: 8619,\r\n\tlarrpl: 10553,\r\n\tlarrtl: 8610,\r\n\tlatail: 10521,\r\n\tlbrace: 123,\r\n\tlbrack: 91,\r\n\tlcaron: 318,\r\n\tlcedil: 316,\r\n\tldquor: 8222,\r\n\tlesdot: 10879,\r\n\tlesges: 10899,\r\n\tlfisht: 10620,\r\n\tlfloor: 8970,\r\n\tlharul: 10602,\r\n\tllhard: 10603,\r\n\tlmidot: 320,\r\n\tlmoust: 9136,\r\n\tloplus: 10797,\r\n\tlowast: 8727,\r\n\tlowbar: 95,\r\n\tlparlt: 10643,\r\n\tlrhard: 10605,\r\n\tlsaquo: 8249,\r\n\tlsquor: 8218,\r\n\tlstrok: 322,\r\n\tlthree: 8907,\r\n\tltimes: 8905,\r\n\tltlarr: 10614,\r\n\tltrPar: 10646,\r\n\tmapsto: 8614,\r\n\tmarker: 9646,\r\n\tmcomma: 10793,\r\n\tmidast: 42,\r\n\tmidcir: 10992,\r\n\tmiddot: 183,\r\n\tminusb: 8863,\r\n\tminusd: 8760,\r\n\tmnplus: 8723,\r\n\tmodels: 8871,\r\n\tmstpos: 8766,\r\n\tnVDash: 8879,\r\n\tnVdash: 8878,\r\n\tnacute: 324,\r\n\tncaron: 328,\r\n\tncedil: 326,\r\n\tnearhk: 10532,\r\n\tnequiv: 8802,\r\n\tnesear: 10536,\r\n\tnexist: 8708,\r\n\tnltrie: 8940,\r\n\tnprcue: 8928,\r\n\tnrtrie: 8941,\r\n\tnsccue: 8929,\r\n\tnsimeq: 8772,\r\n\tntilde: 241,\r\n\tnumero: 8470,\r\n\tnvDash: 8877,\r\n\tnvHarr: 10500,\r\n\tnvdash: 8876,\r\n\tnvlArr: 10498,\r\n\tnvrArr: 10499,\r\n\tnwarhk: 10531,\r\n\tnwnear: 10535,\r\n\toacute: 243,\r\n\todblac: 337,\r\n\todsold: 10684,\r\n\tograve: 242,\r\n\tominus: 8854,\r\n\torigof: 8886,\r\n\toslash: 248,\r\n\totilde: 245,\r\n\totimes: 8855,\r\n\tparsim: 10995,\r\n\tpercnt: 37,\r\n\tperiod: 46,\r\n\tpermil: 8240,\r\n\tphmmat: 8499,\r\n\tplanck: 8463,\r\n\tplankv: 8463,\r\n\tplusdo: 8724,\r\n\tplusdu: 10789,\r\n\tplusmn: 177,\r\n\tpreceq: 10927,\r\n\tprimes: 8473,\r\n\tprnsim: 8936,\r\n\tpropto: 8733,\r\n\tprurel: 8880,\r\n\tpuncsp: 8200,\r\n\tqprime: 8279,\r\n\trAtail: 10524,\r\n\tracute: 341,\r\n\trangle: 10217,\r\n\trarrap: 10613,\r\n\trarrfs: 10526,\r\n\trarrhk: 8618,\r\n\trarrlp: 8620,\r\n\trarrpl: 10565,\r\n\trarrtl: 8611,\r\n\tratail: 10522,\r\n\trbrace: 125,\r\n\trbrack: 93,\r\n\trcaron: 345,\r\n\trcedil: 343,\r\n\trdquor: 8221,\r\n\trfisht: 10621,\r\n\trfloor: 8971,\r\n\trharul: 10604,\r\n\trmoust: 9137,\r\n\troplus: 10798,\r\n\trpargt: 10644,\r\n\trsaquo: 8250,\r\n\trsquor: 8217,\r\n\trthree: 8908,\r\n\trtimes: 8906,\r\n\tsacute: 347,\r\n\tscaron: 353,\r\n\tscedil: 351,\r\n\tscnsim: 8937,\r\n\tsearhk: 10533,\r\n\tseswar: 10537,\r\n\tsfrown: 8994,\r\n\tshchcy: 1097,\r\n\tsigmaf: 962,\r\n\tsigmav: 962,\r\n\tsimdot: 10858,\r\n\tsmashp: 10803,\r\n\tsoftcy: 1100,\r\n\tsolbar: 9023,\r\n\tspades: 9824,\r\n\tsqsube: 8849,\r\n\tsqsupe: 8850,\r\n\tsquare: 9633,\r\n\tsquarf: 9642,\r\n\tssetmn: 8726,\r\n\tssmile: 8995,\r\n\tsstarf: 8902,\r\n\tsubdot: 10941,\r\n\tsubset: 8834,\r\n\tsubsim: 10951,\r\n\tsubsub: 10965,\r\n\tsubsup: 10963,\r\n\tsucceq: 10928,\r\n\tsupdot: 10942,\r\n\tsupset: 8835,\r\n\tsupsim: 10952,\r\n\tsupsub: 10964,\r\n\tsupsup: 10966,\r\n\tswarhk: 10534,\r\n\tswnwar: 10538,\r\n\ttarget: 8982,\r\n\ttcaron: 357,\r\n\ttcedil: 355,\r\n\ttelrec: 8981,\r\n\tthere4: 8756,\r\n\tthetav: 977,\r\n\tthinsp: 8201,\r\n\tthksim: 8764,\r\n\ttimesb: 8864,\r\n\ttimesd: 10800,\r\n\ttopbot: 9014,\r\n\ttopcir: 10993,\r\n\ttprime: 8244,\r\n\ttridot: 9708,\r\n\ttstrok: 359,\r\n\tuacute: 250,\r\n\tubreve: 365,\r\n\tudblac: 369,\r\n\tufisht: 10622,\r\n\tugrave: 249,\r\n\tulcorn: 8988,\r\n\tulcrop: 8975,\r\n\turcorn: 8989,\r\n\turcrop: 8974,\r\n\tutilde: 361,\r\n\tvangrt: 10652,\r\n\tvarphi: 966,\r\n\tvarrho: 1009,\r\n\tveebar: 8891,\r\n\tvellip: 8942,\r\n\tverbar: 124,\r\n\twedbar: 10847,\r\n\twedgeq: 8793,\r\n\tweierp: 8472,\r\n\twreath: 8768,\r\n\txoplus: 10753,\r\n\txotime: 10754,\r\n\txsqcup: 10758,\r\n\txuplus: 10756,\r\n\txwedge: 8896,\r\n\tyacute: 253,\r\n\tzacute: 378,\r\n\tzcaron: 382,\r\n\tzeetrf: 8488,\r\n\tAElig: 198,\r\n\tAcirc: 194,\r\n\tAlpha: 913,\r\n\tAmacr: 256,\r\n\tAogon: 260,\r\n\tAring: 197,\r\n\tBreve: 728,\r\n\tCcirc: 264,\r\n\tColon: 8759,\r\n\tCross: 10799,\r\n\tDashv: 10980,\r\n\tDelta: 916,\r\n\tEcirc: 202,\r\n\tEmacr: 274,\r\n\tEogon: 280,\r\n\tEqual: 10869,\r\n\tGamma: 915,\r\n\tGcirc: 284,\r\n\tHacek: 711,\r\n\tHcirc: 292,\r\n\tIJlig: 306,\r\n\tIcirc: 206,\r\n\tImacr: 298,\r\n\tIogon: 302,\r\n\tIukcy: 1030,\r\n\tJcirc: 308,\r\n\tJukcy: 1028,\r\n\tKappa: 922,\r\n\tOElig: 338,\r\n\tOcirc: 212,\r\n\tOmacr: 332,\r\n\tOmega: 937,\r\n\tPrime: 8243,\r\n\tRBarr: 10512,\r\n\tScirc: 348,\r\n\tSigma: 931,\r\n\tTHORN: 222,\r\n\tTRADE: 8482,\r\n\tTSHcy: 1035,\r\n\tTheta: 920,\r\n\tTilde: 8764,\r\n\tUbrcy: 1038,\r\n\tUcirc: 219,\r\n\tUmacr: 362,\r\n\tUnion: 8899,\r\n\tUogon: 370,\r\n\tUpTee: 8869,\r\n\tUring: 366,\r\n\tVDash: 8875,\r\n\tVdash: 8873,\r\n\tWcirc: 372,\r\n\tWedge: 8896,\r\n\tYcirc: 374,\r\n\tacirc: 226,\r\n\tacute: 180,\r\n\taelig: 230,\r\n\taleph: 8501,\r\n\talpha: 945,\r\n\tamacr: 257,\r\n\tamalg: 10815,\r\n\tangle: 8736,\r\n\tangrt: 8735,\r\n\tangst: 8491,\r\n\taogon: 261,\r\n\taring: 229,\r\n\tasymp: 8776,\r\n\tawint: 10769,\r\n\tbcong: 8780,\r\n\tbdquo: 8222,\r\n\tbepsi: 1014,\r\n\tblank: 9251,\r\n\tblk12: 9618,\r\n\tblk14: 9617,\r\n\tblk34: 9619,\r\n\tblock: 9608,\r\n\tboxDL: 9559,\r\n\tboxDR: 9556,\r\n\tboxDl: 9558,\r\n\tboxDr: 9555,\r\n\tboxHD: 9574,\r\n\tboxHU: 9577,\r\n\tboxHd: 9572,\r\n\tboxHu: 9575,\r\n\tboxUL: 9565,\r\n\tboxUR: 9562,\r\n\tboxUl: 9564,\r\n\tboxUr: 9561,\r\n\tboxVH: 9580,\r\n\tboxVL: 9571,\r\n\tboxVR: 9568,\r\n\tboxVh: 9579,\r\n\tboxVl: 9570,\r\n\tboxVr: 9567,\r\n\tboxdL: 9557,\r\n\tboxdR: 9554,\r\n\tboxdl: 9488,\r\n\tboxdr: 9484,\r\n\tboxhD: 9573,\r\n\tboxhU: 9576,\r\n\tboxhd: 9516,\r\n\tboxhu: 9524,\r\n\tboxuL: 9563,\r\n\tboxuR: 9560,\r\n\tboxul: 9496,\r\n\tboxur: 9492,\r\n\tboxvH: 9578,\r\n\tboxvL: 9569,\r\n\tboxvR: 9566,\r\n\tboxvh: 9532,\r\n\tboxvl: 9508,\r\n\tboxvr: 9500,\r\n\tbreve: 728,\r\n\tbsemi: 8271,\r\n\tbsime: 8909,\r\n\tbsolb: 10693,\r\n\tbumpE: 10926,\r\n\tbumpe: 8783,\r\n\tcaret: 8257,\r\n\tcaron: 711,\r\n\tccaps: 10829,\r\n\tccirc: 265,\r\n\tccups: 10828,\r\n\tcedil: 184,\r\n\tcheck: 10003,\r\n\tclubs: 9827,\r\n\tcolon: 58,\r\n\tcomma: 44,\r\n\tcrarr: 8629,\r\n\tcross: 10007,\r\n\tcsube: 10961,\r\n\tcsupe: 10962,\r\n\tctdot: 8943,\r\n\tcuepr: 8926,\r\n\tcuesc: 8927,\r\n\tcupor: 10821,\r\n\tcuvee: 8910,\r\n\tcuwed: 8911,\r\n\tcwint: 8753,\r\n\tdashv: 8867,\r\n\tdblac: 733,\r\n\tddarr: 8650,\r\n\tdelta: 948,\r\n\tdharl: 8643,\r\n\tdharr: 8642,\r\n\tdiams: 9830,\r\n\tdisin: 8946,\r\n\tdoteq: 8784,\r\n\tdtdot: 8945,\r\n\tdtrif: 9662,\r\n\tduarr: 8693,\r\n\tduhar: 10607,\r\n\teDDot: 10871,\r\n\tecirc: 234,\r\n\tefDot: 8786,\r\n\temacr: 275,\r\n\tempty: 8709,\r\n\teogon: 281,\r\n\teplus: 10865,\r\n\tepsiv: 949,\r\n\teqsim: 8770,\r\n\tequiv: 8801,\r\n\terDot: 8787,\r\n\terarr: 10609,\r\n\tesdot: 8784,\r\n\texist: 8707,\r\n\tfflig: 64256,\r\n\tfilig: 64257,\r\n\tfllig: 64258,\r\n\tfltns: 9649,\r\n\tforkv: 10969,\r\n\tfrasl: 8260,\r\n\tfrown: 8994,\r\n\tgamma: 947,\r\n\tgcirc: 285,\r\n\tgescc: 10921,\r\n\tgimel: 8503,\r\n\tgneqq: 8809,\r\n\tgnsim: 8935,\r\n\tgrave: 96,\r\n\tgsime: 10894,\r\n\tgsiml: 10896,\r\n\tgtcir: 10874,\r\n\tgtdot: 8919,\r\n\tharrw: 8621,\r\n\thcirc: 293,\r\n\thoarr: 8703,\r\n\ticirc: 238,\r\n\tiexcl: 161,\r\n\tiiint: 8749,\r\n\tiiota: 8489,\r\n\tijlig: 307,\r\n\timacr: 299,\r\n\timage: 8465,\r\n\timath: 305,\r\n\timped: 437,\r\n\tinfin: 8734,\r\n\tiogon: 303,\r\n\tiprod: 10812,\r\n\tisinE: 8953,\r\n\tisins: 8948,\r\n\tisinv: 8712,\r\n\tiukcy: 1110,\r\n\tjcirc: 309,\r\n\tjmath: 567,\r\n\tjukcy: 1108,\r\n\tkappa: 954,\r\n\tlAarr: 8666,\r\n\tlBarr: 10510,\r\n\tlangd: 10641,\r\n\tlaquo: 171,\r\n\tlarrb: 8676,\r\n\tlbarr: 10508,\r\n\tlbbrk: 10098,\r\n\tlbrke: 10635,\r\n\tlceil: 8968,\r\n\tldquo: 8220,\r\n\tlescc: 10920,\r\n\tlhard: 8637,\r\n\tlharu: 8636,\r\n\tlhblk: 9604,\r\n\tllarr: 8647,\r\n\tlltri: 9722,\r\n\tlneqq: 8808,\r\n\tlnsim: 8934,\r\n\tloang: 10220,\r\n\tloarr: 8701,\r\n\tlobrk: 10214,\r\n\tlopar: 10629,\r\n\tlrarr: 8646,\r\n\tlrhar: 8651,\r\n\tlrtri: 8895,\r\n\tlsime: 10893,\r\n\tlsimg: 10895,\r\n\tlsquo: 8216,\r\n\tltcir: 10873,\r\n\tltdot: 8918,\r\n\tltrie: 8884,\r\n\tltrif: 9666,\r\n\tmDDot: 8762,\r\n\tmdash: 8212,\r\n\tmicro: 181,\r\n\tminus: 8722,\r\n\tmumap: 8888,\r\n\tnabla: 8711,\r\n\tnapos: 329,\r\n\tnatur: 9838,\r\n\tncong: 8775,\r\n\tndash: 8211,\r\n\tneArr: 8663,\r\n\tnearr: 8599,\r\n\tngsim: 8821,\r\n\tnhArr: 8654,\r\n\tnharr: 8622,\r\n\tnhpar: 10994,\r\n\tnlArr: 8653,\r\n\tnlarr: 8602,\r\n\tnless: 8814,\r\n\tnlsim: 8820,\r\n\tnltri: 8938,\r\n\tnotin: 8713,\r\n\tnotni: 8716,\r\n\tnprec: 8832,\r\n\tnrArr: 8655,\r\n\tnrarr: 8603,\r\n\tnrtri: 8939,\r\n\tnsime: 8772,\r\n\tnsmid: 8740,\r\n\tnspar: 8742,\r\n\tnsube: 8840,\r\n\tnsucc: 8833,\r\n\tnsupe: 8841,\r\n\tnumsp: 8199,\r\n\tnwArr: 8662,\r\n\tnwarr: 8598,\r\n\tocirc: 244,\r\n\todash: 8861,\r\n\toelig: 339,\r\n\tofcir: 10687,\r\n\tohbar: 10677,\r\n\tolarr: 8634,\r\n\tolcir: 10686,\r\n\toline: 8254,\r\n\tomacr: 333,\r\n\tomega: 969,\r\n\toperp: 10681,\r\n\toplus: 8853,\r\n\torarr: 8635,\r\n\torder: 8500,\r\n\tovbar: 9021,\r\n\tparsl: 11005,\r\n\tphone: 9742,\r\n\tplusb: 8862,\r\n\tpluse: 10866,\r\n\tpound: 163,\r\n\tprcue: 8828,\r\n\tprime: 8242,\r\n\tprnap: 10937,\r\n\tprsim: 8830,\r\n\tquest: 63,\r\n\trAarr: 8667,\r\n\trBarr: 10511,\r\n\tradic: 8730,\r\n\trangd: 10642,\r\n\trange: 10661,\r\n\traquo: 187,\r\n\trarrb: 8677,\r\n\trarrc: 10547,\r\n\trarrw: 8605,\r\n\tratio: 8758,\r\n\trbarr: 10509,\r\n\trbbrk: 10099,\r\n\trbrke: 10636,\r\n\trceil: 8969,\r\n\trdquo: 8221,\r\n\treals: 8477,\r\n\trhard: 8641,\r\n\trharu: 8640,\r\n\trlarr: 8644,\r\n\trlhar: 8652,\r\n\trnmid: 10990,\r\n\troang: 10221,\r\n\troarr: 8702,\r\n\trobrk: 10215,\r\n\tropar: 10630,\r\n\trrarr: 8649,\r\n\trsquo: 8217,\r\n\trtrie: 8885,\r\n\trtrif: 9656,\r\n\tsbquo: 8218,\r\n\tsccue: 8829,\r\n\tscirc: 349,\r\n\tscnap: 10938,\r\n\tscsim: 8831,\r\n\tsdotb: 8865,\r\n\tsdote: 10854,\r\n\tseArr: 8664,\r\n\tsearr: 8600,\r\n\tsetmn: 8726,\r\n\tsharp: 9839,\r\n\tsigma: 963,\r\n\tsimeq: 8771,\r\n\tsimgE: 10912,\r\n\tsimlE: 10911,\r\n\tsimne: 8774,\r\n\tslarr: 8592,\r\n\tsmile: 8995,\r\n\tsqcap: 8851,\r\n\tsqcup: 8852,\r\n\tsqsub: 8847,\r\n\tsqsup: 8848,\r\n\tsrarr: 8594,\r\n\tstarf: 9733,\r\n\tstrns: 175,\r\n\tsubnE: 10955,\r\n\tsubne: 8842,\r\n\tsupnE: 10956,\r\n\tsupne: 8843,\r\n\tswArr: 8665,\r\n\tswarr: 8601,\r\n\tszlig: 223,\r\n\ttheta: 952,\r\n\tthkap: 8776,\r\n\tthorn: 254,\r\n\ttilde: 732,\r\n\ttimes: 215,\r\n\ttrade: 8482,\r\n\ttrisb: 10701,\r\n\ttshcy: 1115,\r\n\ttwixt: 8812,\r\n\tubrcy: 1118,\r\n\tucirc: 251,\r\n\tudarr: 8645,\r\n\tudhar: 10606,\r\n\tuharl: 8639,\r\n\tuharr: 8638,\r\n\tuhblk: 9600,\r\n\tultri: 9720,\r\n\tumacr: 363,\r\n\tuogon: 371,\r\n\tuplus: 8846,\r\n\tupsih: 978,\r\n\turing: 367,\r\n\turtri: 9721,\r\n\tutdot: 8944,\r\n\tutrif: 9652,\r\n\tuuarr: 8648,\r\n\tvBarv: 10985,\r\n\tvDash: 8872,\r\n\tvarpi: 982,\r\n\tvdash: 8866,\r\n\tveeeq: 8794,\r\n\tvltri: 8882,\r\n\tvprop: 8733,\r\n\tvrtri: 8883,\r\n\twcirc: 373,\r\n\twedge: 8743,\r\n\txcirc: 9711,\r\n\txdtri: 9661,\r\n\txhArr: 10234,\r\n\txharr: 10231,\r\n\txlArr: 10232,\r\n\txlarr: 10229,\r\n\txodot: 10752,\r\n\txrArr: 10233,\r\n\txrarr: 10230,\r\n\txutri: 9651,\r\n\tycirc: 375,\r\n\tAopf: 120120,\r\n\tAscr: 119964,\r\n\tAuml: 196,\r\n\tBarv: 10983,\r\n\tBeta: 914,\r\n\tBopf: 120121,\r\n\tBscr: 8492,\r\n\tCHcy: 1063,\r\n\tCOPY: 169,\r\n\tCdot: 266,\r\n\tCopf: 8450,\r\n\tCscr: 119966,\r\n\tDJcy: 1026,\r\n\tDScy: 1029,\r\n\tDZcy: 1039,\r\n\tDarr: 8609,\r\n\tDopf: 120123,\r\n\tDscr: 119967,\r\n\tEdot: 278,\r\n\tEopf: 120124,\r\n\tEscr: 8496,\r\n\tEsim: 10867,\r\n\tEuml: 203,\r\n\tFopf: 120125,\r\n\tFscr: 8497,\r\n\tGJcy: 1027,\r\n\tGdot: 288,\r\n\tGopf: 120126,\r\n\tGscr: 119970,\r\n\tHopf: 8461,\r\n\tHscr: 8459,\r\n\tIEcy: 1045,\r\n\tIOcy: 1025,\r\n\tIdot: 304,\r\n\tIopf: 120128,\r\n\tIota: 921,\r\n\tIscr: 8464,\r\n\tIuml: 207,\r\n\tJopf: 120129,\r\n\tJscr: 119973,\r\n\tKHcy: 1061,\r\n\tKJcy: 1036,\r\n\tKopf: 120130,\r\n\tKscr: 119974,\r\n\tLJcy: 1033,\r\n\tLang: 10218,\r\n\tLarr: 8606,\r\n\tLopf: 120131,\r\n\tLscr: 8466,\r\n\tMopf: 120132,\r\n\tMscr: 8499,\r\n\tNJcy: 1034,\r\n\tNopf: 8469,\r\n\tNscr: 119977,\r\n\tOopf: 120134,\r\n\tOscr: 119978,\r\n\tOuml: 214,\r\n\tPopf: 8473,\r\n\tPscr: 119979,\r\n\tQUOT: 34,\r\n\tQopf: 8474,\r\n\tQscr: 119980,\r\n\tRang: 10219,\r\n\tRarr: 8608,\r\n\tRopf: 8477,\r\n\tRscr: 8475,\r\n\tSHcy: 1064,\r\n\tSopf: 120138,\r\n\tSqrt: 8730,\r\n\tSscr: 119982,\r\n\tStar: 8902,\r\n\tTScy: 1062,\r\n\tTopf: 120139,\r\n\tTscr: 119983,\r\n\tUarr: 8607,\r\n\tUopf: 120140,\r\n\tUpsi: 978,\r\n\tUscr: 119984,\r\n\tUuml: 220,\r\n\tVbar: 10987,\r\n\tVert: 8214,\r\n\tVopf: 120141,\r\n\tVscr: 119985,\r\n\tWopf: 120142,\r\n\tWscr: 119986,\r\n\tXopf: 120143,\r\n\tXscr: 119987,\r\n\tYAcy: 1071,\r\n\tYIcy: 1031,\r\n\tYUcy: 1070,\r\n\tYopf: 120144,\r\n\tYscr: 119988,\r\n\tYuml: 376,\r\n\tZHcy: 1046,\r\n\tZdot: 379,\r\n\tZeta: 918,\r\n\tZopf: 8484,\r\n\tZscr: 119989,\r\n\tandd: 10844,\r\n\tandv: 10842,\r\n\tange: 10660,\r\n\taopf: 120146,\r\n\tapid: 8779,\r\n\tapos: 39,\r\n\tascr: 119990,\r\n\tauml: 228,\r\n\tbNot: 10989,\r\n\tbbrk: 9141,\r\n\tbeta: 946,\r\n\tbeth: 8502,\r\n\tbnot: 8976,\r\n\tbopf: 120147,\r\n\tboxH: 9552,\r\n\tboxV: 9553,\r\n\tboxh: 9472,\r\n\tboxv: 9474,\r\n\tbscr: 119991,\r\n\tbsim: 8765,\r\n\tbsol: 92,\r\n\tbull: 8226,\r\n\tbump: 8782,\r\n\tcdot: 267,\r\n\tcent: 162,\r\n\tchcy: 1095,\r\n\tcirE: 10691,\r\n\tcirc: 710,\r\n\tcire: 8791,\r\n\tcomp: 8705,\r\n\tcong: 8773,\r\n\tcopf: 120148,\r\n\tcopy: 169,\r\n\tcscr: 119992,\r\n\tcsub: 10959,\r\n\tcsup: 10960,\r\n\tdArr: 8659,\r\n\tdHar: 10597,\r\n\tdarr: 8595,\r\n\tdash: 8208,\r\n\tdiam: 8900,\r\n\tdjcy: 1106,\r\n\tdopf: 120149,\r\n\tdscr: 119993,\r\n\tdscy: 1109,\r\n\tdsol: 10742,\r\n\tdtri: 9663,\r\n\tdzcy: 1119,\r\n\teDot: 8785,\r\n\tecir: 8790,\r\n\tedot: 279,\r\n\temsp: 8195,\r\n\tensp: 8194,\r\n\teopf: 120150,\r\n\tepar: 8917,\r\n\tepsi: 1013,\r\n\tescr: 8495,\r\n\tesim: 8770,\r\n\teuml: 235,\r\n\teuro: 8364,\r\n\texcl: 33,\r\n\tflat: 9837,\r\n\tfnof: 402,\r\n\tfopf: 120151,\r\n\tfork: 8916,\r\n\tfscr: 119995,\r\n\tgdot: 289,\r\n\tgeqq: 8807,\r\n\tgjcy: 1107,\r\n\tgnap: 10890,\r\n\tgneq: 10888,\r\n\tgopf: 120152,\r\n\tgscr: 8458,\r\n\tgsim: 8819,\r\n\tgtcc: 10919,\r\n\thArr: 8660,\r\n\thalf: 189,\r\n\tharr: 8596,\r\n\thbar: 8463,\r\n\thopf: 120153,\r\n\thscr: 119997,\r\n\tiecy: 1077,\r\n\timof: 8887,\r\n\tiocy: 1105,\r\n\tiopf: 120154,\r\n\tiota: 953,\r\n\tiscr: 119998,\r\n\tisin: 8712,\r\n\tiuml: 239,\r\n\tjopf: 120155,\r\n\tjscr: 119999,\r\n\tkhcy: 1093,\r\n\tkjcy: 1116,\r\n\tkopf: 120156,\r\n\tkscr: 120000,\r\n\tlArr: 8656,\r\n\tlHar: 10594,\r\n\tlang: 10216,\r\n\tlarr: 8592,\r\n\tlate: 10925,\r\n\tlcub: 123,\r\n\tldca: 10550,\r\n\tldsh: 8626,\r\n\tleqq: 8806,\r\n\tljcy: 1113,\r\n\tlnap: 10889,\r\n\tlneq: 10887,\r\n\tlopf: 120157,\r\n\tlozf: 10731,\r\n\tlpar: 40,\r\n\tlscr: 120001,\r\n\tlsim: 8818,\r\n\tlsqb: 91,\r\n\tltcc: 10918,\r\n\tltri: 9667,\r\n\tmacr: 175,\r\n\tmale: 9794,\r\n\tmalt: 10016,\r\n\tmlcp: 10971,\r\n\tmldr: 8230,\r\n\tmopf: 120158,\r\n\tmscr: 120002,\r\n\tnbsp: 160,\r\n\tncap: 10819,\r\n\tncup: 10818,\r\n\tngeq: 8817,\r\n\tngtr: 8815,\r\n\tnisd: 8954,\r\n\tnjcy: 1114,\r\n\tnldr: 8229,\r\n\tnleq: 8816,\r\n\tnmid: 8740,\r\n\tnopf: 120159,\r\n\tnpar: 8742,\r\n\tnscr: 120003,\r\n\tnsim: 8769,\r\n\tnsub: 8836,\r\n\tnsup: 8837,\r\n\tntgl: 8825,\r\n\tntlg: 8824,\r\n\toast: 8859,\r\n\tocir: 8858,\r\n\todiv: 10808,\r\n\todot: 8857,\r\n\togon: 731,\r\n\toint: 8750,\r\n\tomid: 10678,\r\n\toopf: 120160,\r\n\topar: 10679,\r\n\tordf: 170,\r\n\tordm: 186,\r\n\toror: 10838,\r\n\toscr: 8500,\r\n\tosol: 8856,\r\n\touml: 246,\r\n\tpara: 182,\r\n\tpart: 8706,\r\n\tperp: 8869,\r\n\tphiv: 966,\r\n\tplus: 43,\r\n\tpopf: 120161,\r\n\tprap: 10935,\r\n\tprec: 8826,\r\n\tprnE: 10933,\r\n\tprod: 8719,\r\n\tprop: 8733,\r\n\tpscr: 120005,\r\n\tqint: 10764,\r\n\tqopf: 120162,\r\n\tqscr: 120006,\r\n\tquot: 34,\r\n\trArr: 8658,\r\n\trHar: 10596,\r\n\trace: 10714,\r\n\trang: 10217,\r\n\trarr: 8594,\r\n\trcub: 125,\r\n\trdca: 10551,\r\n\trdsh: 8627,\r\n\treal: 8476,\r\n\trect: 9645,\r\n\trhov: 1009,\r\n\tring: 730,\r\n\tropf: 120163,\r\n\trpar: 41,\r\n\trscr: 120007,\r\n\trsqb: 93,\r\n\trtri: 9657,\r\n\tscap: 10936,\r\n\tscnE: 10934,\r\n\tsdot: 8901,\r\n\tsect: 167,\r\n\tsemi: 59,\r\n\tsext: 10038,\r\n\tshcy: 1096,\r\n\tsime: 8771,\r\n\tsimg: 10910,\r\n\tsiml: 10909,\r\n\tsmid: 8739,\r\n\tsmte: 10924,\r\n\tsolb: 10692,\r\n\tsopf: 120164,\r\n\tspar: 8741,\r\n\tsquf: 9642,\r\n\tsscr: 120008,\r\n\tstar: 9734,\r\n\tsubE: 10949,\r\n\tsube: 8838,\r\n\tsucc: 8827,\r\n\tsung: 9834,\r\n\tsup1: 185,\r\n\tsup2: 178,\r\n\tsup3: 179,\r\n\tsupE: 10950,\r\n\tsupe: 8839,\r\n\ttbrk: 9140,\r\n\ttdot: 8411,\r\n\ttint: 8749,\r\n\ttoea: 10536,\r\n\ttopf: 120165,\r\n\ttosa: 10537,\r\n\ttrie: 8796,\r\n\ttscr: 120009,\r\n\ttscy: 1094,\r\n\tuArr: 8657,\r\n\tuHar: 10595,\r\n\tuarr: 8593,\r\n\tuopf: 120166,\r\n\tupsi: 965,\r\n\tuscr: 120010,\r\n\tutri: 9653,\r\n\tuuml: 252,\r\n\tvArr: 8661,\r\n\tvBar: 10984,\r\n\tvarr: 8597,\r\n\tvert: 124,\r\n\tvopf: 120167,\r\n\tvscr: 120011,\r\n\twopf: 120168,\r\n\twscr: 120012,\r\n\txcap: 8898,\r\n\txcup: 8899,\r\n\txmap: 10236,\r\n\txnis: 8955,\r\n\txopf: 120169,\r\n\txscr: 120013,\r\n\txvee: 8897,\r\n\tyacy: 1103,\r\n\tyicy: 1111,\r\n\tyopf: 120170,\r\n\tyscr: 120014,\r\n\tyucy: 1102,\r\n\tyuml: 255,\r\n\tzdot: 380,\r\n\tzeta: 950,\r\n\tzhcy: 1078,\r\n\tzopf: 120171,\r\n\tzscr: 120015,\r\n\tzwnj: 8204,\r\n\tAMP: 38,\r\n\tAcy: 1040,\r\n\tAfr: 120068,\r\n\tAnd: 10835,\r\n\tBcy: 1041,\r\n\tBfr: 120069,\r\n\tCap: 8914,\r\n\tCfr: 8493,\r\n\tChi: 935,\r\n\tCup: 8915,\r\n\tDcy: 1044,\r\n\tDel: 8711,\r\n\tDfr: 120071,\r\n\tDot: 168,\r\n\tENG: 330,\r\n\tETH: 208,\r\n\tEcy: 1069,\r\n\tEfr: 120072,\r\n\tEta: 919,\r\n\tFcy: 1060,\r\n\tFfr: 120073,\r\n\tGcy: 1043,\r\n\tGfr: 120074,\r\n\tHat: 94,\r\n\tHfr: 8460,\r\n\tIcy: 1048,\r\n\tIfr: 8465,\r\n\tInt: 8748,\r\n\tJcy: 1049,\r\n\tJfr: 120077,\r\n\tKcy: 1050,\r\n\tKfr: 120078,\r\n\tLcy: 1051,\r\n\tLfr: 120079,\r\n\tLsh: 8624,\r\n\tMap: 10501,\r\n\tMcy: 1052,\r\n\tMfr: 120080,\r\n\tNcy: 1053,\r\n\tNfr: 120081,\r\n\tNot: 10988,\r\n\tOcy: 1054,\r\n\tOfr: 120082,\r\n\tPcy: 1055,\r\n\tPfr: 120083,\r\n\tPhi: 934,\r\n\tPsi: 936,\r\n\tQfr: 120084,\r\n\tREG: 174,\r\n\tRcy: 1056,\r\n\tRfr: 8476,\r\n\tRho: 929,\r\n\tRsh: 8625,\r\n\tScy: 1057,\r\n\tSfr: 120086,\r\n\tSub: 8912,\r\n\tSum: 8721,\r\n\tSup: 8913,\r\n\tTab: 9,\r\n\tTau: 932,\r\n\tTcy: 1058,\r\n\tTfr: 120087,\r\n\tUcy: 1059,\r\n\tUfr: 120088,\r\n\tVcy: 1042,\r\n\tVee: 8897,\r\n\tVfr: 120089,\r\n\tWfr: 120090,\r\n\tXfr: 120091,\r\n\tYcy: 1067,\r\n\tYfr: 120092,\r\n\tZcy: 1047,\r\n\tZfr: 8488,\r\n\tacd: 8767,\r\n\tacy: 1072,\r\n\tafr: 120094,\r\n\tamp: 38,\r\n\tand: 8743,\r\n\tang: 8736,\r\n\tapE: 10864,\r\n\tape: 8778,\r\n\tast: 42,\r\n\tbcy: 1073,\r\n\tbfr: 120095,\r\n\tbot: 8869,\r\n\tcap: 8745,\r\n\tcfr: 120096,\r\n\tchi: 967,\r\n\tcir: 9675,\r\n\tcup: 8746,\r\n\tdcy: 1076,\r\n\tdeg: 176,\r\n\tdfr: 120097,\r\n\tdie: 168,\r\n\tdiv: 247,\r\n\tdot: 729,\r\n\tecy: 1101,\r\n\tefr: 120098,\r\n\tegs: 10902,\r\n\tell: 8467,\r\n\tels: 10901,\r\n\teng: 331,\r\n\teta: 951,\r\n\teth: 240,\r\n\tfcy: 1092,\r\n\tffr: 120099,\r\n\tgEl: 10892,\r\n\tgap: 10886,\r\n\tgcy: 1075,\r\n\tgel: 8923,\r\n\tgeq: 8805,\r\n\tges: 10878,\r\n\tgfr: 120100,\r\n\tggg: 8921,\r\n\tglE: 10898,\r\n\tgla: 10917,\r\n\tglj: 10916,\r\n\tgnE: 8809,\r\n\tgne: 10888,\r\n\thfr: 120101,\r\n\ticy: 1080,\r\n\tiff: 8660,\r\n\tifr: 120102,\r\n\tint: 8747,\r\n\tjcy: 1081,\r\n\tjfr: 120103,\r\n\tkcy: 1082,\r\n\tkfr: 120104,\r\n\tlEg: 10891,\r\n\tlap: 10885,\r\n\tlat: 10923,\r\n\tlcy: 1083,\r\n\tleg: 8922,\r\n\tleq: 8804,\r\n\tles: 10877,\r\n\tlfr: 120105,\r\n\tlgE: 10897,\r\n\tlnE: 8808,\r\n\tlne: 10887,\r\n\tloz: 9674,\r\n\tlrm: 8206,\r\n\tlsh: 8624,\r\n\tmap: 8614,\r\n\tmcy: 1084,\r\n\tmfr: 120106,\r\n\tmho: 8487,\r\n\tmid: 8739,\r\n\tnap: 8777,\r\n\tncy: 1085,\r\n\tnfr: 120107,\r\n\tnge: 8817,\r\n\tngt: 8815,\r\n\tnis: 8956,\r\n\tniv: 8715,\r\n\tnle: 8816,\r\n\tnlt: 8814,\r\n\tnot: 172,\r\n\tnpr: 8832,\r\n\tnsc: 8833,\r\n\tnum: 35,\r\n\tocy: 1086,\r\n\tofr: 120108,\r\n\togt: 10689,\r\n\tohm: 8486,\r\n\tolt: 10688,\r\n\tord: 10845,\r\n\torv: 10843,\r\n\tpar: 8741,\r\n\tpcy: 1087,\r\n\tpfr: 120109,\r\n\tphi: 966,\r\n\tpiv: 982,\r\n\tprE: 10931,\r\n\tpre: 10927,\r\n\tpsi: 968,\r\n\tqfr: 120110,\r\n\trcy: 1088,\r\n\treg: 174,\r\n\trfr: 120111,\r\n\trho: 961,\r\n\trlm: 8207,\r\n\trsh: 8625,\r\n\tscE: 10932,\r\n\tsce: 10928,\r\n\tscy: 1089,\r\n\tsfr: 120112,\r\n\tshy: 173,\r\n\tsim: 8764,\r\n\tsmt: 10922,\r\n\tsol: 47,\r\n\tsqu: 9633,\r\n\tsub: 8834,\r\n\tsum: 8721,\r\n\tsup: 8835,\r\n\ttau: 964,\r\n\ttcy: 1090,\r\n\ttfr: 120113,\r\n\ttop: 8868,\r\n\tucy: 1091,\r\n\tufr: 120114,\r\n\tuml: 168,\r\n\tvcy: 1074,\r\n\tvee: 8744,\r\n\tvfr: 120115,\r\n\twfr: 120116,\r\n\txfr: 120117,\r\n\tycy: 1099,\r\n\tyen: 165,\r\n\tyfr: 120118,\r\n\tzcy: 1079,\r\n\tzfr: 120119,\r\n\tzwj: 8205,\r\n\tDD: 8517,\r\n\tGT: 62,\r\n\tGg: 8921,\r\n\tGt: 8811,\r\n\tIm: 8465,\r\n\tLT: 60,\r\n\tLl: 8920,\r\n\tLt: 8810,\r\n\tMu: 924,\r\n\tNu: 925,\r\n\tOr: 10836,\r\n\tPi: 928,\r\n\tPr: 10939,\r\n\tRe: 8476,\r\n\tSc: 10940,\r\n\tXi: 926,\r\n\tac: 8766,\r\n\taf: 8289,\r\n\tap: 8776,\r\n\tdd: 8518,\r\n\tee: 8519,\r\n\teg: 10906,\r\n\tel: 10905,\r\n\tgE: 8807,\r\n\tge: 8805,\r\n\tgg: 8811,\r\n\tgl: 8823,\r\n\tgt: 62,\r\n\tic: 8291,\r\n\tii: 8520,\r\n\tin: 8712,\r\n\tit: 8290,\r\n\tlE: 8806,\r\n\tle: 8804,\r\n\tlg: 8822,\r\n\tll: 8810,\r\n\tlt: 60,\r\n\tmp: 8723,\r\n\tmu: 956,\r\n\tne: 8800,\r\n\tni: 8715,\r\n\tnu: 957,\r\n\toS: 9416,\r\n\tor: 8744,\r\n\tpi: 960,\r\n\tpm: 177,\r\n\tpr: 8826,\r\n\trx: 8478,\r\n\tsc: 8827,\r\n\twp: 8472,\r\n\twr: 8768,\r\n\txi: 958,\r\n};\r\n","import htmlEntities from './entities';\r\n\r\nconst windows1252 = [\r\n\t8364,\r\n\t129,\r\n\t8218,\r\n\t402,\r\n\t8222,\r\n\t8230,\r\n\t8224,\r\n\t8225,\r\n\t710,\r\n\t8240,\r\n\t352,\r\n\t8249,\r\n\t338,\r\n\t141,\r\n\t381,\r\n\t143,\r\n\t144,\r\n\t8216,\r\n\t8217,\r\n\t8220,\r\n\t8221,\r\n\t8226,\r\n\t8211,\r\n\t8212,\r\n\t732,\r\n\t8482,\r\n\t353,\r\n\t8250,\r\n\t339,\r\n\t157,\r\n\t382,\r\n\t376,\r\n];\r\nconst entityPattern = new RegExp(\r\n\t`&(#?(?:x[\\\\w\\\\d]+|\\\\d+|${Object.keys(htmlEntities).join('|')}));?`,\r\n\t'g'\r\n);\r\n\r\nexport function decodeCharacterReferences(html: string) {\r\n\treturn html.replace(entityPattern, (match, entity) => {\r\n\t\tlet code;\r\n\r\n\t\t// Handle named entities\r\n\t\tif (entity[0] !== '#') {\r\n\t\t\tcode = htmlEntities[entity];\r\n\t\t} else if (entity[1] === 'x') {\r\n\t\t\tcode = parseInt(entity.substring(2), 16);\r\n\t\t} else {\r\n\t\t\tcode = parseInt(entity.substring(1), 10);\r\n\t\t}\r\n\r\n\t\tif (!code) {\r\n\t\t\treturn match;\r\n\t\t}\r\n\r\n\t\treturn String.fromCodePoint(validateCode(code));\r\n\t});\r\n}\r\n\r\nconst NUL = 0;\r\n\r\n// some code points are verboten. If we were inserting HTML, the browser would replace the illegal\r\n// code points with alternatives in some cases - since we're bypassing that mechanism, we need\r\n// to replace them ourselves\r\n//\r\n// Source: http://en.wikipedia.org/wiki/Character_encodings_in_HTML#Illegal_characters\r\nfunction validateCode(code: number) {\r\n\t// line feed becomes generic whitespace\r\n\tif (code === 10) {\r\n\t\treturn 32;\r\n\t}\r\n\r\n\t// ASCII range. (Why someone would use HTML entities for ASCII characters I don't know, but...)\r\n\tif (code < 128) {\r\n\t\treturn code;\r\n\t}\r\n\r\n\t// code points 128-159 are dealt with leniently by browsers, but they're incorrect. We need\r\n\t// to correct the mistake or we'll end up with missing € signs and so on\r\n\tif (code <= 159) {\r\n\t\treturn windows1252[code - 128];\r\n\t}\r\n\r\n\t// basic multilingual plane\r\n\tif (code < 55296) {\r\n\t\treturn code;\r\n\t}\r\n\r\n\t// UTF-16 surrogate halves\r\n\tif (code <= 57343) {\r\n\t\treturn NUL;\r\n\t}\r\n\r\n\t// rest of the basic multilingual plane\r\n\tif (code <= 65535) {\r\n\t\treturn code;\r\n\t}\r\n\r\n\t// supplementary multilingual plane 0x10000 - 0x1ffff\r\n\tif (code >= 65536 && code <= 131071) {\r\n\t\treturn code;\r\n\t}\r\n\r\n\t// supplementary ideographic plane 0x20000 - 0x2ffff\r\n\tif (code >= 131072 && code <= 196607) {\r\n\t\treturn code;\r\n\t}\r\n\r\n\treturn NUL;\r\n}\r\n","const voidElementNames = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\r\n\r\nexport default function isVoidElementName(name: string) {\r\n\treturn voidElementNames.test(name) || name.toLowerCase() === '!doctype';\r\n}\r\n","export default function fuzzymatch(name: string, names: string[]) {\r\n\tconst set = new FuzzySet(names);\r\n\tconst matches = set.get(name);\r\n\r\n\treturn matches && matches[0] && matches[0][0] > 0.7 ? matches[0][1] : null;\r\n}\r\n\r\n// adapted from https://github.com/Glench/fuzzyset.js/blob/master/lib/fuzzyset.js\r\n// BSD Licensed\r\n\r\nconst GRAM_SIZE_LOWER = 2;\r\nconst GRAM_SIZE_UPPER = 3;\r\n\r\n// return an edit distance from 0 to 1\r\nfunction _distance(str1: string, str2: string) {\r\n\tif (str1 === null && str2 === null)\r\n\t\tthrow 'Trying to compare two null values';\r\n\tif (str1 === null || str2 === null) return 0;\r\n\tstr1 = String(str1);\r\n\tstr2 = String(str2);\r\n\r\n\tconst distance = levenshtein(str1, str2);\r\n\tif (str1.length > str2.length) {\r\n\t\treturn 1 - distance / str1.length;\r\n\t} else {\r\n\t\treturn 1 - distance / str2.length;\r\n\t}\r\n}\r\n\r\n// helper functions\r\nfunction levenshtein(str1: string, str2: string) {\r\n\tconst current: number[] = [];\r\n\tlet prev;\r\n\tlet value;\r\n\r\n\tfor (let i = 0; i <= str2.length; i++) {\r\n\t\tfor (let j = 0; j <= str1.length; j++) {\r\n\t\t\tif (i && j) {\r\n\t\t\t\tif (str1.charAt(j - 1) === str2.charAt(i - 1)) {\r\n\t\t\t\t\tvalue = prev;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvalue = Math.min(current[j], current[j - 1], prev) + 1;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvalue = i + j;\r\n\t\t\t}\r\n\r\n\t\t\tprev = current[j];\r\n\t\t\tcurrent[j] = value;\r\n\t\t}\r\n\t}\r\n\r\n\treturn current.pop();\r\n}\r\n\r\nconst _nonWordRe = /[^\\w, ]+/;\r\n\r\nfunction _iterateGrams(value: string, gramSize: number) {\r\n\tgramSize = gramSize || 2;\r\n\tconst simplified = '-' + value.toLowerCase().replace(_nonWordRe, '') + '-';\r\n\tconst lenDiff = gramSize - simplified.length;\r\n\tconst results = [];\r\n\r\n\tif (lenDiff > 0) {\r\n\t\tfor (let i = 0; i < lenDiff; ++i) {\r\n\t\t\tvalue += '-';\r\n\t\t}\r\n\t}\r\n\tfor (let i = 0; i < simplified.length - gramSize + 1; ++i) {\r\n\t\tresults.push(simplified.slice(i, i + gramSize));\r\n\t}\r\n\treturn results;\r\n}\r\n\r\nfunction _gramCounter(value: string, gramSize: number) {\r\n\t// return an object where key=gram, value=number of occurrences\r\n\tgramSize = gramSize || 2;\r\n\tconst result = {};\r\n\tconst grams = _iterateGrams(value, gramSize);\r\n\tlet i = 0;\r\n\r\n\tfor (i; i < grams.length; ++i) {\r\n\t\tif (grams[i] in result) {\r\n\t\t\tresult[grams[i]] += 1;\r\n\t\t} else {\r\n\t\t\tresult[grams[i]] = 1;\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nfunction sortDescending(a, b) {\r\n\treturn b[0] - a[0];\r\n}\r\n\r\nclass FuzzySet {\r\n\texactSet: object;\r\n\tmatchDict: object;\r\n\titems: object;\r\n\r\n\tconstructor(arr: string[]) {\r\n\t\t// define all the object functions and attributes\r\n\t\tthis.exactSet = {};\r\n\t\tthis.matchDict = {};\r\n\t\tthis.items = {};\r\n\r\n\t\t// initialization\r\n\t\tfor (let i = GRAM_SIZE_LOWER; i < GRAM_SIZE_UPPER + 1; ++i) {\r\n\t\t\tthis.items[i] = [];\r\n\t\t}\r\n\t\t// add all the items to the set\r\n\t\tfor (let i = 0; i < arr.length; ++i) {\r\n\t\t\tthis.add(arr[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tadd(value: string) {\r\n\t\tconst normalizedValue = value.toLowerCase();\r\n\t\tif (normalizedValue in this.exactSet) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tlet i = GRAM_SIZE_LOWER;\r\n\t\tfor (i; i < GRAM_SIZE_UPPER + 1; ++i) {\r\n\t\t\tthis._add(value, i);\r\n\t\t}\r\n\t}\r\n\r\n\t_add(value: string, gramSize: number) {\r\n\t\tconst normalizedValue = value.toLowerCase();\r\n\t\tconst items = this.items[gramSize] || [];\r\n\t\tconst index = items.length;\r\n\r\n\t\titems.push(0);\r\n\t\tconst gramCounts = _gramCounter(normalizedValue, gramSize);\r\n\t\tlet sumOfSquareGramCounts = 0;\r\n\t\tlet gram;\r\n\t\tlet gramCount;\r\n\r\n\t\tfor (gram in gramCounts) {\r\n\t\t\tgramCount = gramCounts[gram];\r\n\t\t\tsumOfSquareGramCounts += Math.pow(gramCount, 2);\r\n\t\t\tif (gram in this.matchDict) {\r\n\t\t\t\tthis.matchDict[gram].push([index, gramCount]);\r\n\t\t\t} else {\r\n\t\t\t\tthis.matchDict[gram] = [[index, gramCount]];\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst vectorNormal = Math.sqrt(sumOfSquareGramCounts);\r\n\t\titems[index] = [vectorNormal, normalizedValue];\r\n\t\tthis.items[gramSize] = items;\r\n\t\tthis.exactSet[normalizedValue] = value;\r\n\t};\r\n\r\n\tget(value: string) {\r\n\t\tconst normalizedValue = value.toLowerCase();\r\n\t\tconst result = this.exactSet[normalizedValue];\r\n\r\n\t\tif (result) {\r\n\t\t\treturn [[1, result]];\r\n\t\t}\r\n\r\n\t\tlet results = [];\r\n\t\t// start with high gram size and if there are no results, go to lower gram sizes\r\n\t\tfor (\r\n\t\t\tlet gramSize = GRAM_SIZE_UPPER;\r\n\t\t\tgramSize >= GRAM_SIZE_LOWER;\r\n\t\t\t--gramSize\r\n\t\t) {\r\n\t\t\tresults = this.__get(value, gramSize);\r\n\t\t\tif (results) {\r\n\t\t\t\treturn results;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t__get(value: string, gramSize: number) {\r\n\t\tconst normalizedValue = value.toLowerCase();\r\n\t\tconst matches = {};\r\n\t\tconst gramCounts = _gramCounter(normalizedValue, gramSize);\r\n\t\tconst items = this.items[gramSize];\r\n\t\tlet sumOfSquareGramCounts = 0;\r\n\t\tlet gram;\r\n\t\tlet gramCount;\r\n\t\tlet i;\r\n\t\tlet index;\r\n\t\tlet otherGramCount;\r\n\r\n\t\tfor (gram in gramCounts) {\r\n\t\t\tgramCount = gramCounts[gram];\r\n\t\t\tsumOfSquareGramCounts += Math.pow(gramCount, 2);\r\n\t\t\tif (gram in this.matchDict) {\r\n\t\t\t\tfor (i = 0; i < this.matchDict[gram].length; ++i) {\r\n\t\t\t\t\tindex = this.matchDict[gram][i][0];\r\n\t\t\t\t\totherGramCount = this.matchDict[gram][i][1];\r\n\t\t\t\t\tif (index in matches) {\r\n\t\t\t\t\t\tmatches[index] += gramCount * otherGramCount;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmatches[index] = gramCount * otherGramCount;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst vectorNormal = Math.sqrt(sumOfSquareGramCounts);\r\n\t\tlet results = [];\r\n\t\tlet matchScore;\r\n\r\n\t\t// build a results list of [score, str]\r\n\t\tfor (const matchIndex in matches) {\r\n\t\t\tmatchScore = matches[matchIndex];\r\n\t\t\tresults.push([\r\n\t\t\t\tmatchScore / (vectorNormal * items[matchIndex][0]),\r\n\t\t\t\titems[matchIndex][1],\r\n\t\t\t]);\r\n\t\t}\r\n\r\n\t\tresults.sort(sortDescending);\r\n\r\n\t\tlet newResults = [];\r\n\t\tconst endIndex = Math.min(50, results.length);\r\n\t\t// truncate somewhat arbitrarily to 50\r\n\t\tfor (let i = 0; i < endIndex; ++i) {\r\n\t\t\tnewResults.push([\r\n\t\t\t\t_distance(results[i][1], normalizedValue),\r\n\t\t\t\tresults[i][1],\r\n\t\t\t]);\r\n\t\t}\r\n\t\tresults = newResults;\r\n\t\tresults.sort(sortDescending);\r\n\r\n\t\tnewResults = [];\r\n\t\tfor (let i = 0; i < results.length; ++i) {\r\n\t\t\tif (results[i][0] == results[0][0]) {\r\n\t\t\t\tnewResults.push([results[i][0], this.exactSet[results[i][1]]]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn newResults;\r\n\t};\r\n}","import readExpression from '../read/expression';\r\nimport readScript from '../read/script';\r\nimport readStyle from '../read/style';\r\nimport { decodeCharacterReferences } from '../utils/html';\r\nimport isVoidElementName from '../../utils/isVoidElementName';\r\nimport { Parser } from '../index';\r\nimport { Node } from '../../interfaces';\r\nimport fuzzymatch from '../../utils/fuzzymatch';\r\nimport list from '../../utils/list';\r\n\r\nconst validTagName = /^\\!?[a-zA-Z]{1,}:?[a-zA-Z0-9\\-]*/;\r\n\r\nconst metaTags = new Map([\r\n\t['svelte:head', 'Head'],\r\n\t['svelte:options', 'Options'],\r\n\t['svelte:window', 'Window'],\r\n\t['svelte:body', 'Body']\r\n]);\r\n\r\nconst valid_meta_tags = Array.from(metaTags.keys()).concat('svelte:self', 'svelte:component');\r\n\r\nconst specials = new Map([\r\n\t[\r\n\t\t'script',\r\n\t\t{\r\n\t\t\tread: readScript,\r\n\t\t\tproperty: 'js',\r\n\t\t},\r\n\t],\r\n\t[\r\n\t\t'style',\r\n\t\t{\r\n\t\t\tread: readStyle,\r\n\t\t\tproperty: 'css',\r\n\t\t},\r\n\t],\r\n]);\r\n\r\nconst SELF = /^svelte:self(?=[\\s\\/>])/;\r\nconst COMPONENT = /^svelte:component(?=[\\s\\/>])/;\r\n\r\n// based on http://developers.whatwg.org/syntax.html#syntax-tag-omission\r\nconst disallowedContents = new Map([\r\n\t['li', new Set(['li'])],\r\n\t['dt', new Set(['dt', 'dd'])],\r\n\t['dd', new Set(['dt', 'dd'])],\r\n\t[\r\n\t\t'p',\r\n\t\tnew Set(\r\n\t\t\t'address article aside blockquote div dl fieldset footer form h1 h2 h3 h4 h5 h6 header hgroup hr main menu nav ol p pre section table ul'.split(\r\n\t\t\t\t' '\r\n\t\t\t)\r\n\t\t),\r\n\t],\r\n\t['rt', new Set(['rt', 'rp'])],\r\n\t['rp', new Set(['rt', 'rp'])],\r\n\t['optgroup', new Set(['optgroup'])],\r\n\t['option', new Set(['option', 'optgroup'])],\r\n\t['thead', new Set(['tbody', 'tfoot'])],\r\n\t['tbody', new Set(['tbody', 'tfoot'])],\r\n\t['tfoot', new Set(['tbody'])],\r\n\t['tr', new Set(['tr', 'tbody'])],\r\n\t['td', new Set(['td', 'th', 'tr'])],\r\n\t['th', new Set(['td', 'th', 'tr'])],\r\n]);\r\n\r\nfunction parentIsHead(stack) {\r\n\tlet i = stack.length;\r\n\twhile (i--) {\r\n\t\tconst { type } = stack[i];\r\n\t\tif (type === 'Head') return true;\r\n\t\tif (type === 'Element' || type === 'InlineComponent') return false;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nexport default function tag(parser: Parser) {\r\n\tconst start = parser.index++;\r\n\r\n\tlet parent = parser.current();\r\n\r\n\tif (parser.eat('!--')) {\r\n\t\tconst data = parser.readUntil(/-->/);\r\n\t\tparser.eat('-->', true, 'comment was left open, expected -->');\r\n\r\n\t\tparser.current().children.push({\r\n\t\t\tstart,\r\n\t\t\tend: parser.index,\r\n\t\t\ttype: 'Comment',\r\n\t\t\tdata,\r\n\t\t});\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst isClosingTag = parser.eat('/');\r\n\r\n\tconst name = readTagName(parser);\r\n\r\n\tif (metaTags.has(name)) {\r\n\t\tconst slug = metaTags.get(name).toLowerCase();\r\n\t\tif (isClosingTag) {\r\n\t\t\tif (\r\n\t\t\t\t(name === 'svelte:window' || name === 'svelte:body') &&\r\n\t\t\t\tparser.current().children.length\r\n\t\t\t) {\r\n\t\t\t\tparser.error({\r\n\t\t\t\t\tcode: `invalid-${name.slice(7)}-content`,\r\n\t\t\t\t\tmessage: `<${name}> cannot have children`\r\n\t\t\t\t}, parser.current().children[0].start);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (name in parser.metaTags) {\r\n\t\t\t\tparser.error({\r\n\t\t\t\t\tcode: `duplicate-${slug}`,\r\n\t\t\t\t\tmessage: `A component can only have one <${name}> tag`\r\n\t\t\t\t}, start);\r\n\t\t\t}\r\n\r\n\t\t\tif (parser.stack.length > 1) {\r\n\t\t\t\tparser.error({\r\n\t\t\t\t\tcode: `invalid-${slug}-placement`,\r\n\t\t\t\t\tmessage: `<${name}> tags cannot be inside elements or blocks`\r\n\t\t\t\t}, start);\r\n\t\t\t}\r\n\r\n\t\t\tparser.metaTags[name] = true;\r\n\t\t}\r\n\t}\r\n\r\n\tconst type = metaTags.has(name)\r\n\t\t? metaTags.get(name)\r\n\t\t: (/[A-Z]/.test(name[0]) || name === 'svelte:self' || name === 'svelte:component') ? 'InlineComponent'\r\n\t\t: name === 'title' && parentIsHead(parser.stack) ? 'Title'\r\n\t\t: name === 'slot' && !parser.customElement ? 'Slot' : 'Element';\r\n\r\n\tconst element: Node = {\r\n\t\tstart,\r\n\t\tend: null, // filled in later\r\n\t\ttype,\r\n\t\tname,\r\n\t\tattributes: [],\r\n\t\tchildren: [],\r\n\t};\r\n\r\n\tparser.allowWhitespace();\r\n\r\n\tif (isClosingTag) {\r\n\t\tif (isVoidElementName(name)) {\r\n\t\t\tparser.error({\r\n\t\t\t\tcode: `invalid-void-content`,\r\n\t\t\t\tmessage: `<${name}> is a void element and cannot have children, or a closing tag`\r\n\t\t\t}, start);\r\n\t\t}\r\n\r\n\t\tparser.eat('>', true);\r\n\r\n\t\t// close any elements that don't have their own closing tags, e.g. <div><p></div>\r\n\t\twhile (parent.name !== name) {\r\n\t\t\tif (parent.type !== 'Element')\r\n\t\t\t\tparser.error({\r\n\t\t\t\t\tcode: `invalid-closing-tag`,\r\n\t\t\t\t\tmessage: `</${name}> attempted to close an element that was not open`\r\n\t\t\t\t}, start);\r\n\r\n\t\t\tparent.end = start;\r\n\t\t\tparser.stack.pop();\r\n\r\n\t\t\tparent = parser.current();\r\n\t\t}\r\n\r\n\t\tparent.end = parser.index;\r\n\t\tparser.stack.pop();\r\n\r\n\t\treturn;\r\n\t} else if (disallowedContents.has(parent.name)) {\r\n\t\t// can this be a child of the parent element, or does it implicitly\r\n\t\t// close it, like `<li>one<li>two`?\r\n\t\tif (disallowedContents.get(parent.name).has(name)) {\r\n\t\t\tparent.end = start;\r\n\t\t\tparser.stack.pop();\r\n\t\t}\r\n\t}\r\n\r\n\t// TODO should this still error in in web component mode?\r\n\t// if (name === 'slot') {\r\n\t// \tlet i = parser.stack.length;\r\n\t// \twhile (i--) {\r\n\t// \t\tconst item = parser.stack[i];\r\n\t// \t\tif (item.type === 'EachBlock') {\r\n\t// \t\t\tparser.error({\r\n\t// \t\t\t\tcode: `invalid-slot-placement`,\r\n\t// \t\t\t\tmessage: `<slot> cannot be a child of an each-block`\r\n\t// \t\t\t}, start);\r\n\t// \t\t}\r\n\t// \t}\r\n\t// }\r\n\r\n\tconst uniqueNames = new Set();\r\n\r\n\tlet attribute;\r\n\twhile ((attribute = readAttribute(parser, uniqueNames))) {\r\n\t\tif (attribute.type === 'Binding' && !parser.allowBindings) {\r\n\t\t\tparser.error({\r\n\t\t\t\tcode: `binding-disabled`,\r\n\t\t\t\tmessage: `Two-way binding is disabled`\r\n\t\t\t}, attribute.start);\r\n\t\t}\r\n\r\n\t\telement.attributes.push(attribute);\r\n\t\tparser.allowWhitespace();\r\n\t}\r\n\r\n\tif (name === 'svelte:component') {\r\n\t\t// TODO post v2, treat this just as any other attribute\r\n\t\tconst index = element.attributes.findIndex(attr => attr.name === 'this');\r\n\t\tif (!~index) {\r\n\t\t\tparser.error({\r\n\t\t\t\tcode: `missing-component-definition`,\r\n\t\t\t\tmessage: `<svelte:component> must have a 'this' attribute`\r\n\t\t\t}, start);\r\n\t\t}\r\n\r\n\t\tconst definition = element.attributes.splice(index, 1)[0];\r\n\t\tif (definition.value === true || definition.value.length !== 1 || definition.value[0].type === 'Text') {\r\n\t\t\tparser.error({\r\n\t\t\t\tcode: `invalid-component-definition`,\r\n\t\t\t\tmessage: `invalid component definition`\r\n\t\t\t}, definition.start);\r\n\t\t}\r\n\r\n\t\telement.expression = definition.value[0].expression;\r\n\t}\r\n\r\n\t// special cases – top-level <script> and <style>\r\n\tif (specials.has(name) && parser.stack.length === 1) {\r\n\t\tconst special = specials.get(name);\r\n\r\n\t\tparser.eat('>', true);\r\n\t\tconst content = special.read(parser, start, element.attributes);\r\n\t\tif (content) parser[special.property].push(content);\r\n\t\treturn;\r\n\t}\r\n\r\n\tparser.current().children.push(element);\r\n\r\n\tconst selfClosing = parser.eat('/') || isVoidElementName(name);\r\n\r\n\tparser.eat('>', true);\r\n\r\n\tif (selfClosing) {\r\n\t\t// don't push self-closing elements onto the stack\r\n\t\telement.end = parser.index;\r\n\t} else if (name === 'textarea') {\r\n\t\t// special case\r\n\t\telement.children = readSequence(\r\n\t\t\tparser,\r\n\t\t\t() =>\r\n\t\t\t\tparser.template.slice(parser.index, parser.index + 11) === '</textarea>'\r\n\t\t);\r\n\t\tparser.read(/<\\/textarea>/);\r\n\t\telement.end = parser.index;\r\n\t} else if (name === 'script') {\r\n\t\t// special case\r\n\t\tconst start = parser.index;\r\n\t\tconst data = parser.readUntil(/<\\/script>/);\r\n\t\tconst end = parser.index;\r\n\t\telement.children.push({ start, end, type: 'Text', data });\r\n\t\tparser.eat('</script>', true);\r\n\t\telement.end = parser.index;\r\n\t} else if (name === 'style') {\r\n\t\t// special case\r\n\t\tconst start = parser.index;\r\n\t\tconst data = parser.readUntil(/<\\/style>/);\r\n\t\tconst end = parser.index;\r\n\t\telement.children.push({ start, end, type: 'Text', data });\r\n\t\tparser.eat('</style>', true);\r\n\t} else {\r\n\t\tparser.stack.push(element);\r\n\t}\r\n}\r\n\r\nfunction readTagName(parser: Parser) {\r\n\tconst start = parser.index;\r\n\r\n\tif (parser.read(SELF)) {\r\n\t\t// check we're inside a block, otherwise this\r\n\t\t// will cause infinite recursion\r\n\t\tlet i = parser.stack.length;\r\n\t\tlet legal = false;\r\n\r\n\t\twhile (i--) {\r\n\t\t\tconst fragment = parser.stack[i];\r\n\t\t\tif (fragment.type === 'IfBlock' || fragment.type === 'EachBlock') {\r\n\t\t\t\tlegal = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!legal) {\r\n\t\t\tparser.error({\r\n\t\t\t\tcode: `invalid-self-placement`,\r\n\t\t\t\tmessage: `<svelte:self> components can only exist inside if-blocks or each-blocks`\r\n\t\t\t}, start);\r\n\t\t}\r\n\r\n\t\treturn 'svelte:self';\r\n\t}\r\n\r\n\tif (parser.read(COMPONENT)) return 'svelte:component';\r\n\r\n\tconst name = parser.readUntil(/(\\s|\\/|>)/);\r\n\r\n\tif (metaTags.has(name)) return name;\r\n\r\n\tif (name.startsWith('svelte:')) {\r\n\t\tconst match = fuzzymatch(name.slice(7), valid_meta_tags);\r\n\r\n\t\tlet message = `Valid <svelte:...> tag names are ${list(valid_meta_tags)}`;\r\n\t\tif (match) message += ` (did you mean '${match}'?)`;\r\n\r\n\t\tparser.error({\r\n\t\t\tcode: 'invalid-tag-name',\r\n\t\t\tmessage\r\n\t\t}, start);\r\n\t}\r\n\r\n\tif (!validTagName.test(name)) {\r\n\t\tparser.error({\r\n\t\t\tcode: `invalid-tag-name`,\r\n\t\t\tmessage: `Expected valid tag name`\r\n\t\t}, start);\r\n\t}\r\n\r\n\treturn name;\r\n}\r\n\r\nfunction readAttribute(parser: Parser, uniqueNames: Set<string>) {\r\n\tconst start = parser.index;\r\n\r\n\tif (parser.eat('{')) {\r\n\t\tparser.allowWhitespace();\r\n\r\n\t\tif (parser.eat('...')) {\r\n\t\t\tconst expression = readExpression(parser);\r\n\r\n\t\t\tparser.allowWhitespace();\r\n\t\t\tparser.eat('}', true);\r\n\r\n\t\t\treturn {\r\n\t\t\t\tstart,\r\n\t\t\t\tend: parser.index,\r\n\t\t\t\ttype: 'Spread',\r\n\t\t\t\texpression\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tconst valueStart = parser.index;\r\n\r\n\t\t\tconst name = parser.readIdentifier();\r\n\t\t\tparser.allowWhitespace();\r\n\t\t\tparser.eat('}', true);\r\n\r\n\t\t\treturn {\r\n\t\t\t\tstart,\r\n\t\t\t\tend: parser.index,\r\n\t\t\t\ttype: 'Attribute',\r\n\t\t\t\tname,\r\n\t\t\t\tvalue: [{\r\n\t\t\t\t\tstart: valueStart,\r\n\t\t\t\t\tend: valueStart + name.length,\r\n\t\t\t\t\ttype: 'AttributeShorthand',\r\n\t\t\t\t\texpression: {\r\n\t\t\t\t\t\tstart: valueStart,\r\n\t\t\t\t\t\tend: valueStart + name.length,\r\n\t\t\t\t\t\ttype: 'Identifier',\r\n\t\t\t\t\t\tname\r\n\t\t\t\t\t}\r\n\t\t\t\t}]\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\tlet name = parser.readUntil(/(\\s|=|\\/|>)/);\r\n\tif (!name) return null;\r\n\tif (uniqueNames.has(name)) {\r\n\t\tparser.error({\r\n\t\t\tcode: `duplicate-attribute`,\r\n\t\t\tmessage: 'Attributes need to be unique'\r\n\t\t}, start);\r\n\t}\r\n\r\n\tuniqueNames.add(name);\r\n\r\n\tlet end = parser.index;\r\n\r\n\tparser.allowWhitespace();\r\n\r\n\tconst colon_index = name.indexOf(':');\r\n\tconst type = colon_index !== -1 && get_directive_type(name.slice(0, colon_index));\r\n\r\n\tlet value: any[] | true = true;\r\n\tif (parser.eat('=')) {\r\n\t\tvalue = readAttributeValue(parser);\r\n\t\tend = parser.index;\r\n\t}\r\n\r\n\tif (type) {\r\n\t\tconst [directive_name, ...modifiers] = name.slice(colon_index + 1).split('|');\r\n\r\n\t\tif (type === 'Ref') {\r\n\t\t\tparser.error({\r\n\t\t\t\tcode: `invalid-ref-directive`,\r\n\t\t\t\tmessage: `The ref directive is no longer supported — use \\`bind:this={${directive_name}}\\` instead`\r\n\t\t\t}, start);\r\n\t\t}\r\n\r\n\t\tif (value[0]) {\r\n\t\t\tif (value.length > 1 || value[0].type === 'Text') {\r\n\t\t\t\tparser.error({\r\n\t\t\t\t\tcode: `invalid-directive-value`,\r\n\t\t\t\t\tmessage: `Directive value must be a JavaScript expression enclosed in curly braces`\r\n\t\t\t\t}, value[0].start);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst directive = {\r\n\t\t\tstart,\r\n\t\t\tend,\r\n\t\t\ttype,\r\n\t\t\tname: directive_name,\r\n\t\t\tmodifiers,\r\n\t\t\texpression: (value[0] && value[0].expression) || null\r\n\t\t};\r\n\r\n\t\tif (type === 'Transition') {\r\n\t\t\tconst direction = name.slice(0, colon_index);\r\n\t\t\tdirective.intro = direction === 'in' || direction === 'transition';\r\n\t\t\tdirective.outro = direction === 'out' || direction === 'transition';\r\n\t\t}\r\n\r\n\t\tif (!directive.expression && (type === 'Binding' || type === 'Class')) {\r\n\t\t\tdirective.expression = {\r\n\t\t\t\tstart: directive.start + colon_index + 1,\r\n\t\t\t\tend: directive.end,\r\n\t\t\t\ttype: 'Identifier',\r\n\t\t\t\tname: directive.name\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn directive;\r\n\t}\r\n\r\n\treturn {\r\n\t\tstart,\r\n\t\tend,\r\n\t\ttype: 'Attribute',\r\n\t\tname,\r\n\t\tvalue,\r\n\t};\r\n}\r\n\r\nfunction get_directive_type(name) {\r\n\tif (name === 'use') return 'Action';\r\n\tif (name === 'animate') return 'Animation';\r\n\tif (name === 'bind') return 'Binding';\r\n\tif (name === 'class') return 'Class';\r\n\tif (name === 'on') return 'EventHandler';\r\n\tif (name === 'let') return 'Let';\r\n\tif (name === 'ref') return 'Ref';\r\n\tif (name === 'in' || name === 'out' || name === 'transition') return 'Transition';\r\n}\r\n\r\nfunction readAttributeValue(parser: Parser) {\r\n\tconst quoteMark = parser.eat(`'`) ? `'` : parser.eat(`\"`) ? `\"` : null;\r\n\r\n\tconst regex = (\r\n\t\tquoteMark === `'` ? /'/ :\r\n\t\tquoteMark === `\"` ? /\"/ :\r\n\t\t/(\\/>|[\\s\"'=<>`])/\r\n\t);\r\n\r\n\tconst value = readSequence(parser, () => !!parser.matchRegex(regex));\r\n\r\n\tif (quoteMark) parser.index += 1;\r\n\treturn value;\r\n}\r\n\r\nfunction readSequence(parser: Parser, done: () => boolean) {\r\n\tlet currentChunk: Node = {\r\n\t\tstart: parser.index,\r\n\t\tend: null,\r\n\t\ttype: 'Text',\r\n\t\tdata: '',\r\n\t};\r\n\r\n\tconst chunks = [];\r\n\r\n\twhile (parser.index < parser.template.length) {\r\n\t\tconst index = parser.index;\r\n\r\n\t\tif (done()) {\r\n\t\t\tcurrentChunk.end = parser.index;\r\n\r\n\t\t\tif (currentChunk.data) chunks.push(currentChunk);\r\n\r\n\t\t\tchunks.forEach(chunk => {\r\n\t\t\t\tif (chunk.type === 'Text')\r\n\t\t\t\t\tchunk.data = decodeCharacterReferences(chunk.data);\r\n\t\t\t});\r\n\r\n\t\t\treturn chunks;\r\n\t\t} else if (parser.eat('{')) {\r\n\t\t\tif (currentChunk.data) {\r\n\t\t\t\tcurrentChunk.end = index;\r\n\t\t\t\tchunks.push(currentChunk);\r\n\t\t\t}\r\n\r\n\t\t\tparser.allowWhitespace();\r\n\t\t\tconst expression = readExpression(parser);\r\n\t\t\tparser.allowWhitespace();\r\n\t\t\tparser.eat('}', true);\r\n\r\n\t\t\tchunks.push({\r\n\t\t\t\tstart: index,\r\n\t\t\t\tend: parser.index,\r\n\t\t\t\ttype: 'MustacheTag',\r\n\t\t\t\texpression,\r\n\t\t\t});\r\n\r\n\t\t\tcurrentChunk = {\r\n\t\t\t\tstart: parser.index,\r\n\t\t\t\tend: null,\r\n\t\t\t\ttype: 'Text',\r\n\t\t\t\tdata: '',\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tcurrentChunk.data += parser.template[parser.index++];\r\n\t\t}\r\n\t}\r\n\r\n\tparser.error({\r\n\t\tcode: `unexpected-eof`,\r\n\t\tmessage: `Unexpected end of input`\r\n\t});\r\n}\r\n","import { Parser } from '../index';\r\n\r\ntype Identifier = {\r\n\tstart: number;\r\n\tend: number;\r\n\ttype: 'Identifier';\r\n\tname: string;\r\n};\r\n\r\ntype Property = {\r\n\tstart: number;\r\n\tend: number;\r\n\ttype: 'Property';\r\n\tkind: string;\r\n\tshorthand: boolean;\r\n\tkey: Identifier;\r\n\tvalue: Context;\r\n};\r\n\r\ntype Context = {\r\n\tstart: number;\r\n\tend: number;\r\n\ttype: 'Identifier' | 'ArrayPattern' | 'ObjectPattern';\r\n\tname?: string;\r\n\telements?: Context[];\r\n\tproperties?: Property[];\r\n}\r\n\r\nfunction errorOnAssignmentPattern(parser: Parser) {\r\n\tif (parser.eat('=')) {\r\n\t\tparser.error({\r\n\t\t\tcode: 'invalid-assignment-pattern',\r\n\t\t\tmessage: 'Assignment patterns are not supported'\r\n\t\t}, parser.index - 1);\r\n\t}\r\n}\r\n\r\nexport default function readContext(parser: Parser) {\r\n\tconst context: Context = {\r\n\t\tstart: parser.index,\r\n\t\tend: null,\r\n\t\ttype: null\r\n\t};\r\n\r\n\tif (parser.eat('[')) {\r\n\t\tcontext.type = 'ArrayPattern';\r\n\t\tcontext.elements = [];\r\n\r\n\t\tdo {\r\n\t\t\tparser.allowWhitespace();\r\n\r\n\t\t\tif (parser.template[parser.index] === ',') {\r\n\t\t\t\tcontext.elements.push(null);\r\n\t\t\t} else {\r\n\t\t\t\tcontext.elements.push(readContext(parser));\r\n\t\t\t\tparser.allowWhitespace();\r\n\t\t\t}\r\n\t\t} while (parser.eat(','));\r\n\r\n\t\terrorOnAssignmentPattern(parser);\r\n\t\tparser.eat(']', true);\r\n\t\tcontext.end = parser.index;\r\n\t}\r\n\r\n\telse if (parser.eat('{')) {\r\n\t\tcontext.type = 'ObjectPattern';\r\n\t\tcontext.properties = [];\r\n\r\n\t\tdo {\r\n\t\t\tparser.allowWhitespace();\r\n\r\n\t\t\tconst start = parser.index;\r\n\t\t\tconst name = parser.readIdentifier();\r\n\t\t\tconst key: Identifier = {\r\n\t\t\t\tstart,\r\n\t\t\t\tend: parser.index,\r\n\t\t\t\ttype: 'Identifier',\r\n\t\t\t\tname\r\n\t\t\t};\r\n\t\t\tparser.allowWhitespace();\r\n\r\n\t\t\tconst value = parser.eat(':')\r\n\t\t\t\t? (parser.allowWhitespace(), readContext(parser))\r\n\t\t\t\t: key;\r\n\r\n\t\t\tconst property: Property = {\r\n\t\t\t\tstart,\r\n\t\t\t\tend: value.end,\r\n\t\t\t\ttype: 'Property',\r\n\t\t\t\tkind: 'init',\r\n\t\t\t\tshorthand: value.type === 'Identifier' && value.name === name,\r\n\t\t\t\tkey,\r\n\t\t\t\tvalue\r\n\t\t\t};\r\n\r\n\t\t\tcontext.properties.push(property);\r\n\r\n\t\t\tparser.allowWhitespace();\r\n\t\t} while (parser.eat(','));\r\n\r\n\t\terrorOnAssignmentPattern(parser);\r\n\t\tparser.eat('}', true);\r\n\t\tcontext.end = parser.index;\r\n\t}\r\n\r\n\telse {\r\n\t\tconst name = parser.readIdentifier();\r\n\t\tif (name) {\r\n\t\t\tcontext.type = 'Identifier';\r\n\t\t\tcontext.end = parser.index;\r\n\t\t\tcontext.name = name;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\tparser.error({\r\n\t\t\t\tcode: 'invalid-context',\r\n\t\t\t\tmessage: 'Expected a name, array pattern or object pattern'\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\terrorOnAssignmentPattern(parser);\r\n\t}\r\n\r\n\treturn context;\r\n}","import { whitespace } from './patterns';\r\n\r\nexport function trimStart(str: string) {\r\n\tlet i = 0;\r\n\twhile (whitespace.test(str[i])) i += 1;\r\n\r\n\treturn str.slice(i);\r\n}\r\n\r\nexport function trimEnd(str: string) {\r\n\tlet i = str.length;\r\n\twhile (whitespace.test(str[i - 1])) i -= 1;\r\n\r\n\treturn str.slice(0, i);\r\n}\r\n","import readContext from '../read/context';\r\nimport readExpression from '../read/expression';\r\nimport { whitespace } from '../../utils/patterns';\r\nimport { trimStart, trimEnd } from '../../utils/trim';\r\nimport { Parser } from '../index';\r\nimport { Node } from '../../interfaces';\r\n\r\nfunction trimWhitespace(block: Node, trimBefore: boolean, trimAfter: boolean) {\r\n\tif (!block.children || block.children.length === 0) return; // AwaitBlock\r\n\r\n\tconst firstChild = block.children[0];\r\n\tconst lastChild = block.children[block.children.length - 1];\r\n\r\n\tif (firstChild.type === 'Text' && trimBefore) {\r\n\t\tfirstChild.data = trimStart(firstChild.data);\r\n\t\tif (!firstChild.data) block.children.shift();\r\n\t}\r\n\r\n\tif (lastChild.type === 'Text' && trimAfter) {\r\n\t\tlastChild.data = trimEnd(lastChild.data);\r\n\t\tif (!lastChild.data) block.children.pop();\r\n\t}\r\n\r\n\tif (block.else) {\r\n\t\ttrimWhitespace(block.else, trimBefore, trimAfter);\r\n\t}\r\n\r\n\tif (firstChild.elseif) {\r\n\t\ttrimWhitespace(firstChild, trimBefore, trimAfter);\r\n\t}\r\n}\r\n\r\nexport default function mustache(parser: Parser) {\r\n\tconst start = parser.index;\r\n\tparser.index += 1;\r\n\r\n\tparser.allowWhitespace();\r\n\r\n\t// {/if} or {/each}\r\n\tif (parser.eat('/')) {\r\n\t\tlet block = parser.current();\r\n\t\tlet expected;\r\n\r\n\t\tif (block.type === 'ElseBlock' || block.type === 'PendingBlock' || block.type === 'ThenBlock' || block.type === 'CatchBlock') {\r\n\t\t\tblock.end = start;\r\n\t\t\tparser.stack.pop();\r\n\t\t\tblock = parser.current();\r\n\r\n\t\t\texpected = 'await';\r\n\t\t}\r\n\r\n\t\tif (block.type === 'IfBlock') {\r\n\t\t\texpected = 'if';\r\n\t\t} else if (block.type === 'EachBlock') {\r\n\t\t\texpected = 'each';\r\n\t\t} else if (block.type === 'AwaitBlock') {\r\n\t\t\texpected = 'await';\r\n\t\t} else {\r\n\t\t\tparser.error({\r\n\t\t\t\tcode: `unexpected-block-close`,\r\n\t\t\t\tmessage: `Unexpected block closing tag`\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tparser.eat(expected, true);\r\n\t\tparser.allowWhitespace();\r\n\t\tparser.eat('}', true);\r\n\r\n\t\twhile (block.elseif) {\r\n\t\t\tblock.end = parser.index;\r\n\t\t\tparser.stack.pop();\r\n\t\t\tblock = parser.current();\r\n\r\n\t\t\tif (block.else) {\r\n\t\t\t\tblock.else.end = start;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// strip leading/trailing whitespace as necessary\r\n\t\tconst charBefore = parser.template[block.start - 1];\r\n\t\tconst charAfter = parser.template[parser.index];\r\n\t\tconst trimBefore = !charBefore || whitespace.test(charBefore);\r\n\t\tconst trimAfter = !charAfter || whitespace.test(charAfter);\r\n\r\n\t\ttrimWhitespace(block, trimBefore, trimAfter);\r\n\r\n\t\tblock.end = parser.index;\r\n\t\tparser.stack.pop();\r\n\t} else if (parser.eat(':else')) {\r\n\t\tif (parser.eat('if')) {\r\n\t\t\tparser.error({\r\n\t\t\t\tcode: 'invalid-elseif',\r\n\t\t\t\tmessage: `'elseif' should be 'else if'`\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tparser.allowWhitespace();\r\n\r\n\t\t// :else if\r\n\t\tif (parser.eat('if')) {\r\n\t\t\tconst block = parser.current();\r\n\t\t\tif (block.type !== 'IfBlock')\r\n\t\t\t\tparser.error({\r\n\t\t\t\t\tcode: `invalid-elseif-placement`,\r\n\t\t\t\t\tmessage: 'Cannot have an {:else if ...} block outside an {#if ...} block'\r\n\t\t\t\t});\r\n\r\n\t\t\tparser.requireWhitespace();\r\n\r\n\t\t\tconst expression = readExpression(parser);\r\n\r\n\t\t\tparser.allowWhitespace();\r\n\t\t\tparser.eat('}', true);\r\n\r\n\t\t\tblock.else = {\r\n\t\t\t\tstart: parser.index,\r\n\t\t\t\tend: null,\r\n\t\t\t\ttype: 'ElseBlock',\r\n\t\t\t\tchildren: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstart: parser.index,\r\n\t\t\t\t\t\tend: null,\r\n\t\t\t\t\t\ttype: 'IfBlock',\r\n\t\t\t\t\t\telseif: true,\r\n\t\t\t\t\t\texpression,\r\n\t\t\t\t\t\tchildren: [],\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t};\r\n\r\n\t\t\tparser.stack.push(block.else.children[0]);\r\n\t\t}\r\n\r\n\t\t// :else\r\n\t\telse {\r\n\t\t\tconst block = parser.current();\r\n\t\t\tif (block.type !== 'IfBlock' && block.type !== 'EachBlock') {\r\n\t\t\t\tparser.error({\r\n\t\t\t\t\tcode: `invalid-else-placement`,\r\n\t\t\t\t\tmessage: 'Cannot have an {:else} block outside an {#if ...} or {#each ...} block'\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tparser.allowWhitespace();\r\n\t\t\tparser.eat('}', true);\r\n\r\n\t\t\tblock.else = {\r\n\t\t\t\tstart: parser.index,\r\n\t\t\t\tend: null,\r\n\t\t\t\ttype: 'ElseBlock',\r\n\t\t\t\tchildren: [],\r\n\t\t\t};\r\n\r\n\t\t\tparser.stack.push(block.else);\r\n\t\t}\r\n\t} else if (parser.eat(':then')) {\r\n\t\t// TODO DRY out this and the next section\r\n\t\tconst pendingBlock = parser.current();\r\n\t\tif (pendingBlock.type === 'PendingBlock') {\r\n\t\t\tpendingBlock.end = start;\r\n\t\t\tparser.stack.pop();\r\n\t\t\tconst awaitBlock = parser.current();\r\n\r\n\t\t\tif (!parser.eat('}')) {\r\n\t\t\t\tparser.requireWhitespace();\r\n\t\t\t\tawaitBlock.value = parser.readIdentifier();\r\n\t\t\t\tparser.allowWhitespace();\r\n\t\t\t\tparser.eat('}', true);\r\n\t\t\t}\r\n\r\n\t\t\tconst thenBlock: Node = {\r\n\t\t\t\tstart,\r\n\t\t\t\tend: null,\r\n\t\t\t\ttype: 'ThenBlock',\r\n\t\t\t\tchildren: []\r\n\t\t\t};\r\n\r\n\t\t\tawaitBlock.then = thenBlock;\r\n\t\t\tparser.stack.push(thenBlock);\r\n\t\t}\r\n\t} else if (parser.eat(':catch')) {\r\n\t\tconst thenBlock = parser.current();\r\n\t\tif (thenBlock.type === 'ThenBlock') {\r\n\t\t\tthenBlock.end = start;\r\n\t\t\tparser.stack.pop();\r\n\t\t\tconst awaitBlock = parser.current();\r\n\r\n\t\t\tif (!parser.eat('}')) {\r\n\t\t\t\tparser.requireWhitespace();\r\n\t\t\t\tawaitBlock.error = parser.readIdentifier();\r\n\t\t\t\tparser.allowWhitespace();\r\n\t\t\t\tparser.eat('}', true);\r\n\t\t\t}\r\n\r\n\t\t\tconst catchBlock: Node = {\r\n\t\t\t\tstart,\r\n\t\t\t\tend: null,\r\n\t\t\t\ttype: 'CatchBlock',\r\n\t\t\t\tchildren: []\r\n\t\t\t};\r\n\r\n\t\t\tawaitBlock.catch = catchBlock;\r\n\t\t\tparser.stack.push(catchBlock);\r\n\t\t}\r\n\t} else if (parser.eat('#')) {\r\n\t\t// {#if foo}, {#each foo} or {#await foo}\r\n\t\tlet type;\r\n\r\n\t\tif (parser.eat('if')) {\r\n\t\t\ttype = 'IfBlock';\r\n\t\t} else if (parser.eat('each')) {\r\n\t\t\ttype = 'EachBlock';\r\n\t\t} else if (parser.eat('await')) {\r\n\t\t\ttype = 'AwaitBlock';\r\n\t\t} else {\r\n\t\t\tparser.error({\r\n\t\t\t\tcode: `expected-block-type`,\r\n\t\t\t\tmessage: `Expected if, each or await`\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tparser.requireWhitespace();\r\n\r\n\t\tconst expression = readExpression(parser);\r\n\r\n\t\tconst block: Node = type === 'AwaitBlock' ?\r\n\t\t\t{\r\n\t\t\t\tstart,\r\n\t\t\t\tend: null,\r\n\t\t\t\ttype,\r\n\t\t\t\texpression,\r\n\t\t\t\tvalue: null,\r\n\t\t\t\terror: null,\r\n\t\t\t\tpending: {\r\n\t\t\t\t\tstart: null,\r\n\t\t\t\t\tend: null,\r\n\t\t\t\t\ttype: 'PendingBlock',\r\n\t\t\t\t\tchildren: []\r\n\t\t\t\t},\r\n\t\t\t\tthen: {\r\n\t\t\t\t\tstart: null,\r\n\t\t\t\t\tend: null,\r\n\t\t\t\t\ttype: 'ThenBlock',\r\n\t\t\t\t\tchildren: []\r\n\t\t\t\t},\r\n\t\t\t\tcatch: {\r\n\t\t\t\t\tstart: null,\r\n\t\t\t\t\tend: null,\r\n\t\t\t\t\ttype: 'CatchBlock',\r\n\t\t\t\t\tchildren: []\r\n\t\t\t\t},\r\n\t\t\t} :\r\n\t\t\t{\r\n\t\t\t\tstart,\r\n\t\t\t\tend: null,\r\n\t\t\t\ttype,\r\n\t\t\t\texpression,\r\n\t\t\t\tchildren: [],\r\n\t\t\t};\r\n\r\n\t\tparser.allowWhitespace();\r\n\r\n\t\t// {#each} blocks must declare a context – {#each list as item}\r\n\t\tif (type === 'EachBlock') {\r\n\t\t\tparser.eat('as', true);\r\n\t\t\tparser.requireWhitespace();\r\n\r\n\t\t\tblock.context = readContext(parser);\r\n\r\n\t\t\tparser.allowWhitespace();\r\n\r\n\t\t\tif (parser.eat(',')) {\r\n\t\t\t\tparser.allowWhitespace();\r\n\t\t\t\tblock.index = parser.readIdentifier();\r\n\t\t\t\tif (!block.index) parser.error({\r\n\t\t\t\t\tcode: `expected-name`,\r\n\t\t\t\t\tmessage: `Expected name`\r\n\t\t\t\t});\r\n\r\n\t\t\t\tparser.allowWhitespace();\r\n\t\t\t}\r\n\r\n\t\t\tif (parser.eat('(')) {\r\n\t\t\t\tparser.allowWhitespace();\r\n\r\n\t\t\t\tblock.key = readExpression(parser);\r\n\t\t\t\tparser.allowWhitespace();\r\n\t\t\t\tparser.eat(')', true);\r\n\t\t\t\tparser.allowWhitespace();\r\n\t\t\t} else if (parser.eat('@')) {\r\n\t\t\t\tblock.key = parser.readIdentifier();\r\n\t\t\t\tif (!block.key) parser.error({\r\n\t\t\t\t\tcode: `expected-name`,\r\n\t\t\t\t\tmessage: `Expected name`\r\n\t\t\t\t});\r\n\t\t\t\tparser.allowWhitespace();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet awaitBlockShorthand = type === 'AwaitBlock' && parser.eat('then');\r\n\t\tif (awaitBlockShorthand) {\r\n\t\t\tparser.requireWhitespace();\r\n\t\t\tblock.value = parser.readIdentifier();\r\n\t\t\tparser.allowWhitespace();\r\n\t\t}\r\n\r\n\t\tparser.eat('}', true);\r\n\r\n\t\tparser.current().children.push(block);\r\n\t\tparser.stack.push(block);\r\n\r\n\t\tif (type === 'AwaitBlock') {\r\n\t\t\tconst childBlock = awaitBlockShorthand ? block.then : block.pending;\r\n\t\t\tchildBlock.start = parser.index;\r\n\t\t\tparser.stack.push(childBlock);\r\n\t\t}\r\n\t} else if (parser.eat('@html')) {\r\n\t\t// {@html content} tag\r\n\t\tconst expression = readExpression(parser);\r\n\r\n\t\tparser.allowWhitespace();\r\n\t\tparser.eat('}', true);\r\n\r\n\t\tparser.current().children.push({\r\n\t\t\tstart,\r\n\t\t\tend: parser.index,\r\n\t\t\ttype: 'RawMustacheTag',\r\n\t\t\texpression,\r\n\t\t});\r\n\t} else if (parser.eat('@debug')) {\r\n\t\tlet identifiers;\r\n\r\n\t\t// Implies {@debug} which indicates \"debug all\"\r\n\t\tif (parser.read(/\\s*}/)) {\r\n\t\t\tidentifiers = [];\r\n\t\t} else {\r\n\t\t\tconst expression = readExpression(parser);\r\n\r\n\t\t\tidentifiers = expression.type === 'SequenceExpression'\r\n\t\t\t\t? expression.expressions\r\n\t\t\t\t: [expression];\r\n\r\n\t\t\tidentifiers.forEach(node => {\r\n\t\t\t\tif (node.type !== 'Identifier') {\r\n\t\t\t\t\tparser.error({\r\n\t\t\t\t\t\tcode: 'invalid-debug-args',\r\n\t\t\t\t\t\tmessage: '{@debug ...} arguments must be identifiers, not arbitrary expressions'\r\n\t\t\t\t\t}, node.start);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tparser.allowWhitespace();\r\n\t\t\tparser.eat('}', true);\r\n\t\t}\r\n\r\n\t\tparser.current().children.push({\r\n\t\t\tstart,\r\n\t\t\tend: parser.index,\r\n\t\t\ttype: 'DebugTag',\r\n\t\t\tidentifiers\r\n\t\t});\r\n\t} else {\r\n\t\tconst expression = readExpression(parser);\r\n\r\n\t\tparser.allowWhitespace();\r\n\t\tparser.eat('}', true);\r\n\r\n\t\tparser.current().children.push({\r\n\t\t\tstart,\r\n\t\t\tend: parser.index,\r\n\t\t\ttype: 'MustacheTag',\r\n\t\t\texpression,\r\n\t\t});\r\n\t}\r\n}\r\n","const reservedNames = new Set([\r\n\t'arguments',\r\n\t'await',\r\n\t'break',\r\n\t'case',\r\n\t'catch',\r\n\t'class',\r\n\t'const',\r\n\t'continue',\r\n\t'debugger',\r\n\t'default',\r\n\t'delete',\r\n\t'do',\r\n\t'else',\r\n\t'enum',\r\n\t'eval',\r\n\t'export',\r\n\t'extends',\r\n\t'false',\r\n\t'finally',\r\n\t'for',\r\n\t'function',\r\n\t'if',\r\n\t'implements',\r\n\t'import',\r\n\t'in',\r\n\t'instanceof',\r\n\t'interface',\r\n\t'let',\r\n\t'new',\r\n\t'null',\r\n\t'package',\r\n\t'private',\r\n\t'protected',\r\n\t'public',\r\n\t'return',\r\n\t'static',\r\n\t'super',\r\n\t'switch',\r\n\t'this',\r\n\t'throw',\r\n\t'true',\r\n\t'try',\r\n\t'typeof',\r\n\t'var',\r\n\t'void',\r\n\t'while',\r\n\t'with',\r\n\t'yield',\r\n]);\r\n\r\nexport default reservedNames;\r\n","// Adapted from https://github.com/acornjs/acorn/blob/6584815dca7440e00de841d1dad152302fdd7ca5/src/tokenize.js\r\n// Reproduced under MIT License https://github.com/acornjs/acorn/blob/master/LICENSE\r\n\r\nexport default function fullCharCodeAt(str: string, i: number): number {\r\n\tlet code = str.charCodeAt(i)\r\n\tif (code <= 0xd7ff || code >= 0xe000) return code;\r\n\r\n\tlet next = str.charCodeAt(i + 1);\r\n\treturn (code << 10) + next - 0x35fdc00;\r\n}","function getLocator(source, options) {\n    if (options === void 0) { options = {}; }\n    var offsetLine = options.offsetLine || 0;\n    var offsetColumn = options.offsetColumn || 0;\n    var originalLines = source.split('\\n');\n    var start = 0;\n    var lineRanges = originalLines.map(function (line, i) {\n        var end = start + line.length + 1;\n        var range = { start: start, end: end, line: i };\n        start = end;\n        return range;\n    });\n    var i = 0;\n    function rangeContains(range, index) {\n        return range.start <= index && index < range.end;\n    }\n    function getLocation(range, index) {\n        return { line: offsetLine + range.line, column: offsetColumn + index - range.start, character: index };\n    }\n    function locate(search, startIndex) {\n        if (typeof search === 'string') {\n            search = source.indexOf(search, startIndex || 0);\n        }\n        var range = lineRanges[i];\n        var d = search >= range.end ? 1 : -1;\n        while (range) {\n            if (rangeContains(range, search))\n                return getLocation(range, search);\n            i += d;\n            range = lineRanges[i];\n        }\n    }\n    ;\n    return locate;\n}\nfunction locate(source, search, options) {\n    if (typeof options === 'number') {\n        throw new Error('locate takes a { startIndex, offsetLine, offsetColumn } object as the third argument');\n    }\n    return getLocator(source, options)(search, options && options.startIndex);\n}\n\nexport { getLocator, locate };","import repeat from './repeat';\r\n\r\nfunction tabsToSpaces(str: string) {\r\n\treturn str.replace(/^\\t+/, match => match.split('\\t').join('  '));\r\n}\r\n\r\nexport default function getCodeFrame(\r\n\tsource: string,\r\n\tline: number,\r\n\tcolumn: number\r\n) {\r\n\tconst lines = source.split('\\n');\r\n\r\n\tconst frameStart = Math.max(0, line - 2);\r\n\tconst frameEnd = Math.min(line + 3, lines.length);\r\n\r\n\tconst digits = String(frameEnd + 1).length;\r\n\r\n\treturn lines\r\n\t\t.slice(frameStart, frameEnd)\r\n\t\t.map((str, i) => {\r\n\t\t\tconst isErrorLine = frameStart + i === line;\r\n\r\n\t\t\tlet lineNum = String(i + frameStart + 1);\r\n\t\t\twhile (lineNum.length < digits) lineNum = ` ${lineNum}`;\r\n\r\n\t\t\tif (isErrorLine) {\r\n\t\t\t\tconst indicator =\r\n\t\t\t\t\trepeat(' ', digits + 2 + tabsToSpaces(str.slice(0, column)).length) + '^';\r\n\t\t\t\treturn `${lineNum}: ${tabsToSpaces(str)}\\n${indicator}`;\r\n\t\t\t}\r\n\r\n\t\t\treturn `${lineNum}: ${tabsToSpaces(str)}`;\r\n\t\t})\r\n\t\t.join('\\n');\r\n}\r\n","import { locate } from 'locate-character';\r\nimport getCodeFrame from '../utils/getCodeFrame';\r\n\r\nclass CompileError extends Error {\r\n\tcode: string;\r\n\tstart: { line: number, column: number };\r\n\tend: { line: number, column: number };\r\n\tpos: number;\r\n\tfilename: string;\r\n\tframe: string;\r\n\r\n\ttoString() {\r\n\t\treturn `${this.message} (${this.start.line}:${this.start.column})\\n${this.frame}`;\r\n\t}\r\n}\r\n\r\nexport default function error(message: string, props: {\r\n\tname: string,\r\n\tcode: string,\r\n\tsource: string,\r\n\tfilename: string,\r\n\tstart: number,\r\n\tend?: number\r\n}) {\r\n\tconst error = new CompileError(message);\r\n\terror.name = props.name;\r\n\r\n\tconst start = locate(props.source, props.start, { offsetLine: 1 });\r\n\tconst end = locate(props.source, props.end || props.start, { offsetLine: 1 });\r\n\r\n\terror.code = props.code;\r\n\terror.start = start;\r\n\terror.end = end;\r\n\terror.pos = props.start;\r\n\terror.filename = props.filename;\r\n\r\n\terror.frame = getCodeFrame(props.source, start.line - 1, start.column);\r\n\r\n\tthrow error;\r\n}","import { isIdentifierStart, isIdentifierChar } from 'acorn';\r\nimport fragment from './state/fragment';\r\nimport { whitespace } from '../utils/patterns';\r\nimport reservedNames from '../utils/reservedNames';\r\nimport fullCharCodeAt from '../utils/fullCharCodeAt';\r\nimport { Node, Ast, CustomElementOptions } from '../interfaces';\r\nimport error from '../utils/error';\r\n\r\ninterface ParserOptions {\r\n\tfilename?: string;\r\n\tbind?: boolean;\r\n\tcustomElement?: CustomElementOptions | true;\r\n}\r\n\r\ntype ParserState = (parser: Parser) => (ParserState | void);\r\n\r\nexport class Parser {\r\n\treadonly template: string;\r\n\treadonly filename?: string;\r\n\treadonly customElement: CustomElementOptions | true;\r\n\r\n\tindex = 0;\r\n\tstack: Array<Node> = [];\r\n\r\n\thtml: Node;\r\n\tcss: Node[] = [];\r\n\tjs: Node[] = [];\r\n\tmetaTags = {};\r\n\r\n\tallowBindings: boolean;\r\n\r\n\tconstructor(template: string, options: ParserOptions) {\r\n\t\tif (typeof template !== 'string') {\r\n\t\t\tthrow new TypeError('Template must be a string');\r\n\t\t}\r\n\r\n\t\tthis.template = template.replace(/\\s+$/, '');\r\n\t\tthis.filename = options.filename;\r\n\t\tthis.customElement = options.customElement;\r\n\r\n\t\tthis.allowBindings = options.bind !== false;\r\n\r\n\t\tthis.html = {\r\n\t\t\tstart: null,\r\n\t\t\tend: null,\r\n\t\t\ttype: 'Fragment',\r\n\t\t\tchildren: [],\r\n\t\t};\r\n\r\n\t\tthis.stack.push(this.html);\r\n\r\n\t\tlet state: ParserState = fragment;\r\n\r\n\t\twhile (this.index < this.template.length) {\r\n\t\t\tstate = state(this) || fragment;\r\n\t\t}\r\n\r\n\t\tif (this.stack.length > 1) {\r\n\t\t\tconst current = this.current();\r\n\r\n\t\t\tconst type = current.type === 'Element' ? `<${current.name}>` : 'Block';\r\n\t\t\tconst slug = current.type === 'Element' ? 'element' : 'block';\r\n\r\n\t\t\tthis.error({\r\n\t\t\t\tcode: `unclosed-${slug}`,\r\n\t\t\t\tmessage: `${type} was left open`\r\n\t\t\t}, current.start);\r\n\t\t}\r\n\r\n\t\tif (state !== fragment) {\r\n\t\t\tthis.error({\r\n\t\t\t\tcode: `unexpected-eof`,\r\n\t\t\t\tmessage: 'Unexpected end of input'\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.html.children.length) {\r\n\t\t\tlet start = this.html.children[0] && this.html.children[0].start;\r\n\t\t\twhile (/\\s/.test(template[start])) start += 1;\r\n\r\n\t\t\tlet end = this.html.children[this.html.children.length - 1] && this.html.children[this.html.children.length - 1].end;\r\n\t\t\twhile (/\\s/.test(template[end - 1])) end -= 1;\r\n\r\n\t\t\tthis.html.start = start;\r\n\t\t\tthis.html.end = end;\r\n\t\t} else {\r\n\t\t\tthis.html.start = this.html.end = null;\r\n\t\t}\r\n\t}\r\n\r\n\tcurrent() {\r\n\t\treturn this.stack[this.stack.length - 1];\r\n\t}\r\n\r\n\tacornError(err: any) {\r\n\t\tthis.error({\r\n\t\t\tcode: `parse-error`,\r\n\t\t\tmessage: err.message.replace(/ \\(\\d+:\\d+\\)$/, '')\r\n\t\t}, err.pos);\r\n\t}\r\n\r\n\terror({ code, message }: { code: string, message: string }, index = this.index) {\r\n\t\terror(message, {\r\n\t\t\tname: 'ParseError',\r\n\t\t\tcode,\r\n\t\t\tsource: this.template,\r\n\t\t\tstart: index,\r\n\t\t\tfilename: this.filename\r\n\t\t});\r\n\t}\r\n\r\n\teat(str: string, required?: boolean, message?: string) {\r\n\t\tif (this.match(str)) {\r\n\t\t\tthis.index += str.length;\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (required) {\r\n\t\t\tthis.error({\r\n\t\t\t\tcode: `unexpected-${this.index === this.template.length ? 'eof' : 'token'}`,\r\n\t\t\t\tmessage: message || `Expected ${str}`\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tmatch(str: string) {\r\n\t\treturn this.template.slice(this.index, this.index + str.length) === str;\r\n\t}\r\n\r\n\tmatchRegex(pattern: RegExp) {\r\n\t\tconst match = pattern.exec(this.template.slice(this.index));\r\n\t\tif (!match || match.index !== 0) return null;\r\n\r\n\t\treturn match[0];\r\n\t}\r\n\r\n\tallowWhitespace() {\r\n\t\twhile (\r\n\t\t\tthis.index < this.template.length &&\r\n\t\t\twhitespace.test(this.template[this.index])\r\n\t\t) {\r\n\t\t\tthis.index++;\r\n\t\t}\r\n\t}\r\n\r\n\tread(pattern: RegExp) {\r\n\t\tconst result = this.matchRegex(pattern);\r\n\t\tif (result) this.index += result.length;\r\n\t\treturn result;\r\n\t}\r\n\r\n\treadIdentifier() {\r\n\t\tconst start = this.index;\r\n\r\n\t\tlet i = this.index;\r\n\r\n\t\tconst code = fullCharCodeAt(this.template, i);\r\n\t\tif (!isIdentifierStart(code, true)) return null;\r\n\r\n\t\ti += code <= 0xffff ? 1 : 2;\r\n\r\n\t\twhile (i < this.template.length) {\r\n\t\t\tconst code = fullCharCodeAt(this.template, i);\r\n\r\n\t\t\tif (!isIdentifierChar(code, true)) break;\r\n\t\t\ti += code <= 0xffff ? 1 : 2;\r\n\t\t}\r\n\r\n\t\tconst identifier = this.template.slice(this.index, this.index = i);\r\n\r\n\t\tif (reservedNames.has(identifier)) {\r\n\t\t\tthis.error({\r\n\t\t\t\tcode: `unexpected-reserved-word`,\r\n\t\t\t\tmessage: `'${identifier}' is a reserved word in JavaScript and cannot be used here`\r\n\t\t\t}, start);\r\n\t\t}\r\n\r\n\t\treturn identifier;\r\n\t}\r\n\r\n\treadUntil(pattern: RegExp) {\r\n\t\tif (this.index >= this.template.length)\r\n\t\t\tthis.error({\r\n\t\t\t\tcode: `unexpected-eof`,\r\n\t\t\t\tmessage: 'Unexpected end of input'\r\n\t\t\t});\r\n\r\n\t\tconst start = this.index;\r\n\t\tconst match = pattern.exec(this.template.slice(start));\r\n\r\n\t\tif (match) {\r\n\t\t\tthis.index = start + match.index;\r\n\t\t\treturn this.template.slice(start, this.index);\r\n\t\t}\r\n\r\n\t\tthis.index = this.template.length;\r\n\t\treturn this.template.slice(start);\r\n\t}\r\n\r\n\trequireWhitespace() {\r\n\t\tif (!whitespace.test(this.template[this.index])) {\r\n\t\t\tthis.error({\r\n\t\t\t\tcode: `missing-whitespace`,\r\n\t\t\t\tmessage: `Expected whitespace`\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.allowWhitespace();\r\n\t}\r\n}\r\n\r\nexport default function parse(\r\n\ttemplate: string,\r\n\toptions: ParserOptions = {}\r\n): Ast {\r\n\tconst parser = new Parser(template, options);\r\n\r\n\t// TODO we way want to allow multiple <style> tags —\r\n\t// one scoped, one global. for now, only allow one\r\n\tif (parser.css.length > 1) {\r\n\t\tparser.error({\r\n\t\t\tcode: 'duplicate-style',\r\n\t\t\tmessage: 'You can only have one top-level <style> tag per component'\r\n\t\t}, parser.css[1].start);\r\n\t}\r\n\r\n\tconst instance_scripts = parser.js.filter(script => script.context === 'default');\r\n\tconst module_scripts = parser.js.filter(script => script.context === 'module');\r\n\r\n\tif (instance_scripts.length > 1) {\r\n\t\tparser.error({\r\n\t\t\tcode: `invalid-script`,\r\n\t\t\tmessage: `A component can only have one instance-level <script> element`\r\n\t\t}, instance_scripts[1].start);\r\n\t}\r\n\r\n\tif (module_scripts.length > 1) {\r\n\t\tparser.error({\r\n\t\t\tcode: `invalid-script`,\r\n\t\t\tmessage: `A component can only have one <script context=\"module\"> element`\r\n\t\t}, module_scripts[1].start);\r\n\t}\r\n\r\n\treturn {\r\n\t\thtml: parser.html,\r\n\t\tcss: parser.css[0],\r\n\t\tinstance: instance_scripts[0],\r\n\t\tmodule: module_scripts[0]\r\n\t};\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA;;;;;;;;;;AAUA;;AAEA;;;;;AAKA;;;;;;;;;;AAUA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;AASA;;;AAGA;;;;;AAKA;;;;;;;;;;;;AAYA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;;;;;;;;;;;;;;AAeA;;;AAGA;AACA;;;;AAIA;;;AAGA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmGA;AACA;;AAEA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;;;;AAIA;;;;AAIA;;;;AAIA;;;;;;;AAOA;;;;;AAKA;;;;AAIA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuFA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA;;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;;;;;;;;AASA;;;;AAIA;;;;;;AAMA;;;;AAIA;;AAEA;;;;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;AAWA;;;;;;AAMA;;;;;;;;AAQA;;;;;;AAMA;;;;;;AAMA;;;;;;;;;;;AAWA;;;;AAIA;;;;;;;;;;;;;AAaA;;;;;;AAMA;;;;AAIA;;;;;;;;;AASA;;;;;;;;AAQA;;;;;;;;;;;AAWA;;;;;;;AAOA;;;;;;AAMA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;;;;;AAKA;;;;;;;;;AASA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;;;;;;;;;;;AAWA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;;;;AAOA;;;;;;;;;AASA;;;;;;;;AAQA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;AAQA;AACA;AACA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA;;;;;AAKA;;;;;;;;;;;;AAYA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;;;;AAYA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;;;;;AAKA;;;;;;;;;;AAUA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;AAOA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;AAMA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6EA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoGA;;;;;;;;AAQA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA;;;;AAIA;;;;;;;;;;AAUA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;AASA;;;;;;;;AAQA;;;;;;;;AAQA;;AAEA;;;;;;AAMA;;AAEA;;;;;;;;;;;;AAYA;;;;AAIA;;;;;;;AAOA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;;;;;;;AAQA;;;;AAIA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;;;;;;AAcA;;AAEA;;;;AAIA;;;;;;AAMA;;;;;;;;;;AAUA;;;;;;AAMA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;;;;;;AAaA;;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;AAWA;;;;;;;;;;;;AAYA;;;;;;;;;;;;AAYA;;;;;AAKA;;;;;AAKA;;;;;;AAMA;;;;AAIA;;;;;;;;;;AAUA;;;;;;;;AAQA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;AAeA;AACA;;;;;;AAMA;;;AAGA;AACA;;;;;AAKA;AACA;;;;;;;;;;;;;;AAcA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;AASA;;;;;;AAMA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;AAaA;;;;AAIA;;;;AAIA;;;;AAIA;;;;;;;;AAQA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;;;;;;;;;;;AAWA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;AAaA;;;;;;;;AAQA;;;;;;;;;AASA;;;;;;;;;;;;;AAaA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;AAgBA;;;;;AAKA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;AAYA;;;;;;;;;;;AAWA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;;;;AASA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;AAMA;;;;;;;AAOA;;;;;;;;;AASA;;;;;;AAMA;;;;;;;;;AASA;;;;;;AAMA;;;;;AAKA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;AAUA;;;;;AAKA;;;;;;;;;;AAUA;;;;;;;AAOA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;AAUA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;AAaA;;;;AAIA;;;;;;;;;;;AAWA;;;;;;AAMA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;AAOA;;;;;;;;;;;;AAYA;;;;;;;;;AASA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;AAaA;;;;;;;AAOA;;;;;;;;;;;;;;;;AAgBA;;;;;;;AAOA;;;;;;AAMA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;;;AAeA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;AAEA;;;;;;;;;;;;;;;AAeA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;AASA;;;;;;;;AAQA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACr3JA;AAEA;;;AAGA;;AAEA;;AAEA;;;;;;AAMA;;;;AAIA;;AAEA;;AAEA;;;AAGA;;;AAGA;;AAEA;;;;;;;;;AASA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;;AAEA;;;;;;AAMA;;;;;ACRA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;;AAEA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;AChKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;AAUA;;;;;;AAMA;;;;AAIA;;;;;;;;;;;;AAYA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;AAIA;;;;;;;;;;;;AAYA;;;;;;;;;;;;AAYA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;ACzOA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAujnBA;;;;;;;;;;;;;;;;;ACiBA;;;;;;;;AAQA;AACA;;;;;;AAMA;AACA;;AAEA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;AAYA;;AAEA;;;;AAIA;;;;AAIA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;AAgBA;;;;;AAKA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;;;;;;AASA;;ACteA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;;AAEA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;;;;ACAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;;;;ACnDA;;AAEA;;;;;;;;;;;;ACFA;;AAEA;;;;;;ACHA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;;;;;;;;ACAA;;;;;;ACAA;;;;;;;;;ACCA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;;;;;;;;;;;;;ACDA;AACA;;AAEA;;;;;;;;;;;;;;;;;ACHA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;;;;;;;;;;;;;;;;;ACpFA;;;;;;;;ACEA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACFA;;ACAA;;ACCA;;AAEA;;;;;;;;ACHA;;ACAA;;ACCA;;AAEA;;;;;;;;ACHA;;ACAA;;ACEA;;;;;;;;ACFA;;;;;;;;;;;;;ACAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;;AAEA;;;;;;AAMA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;;AAEA;;;;;;;;;;;;;;;;;;ACFA;;AAEA;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;ACLA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;;AAEA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;;;;;;;;;;ACpHA;;AAEA;AACA;AACA;;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;;;AAGA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;;AAEA;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;ACLA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;;AAEA;;;;;;;;;;;;;;;;;ACFA;AACA;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;ACJA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;AAEA;;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;;AAEA;;;;;;;;;;;;;;;;;ACDA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8EA;;;;;;;;;;;;;;;;;;;;;;ACxGA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;ACPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGA;;;;;;ACCA;AACA;;AAEA;;AAEA;;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACyDA;;;;;;;;;;ACxkCA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrEA;;AAEA;;;;;;;;;;;;;;ACQA;AACA;;;AAGA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAEA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;AAiBA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrFA;;AAEA;;;;;;;AAOA;;AAEA;;;;;;;;;;;;;;;;;AAiBA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8MA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4HA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3cA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;;;;;;;ACFA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;AAGA;;;;;;;;ACHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,AACA;;AAEA;;;;;;;ACjCA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}